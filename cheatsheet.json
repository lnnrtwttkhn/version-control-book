{
  "cli": {
    "pwd": "Displays the path of the current working directory",
    "cd <PATH>": "Changes the current working directory to `<PATH>`",
    "cd ~": "Changes the current working directory to the user's home directory",
    "cd ..": "Moves up one folder",
    "cd ../..": "Moves up two folders",
    "clear": "Clears the contents of your command line window",
    "ls": "Lists files and folders in the current working directory",
    "ls <PATH>": "Lists files and folders in `<PATH>`",
    "ls -a": "Lists all files (including hidden files) in the current working directory",
    "ls -alh": "Lists all files in a long format that is easy to read for humans",
    "[Command] --help": "Displays all possible flags for a specific command (on Windows)",
    "man [Command]": "Displays all possible flags for a specific command (on macOS)",
    "mkdir <FOLDER>": "Creates a new folder called `<FOLDER>`",
    "mkdir <FOLDER1> <FOLDER2>": "Creates two separate folders called `<FOLDER1>` and `<FOLDER2>`",
    "touch <FILE>": "Creates a new empty file called `<FILE>`",
    "open <FILE>": "Opens the file called `<FILE>` (on macOS)",
    "start <FILE>": "Opens the file called `<FILE>` (on Windows)",
    "echo \"example text\" >> file.txt": "Writes \"example text\" into `file.txt`",
    "cat <FILE>": "Displays the content of `<FILE>`",
    "mv FILE.txt <FOLDER>": "Move `FILE.txt` into `<FOLDER>`",
    "mv <FOLDER_OLD> <FOLDER_NEW>": "Renames `<FOLDER_OLD>` to `<FOLDER_NEW>`",
    "ls -alh *.csv": "Uses a wildcard to list all `.csv` files in the current working directory",
    "rm -r <FOLDER>": "Removes the folder `<FOLDER>`",
    "history": "Display the command history of the current terminal session",
    "history > history.txt": "Saves the entire command history to a file named `history.txt` (overwrites existing content in `history.txt`)",
    "history >> history.txt": "Adds the entire command history to the end of the file named `history.txt`",
    "tree": "Displays a graphical representation of the directory structure",
    "wget <URL>": "Downloads a file from the specified <URL> to the current directory"
  },
  "config": {
    "git config": "Get an overview of Git config commands",
    "git config --global \"user.name\"": "Sets Git username",
    "git config --global \"user.email\"": "Sets Git email address",
    "git config --global core.editor \"editorname\"": "Sets Git text editor",
    "git config --global init.defaultBranch main": "Sets default branch name to `main`",
    "git config --list": "Views set Git configurations"
  },
  "basic": {
    "git init": "Initializes a folder as a Git repository",
    "git status": "Shows Git tracking status of files in the repository",
    "git add": "Adds file(s) to the staging area",
    "git commit": "Commits staged files",
    "git commit -m \"commit message\"": "Commits staged files with a commit message"
  },
  "essentials": {
    "git log": "Views past commits",
    "git diff": "Views made changes compared to the last commit",
    "git mv": "Renames or moves files and automatically stages the changes"
  },
  "remote_intro": {
    "git remote": "Manages remote repositories",
    "git clone": "Creates a local copy of a repository",
    "git pull": "Fetches and merges the latest changes from a remote repository into the current branch",
    "git fetch": "Updates remote tracking branches",
    "git push": "Uploads local commits to a remote repository"
  },
  "github_advanced": { 
    "git blame": "Shows the authorship and commit information of each line in a file"
  },
  "branches": {
    "git branch": "Lists / creates and deletes branches",
    "git branch feature": "Creates the `feature` branch",
    "git branch -d feature": "Deletes the `feature` branch",
    "git switch": "Switches between branches",
    "git switch feature": "Switches to the `feature` branch",
    "git checkout": "Switches between branches",
    "git checkout -b feature": "Creates and switches to the `feature` branch",
    "git merge": "Merges branches",
    "git merge feature": "Merges the `feature` branch into the current branch",
    "git merge --abort": "Aborts a merge",
    "git merge --squash": "Squaches commits on branch into a single commit and merge",
    "git stash": "Staches changes for later use",
    "git stash -m \"stashing message\"": "Stashes changes and includes a message",
    "git stash list":"Shows stored stashes", 
    "git stash apply": "Applies the latest stash",
    "git stash apply stash@{n}": "Applies a specific stash",
    "git stash pop": "Applies the latest stash and removes it from stash list",
    "git stash pop stash@{n}": "Applies a specific stash and removes it from stash list",
    "git cherry-pick <commithash>": "Applies changes from `<commithash>`",
    "git rebase": "Different way of integrating changes from two branches"
  },
  "Tags and Releases": {
    "git tag": "Lists all tags",
    "git tag v1.0": "Creates a tag on the basis of your current commit named `v1.0`",
    "git tag v1.1 <commit-hash>": "Creates a tag on the basis of a specific commit hash named `v1.1`",
    "git tag -a v1.0 -m \"Release version 1.0\"": "Creates an annotated tag on the basis of your current commit hash named `v1.0` with the tagging message `Release version 1.0`",
    "git push origin <tag-name>": "Pushes a specific tag to remote",
    "git push origin --tags": "Pushes all created tags to remote",
    "git fetch --tags": "Fetches all created tags from remote",
    "git pull --tags": "Pulls all created tags from remote"
  },
  "rewriting_history": {
    "git restore <FILE>": "Reverts `<FILE>` back to the state of your last commit",
    "git restore .": "Reverts all files in your repository back to the state of your last commit",
    "git restore --staged <FILE>": "Removes `<FILE>` from your staging area",
    "git restore --staged .": "Removes all files in your repository from your staging area",
    "git rm <FILE>": "Deletes `<FILE>` from your repository",
    "git rm --cached <FILE>": "Removes `<FILE>` from your repository but keeps `<FILE>` on your system",
    "git revert <commithash>": "Creates a new commit which reverts your repository back to `<commithash>`",
    "git reflog": "Logs recent branch changes",
    "git reset <commithash>": "Resets the branch to a specified commit, keeping changes in the working directory",
    "git reset --hard <commithash>": "Resets the branch to a specified commit",
    "git clean": "Deletes untracked files from your directory",
    "git filter-repo --invert-paths --path < PATH-TO-FILE-YOU-WANT-TO-REMOVE >": "Remove specified file from your repository history",
    "brew install git-filter-repo": "Installs git filter-repo using brew"
  }
}
