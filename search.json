[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Version Control of Code and Data",
    "section": "",
    "text": "Preface"
  },
  {
    "objectID": "contents.html",
    "href": "contents.html",
    "title": "Contents",
    "section": "",
    "text": "The estimate of the reading time for each chapter is computed by counting the words in the chapter and assuming a reading speed of 200 words per minute.\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Modified - Oldest\n        \n         \n          Modified - Newest\n        \n         \n          Reading Time (Low to High)\n        \n         \n          Reading Time (High to Low)\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nIntroduction\n\n\n\n\n\n\n\nbeginner\n\n\nbasics\n\n\n\n\nIntroduction to fundamental concepts of version control.\n\n\n\n\n\n\n15 min\n\n\nJanuary 12, 2024\n\n\n\n\n\n\n  \n\n\n\n\nCommand Line\n\n\n\n\n\n\n\nbeginner\n\n\nbasics\n\n\ncommand line\n\n\n\n\nIn this session, we will explore the concept of the command line and discover some commands that work well alongside Git.\n\n\n\n\n\n\n19 min\n\n\nJanuary 12, 2024\n\n\n\n\n\n\n  \n\n\n\n\nInstallation\n\n\n\n\n\n\n\nbeginner\n\n\nbasics\n\n\n\n\nAll beginnings are difficult: This chapter is about downloading and installing Git.\n\n\n\n\n\n\n3 min\n\n\nJanuary 12, 2024\n\n\n\n\n\n\n  \n\n\n\n\nSetup\n\n\n\n\n\n\n\nbeginner\n\n\nbasics\n\n\nsetup\n\n\n\n\nIn this chapter, we will configure Git!\n\n\n\n\n\n\n7 min\n\n\nJanuary 12, 2024\n\n\n\n\n\n\n  \n\n\n\n\nFirst steps with Git\n\n\n\n\n\n\n\nbeginner\n\n\nbasics\n\n\n\n\nExploring the most important basic commands you will need.\n\n\n\n\n\n\n23 min\n\n\nJanuary 12, 2024\n\n\n\n\n\n\n  \n\n\n\n\nBranches\n\n\n\n\n\n\n\nbeginner\n\n\nbasics\n\n\n\n\nIn this chapter you will learn about the power of branches. Create, manage and merge branches like a pro!\n\n\n\n\n\n\n12 min\n\n\nJanuary 12, 2024\n\n\n\n\n\n\n  \n\n\n\n\nGitHub\n\n\n\n\n\n\n\nintermediate\n\n\ngithub\n\n\nremote\n\n\n\n\nThis chapter will introduce you to remote repositories, in particular GitHub.\n\n\n\n\n\n\n22 min\n\n\nJanuary 12, 2024\n\n\n\n\n\n\n  \n\n\n\n\nProject Management\n\n\n\n\n\n\n\nproject management\n\n\nbasics\n\n\n\n\nIntroduction to fundamental concepts of version control.\n\n\n\n\n\n\n1 min\n\n\nJanuary 12, 2024\n\n\n\n\n\n\n  \n\n\n\n\nIssues\n\n\n\n\n\n\n\nproject management\n\n\nbasics\n\n\n\n\nLearn how to discuss your ideas and plan your work next to issues.\n\n\n\n\n\n\n14 min\n\n\nJanuary 12, 2024\n\n\n\n\n\n\n  \n\n\n\n\nGraphical User Interfaces\n\n\n\n\n\n\n\nbeginner\n\n\nbasics\n\n\n\n\nIn this chapter, we will give an introduction to Graphical User Interfaces (GUIs) for Git. We will showcase two different, commonly used GUIs, including GitHub Desktop and…\n\n\n\n\n\n\n7 min\n\n\nJanuary 12, 2024\n\n\n\n\n\n\n  \n\n\n\n\nStashing and Co.\n\n\n\n\n\n\n\nintermediate\n\n\n\n\nIn this chapter, we will look at some more advanced essential commands, including stashing, reverting and rebasing\n\n\n\n\n\n\n14 min\n\n\nJanuary 12, 2024\n\n\n\n\n\n\n  \n\n\n\n\nRewriting history\n\n\n\n\n\n\n\n\n\n\n\n\n7 min\n\n\nJanuary 12, 2024\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "chapters/intro-version-control.html#acknowledgements",
    "href": "chapters/intro-version-control.html#acknowledgements",
    "title": "1  Introduction",
    "section": "1.1 Acknowledgements",
    "text": "1.1 Acknowledgements\nWe would like to express our gratitude to the following resources, which have been essential in shaping this chapter. We recommend these references for further reading:\n\n\n\n\nAuthors\nTitle\nWebsite\nLicense\nSource\n\n\n\n\nKoziar et al. (2023)\nswcarpentry/git-novice: Software Carpentry: Version Control with Git 2023-05\n\nCC BY 4.0\n\n\n\nBryan (2018)\nExcuse Me, Do You Have a Moment to Talk About Version Control?\n\nWebsite: .\n\n\n\nRam (2013)\nGit can facilitate greater reproducibility and increased transparency in science\n\nCC BY 2.0\n\n\n\nPerez-Riverol et al. (2016)\nTen Simple Rules for Taking Advantage of Git and GitHub\n\nCC BY 4.0\n\n\n\nAI for Multiple Long-term Conditions Research Support Facility (2023)\nIntroduction to version control with git\n\nCC BY 4.0"
  },
  {
    "objectID": "chapters/intro-version-control.html#learning-objectives",
    "href": "chapters/intro-version-control.html#learning-objectives",
    "title": "1  Introduction",
    "section": "1.2 Learning Objectives",
    "text": "1.2 Learning Objectives\n\nWhat is version control?\nWhy is version control useful (for research)?\nWhat are Git and GitHub?\nWhat is the difference between Git and GitHub?"
  },
  {
    "objectID": "chapters/intro-version-control.html#what-is-version-control",
    "href": "chapters/intro-version-control.html#what-is-version-control",
    "title": "1  Introduction",
    "section": "1.3 What is version control?",
    "text": "1.3 What is version control?\n\n“Version control is an approach to record changes made in a file or set of files over time so that you and your collaborators can track their history, review any changes, and revert or go back to earlier versions.” – The Turing Way Community (2022), chapter on Version Control.\n\n\n\n\nFigure 1.1: This illustration is created by Scriberia with The Turing Way community. Used under a CC-BY 4.0 licence. DOI: 10.5281/zenodo.3695300 (Version 3, direct download link)."
  },
  {
    "objectID": "chapters/intro-version-control.html#benefits-of-version-control",
    "href": "chapters/intro-version-control.html#benefits-of-version-control",
    "title": "1  Introduction",
    "section": "1.4 Benefits of version control",
    "text": "1.4 Benefits of version control\nVersion control offers numerous benefits. It allows to …\n\nTrack the history of changes in your files (it’s clear what you did & you have the option to revert back)\nWork with the latest version of a file\nBackup previous versions of files\nGo back to previous versions of your files\nTest out new features without messing up your previous version\nCollaborate with others on the same files at the same time\n\nThis makes version control a great data management and documentation tool."
  },
  {
    "objectID": "chapters/intro-version-control.html#challenges",
    "href": "chapters/intro-version-control.html#challenges",
    "title": "1  Introduction",
    "section": "1.5 Challenges",
    "text": "1.5 Challenges\n\n1.5.1 Example\nYou have a person 1 who is developing a script to analyze their data. You go through different versions, script-v1, script-v2, script-v3. Now you want to test out a new feature. It takes you a while to test this feature. It becomes unclear what you should call all these files. Then you realize that you need help with this. So then researcher 2 comes in and they help you implementing this feature. More files are created, but no ideas how to name them. Person 3 has a lot of ideas but is not editing the files directly. So script v-3 is created. One you realize that this is becoming complicated, you create a meta document that you want to use to keep track of the project progress. Then you realize that you software has bugs and you can’t figure out when this bug has occurred for the first time. Time has passed and you ask yourself: what is the latest version of my script and where is it? When did I incorporate that new feature. who made that change and why? Your collaborator asks you to run version 2 of the script but you dont have it anymore. In a real-life situation, there might be many more people involved and many more documents."
  },
  {
    "objectID": "chapters/intro-version-control.html#versions-in-multiple-files",
    "href": "chapters/intro-version-control.html#versions-in-multiple-files",
    "title": "1  Introduction",
    "section": "1.6 Versions in multiple files",
    "text": "1.6 Versions in multiple files\nIf you are a student or researcher you might be familiar with the situation illustrated in Figure 1.2: You are writing a paper and you are really excited because you finally have a full draft. To mark this, you call the file FINAL.docx and send it off to your advisor. Your advisor has a few comments, so you integrate those changes into a new version that you call FINAL_rev2.doc. You show your draft to your advisor again and again they have even more comments. So as there are more and more rounds of feedback your file naming system an get out of hand very easily.\n\n\n\nFigure 1.2: “notFinal.doc” - originally published 10/12/2012. “Piled Higher and Deeper” by Jorge Cham (phdcomics.com). All content copyright 1997-2023 Piled Higher and Deeper Publishing, LLC. (direct link).\n\n\nApart from the issues with file naming, a deeper point of this illustration with respect to research is, that there is rarely a point in scientific work where we are really confident that something is indeed the “final”  version.\nIf you can relate to the poor student Figure 1.2, it is quite likely that you have also already engaged in this form of version control.\nMore generally, this common way of implementing file versioning of files works by appending versions or descriptive labels to the filenames, or by adding initials at the end of the filename:\n\nfile_v1.docx, file_v2.docx, file_v3.docx, etc.\ndraft.docx to draft_comments_LW_final_edited.docx, etc.\n\nEvery time you make a critical change to a file, you duplicate it, rename it according to your versioning scheme and continue working in the duplicated file. While this approach might be manageable for a single file or user, it likely becomes messy when dealing with numerous files, repeated revisions, and multiple users, especially for large, long-term projects, as illustrated in Figure 1.2, Figure 1.3 and Figure 1.4. In such cases, more advanced version control systems may be necessary.\n\n\n\nFigure 1.3: “Documents” by xkcd (xkcd.com). Used under a Creative Commons Attribution-NonCommercial 2.5 (CC BY-NC 2.5) licence (direct link).\n\n\n\n\n\nThis illustration is created by Scriberia with The Turing Way community. Used under a CC BY 4.0 licence. DOI: 10.5281/zenodo.3695300 (Version 3, direct download link).\n\n\n\n\n\nFigure 1.4: “A story told in file names”, originally published 5/28/2010. “Piled Higher and Deeper” by Jorge Cham (phdcomics.com). All content copyright 1997-2023 Piled Higher and Deeper Publishing, LLC. (direct link).\n\n\n\nYour number one collaborator is yourself from six months ago and she doesn’t answer emails.\n\nIf you mostly work on your own or with a very small team, you might think that you will not encounter such situations. However, remember that your number one collaborator is yourself from six months ago and you will often find yourself in situations trying to remember what happened six months ago.\nImagine you were on a very long vacation (who would not like to imagine that!) and you would come back to a project folder as illustrated in Figure 1.4. Would you know which file to continue working with? Would you know how the different files related to each other? How could someone else start working with this project or how would you start working with this if you would get such a project folder from someone else? It is very difficult to understand how to work with this project and you will likely spend a lot of time figuring out what all the different files are, what they mean and why they are titled in such a way.\n\n1.6.1 Versions in a single file\nSome software can keep track of all the changes made to a file without making new copies of the file. This includes word processors like Microsoft Word’s Track Changes, Google Docs’ version history, or LibreOffice’s Recording and Displaying Changes.\n\n\n\n\n\n\nDisadvantages of version control using Word processors compared to Git\n\n\n\n\n\n\nLimited Collaboration: Word processors’ track changes feature is primarily designed for collaboration within the application, making it difficult to collaborate with users who don’t have access to the same word processing software. In contrast, Git allows seamless collaboration across different platforms and tools.\nLimited Review Features: Beyond comments in the text itself, word processors lack the advanced review features offered by Git, such as pull requests and code comments. These features facilitate the review processes, making it easier to provide feedback and discuss changes.\nNon-Atomic Commits: In most word processors, tracking changes may lead to non-atomic commits, where multiple unrelated changes are combined into one. This can make it harder to understand the history and roll back specific changes when needed, compared to the precise commit system in Git.\nLimited Branching and Merging: Git provides powerful branching and merging capabilities, allowing for the creation of multiple branches for different features or experiments. Word processors often lack this level of branching and merging, making it harder to manage complex development workflows.\nNo Version Tagging: Git allows tagging specific versions, marking them as milestones or releases. Word processors generally lack this feature, which can be essential for identifying important points in the development process.\nLack of File-Level Versioning: Word processors typically track changes at the document level, lacking the ability to track changes at the file level. Git, on the other hand, allows version control for individual files, enabling more granular control over the project’s components.\nLimited Automation: Word processors may offer basic automation features, but they can’t match the automation capabilities provided by Git and GitHub, such as pre-commit hooks, continuous integration, and automated testing.\nDifficulty in Managing Large Projects: Word processors’ track changes feature may become less efficient and manageable as the project grows in size and complexity. Git, as a dedicated version control system, is better suited for handling large-scale projects.\nNo Remote Repositories: Word processors do not have built-in support for remote repositories like Git does. Remote repositories in Git enable decentralized collaboration and backup, making it easier to work with distributed teams.\nDependency on Proprietary Software: Using word processors for tracking changes ties the version control process to specific software vendors, limiting the flexibility and interoperability that Git offers as an open-source, widely-used tool.\n\n\n\n\nThis allows you to look at the file’s history and see how it has changed over time. Examples of such software include Google Drive, Dropbox, and Overleaf. You may have noticed that these services automatically save different versions of your files and allow you to go back to previous versions if needed.\n\n\n\n\n\n\nDisadvantages of Version Control using Dropbox and Google Drive compared to Git\n\n\n\n\n\n\nLack of Fine-Grained Versioning: Both Dropbox and Google Drive offer basic versioning features, but they often lack the granularity provided by dedicated version control systems like Git. In version control systems, you can track changes at the file level, while Dropbox and Google Drive may only keep a limited history of entire documents.\nNo Code Collaboration Features: While Dropbox and Google Drive allow file sharing and real-time collaboration, they do not provide specialized features for collaboration, like pull requests, or conflict resolution, which are often essential in the development of research outputs.\nLimited Branching and Merging: Dropbox and Google Drive do not support branching and merging, making it challenging to manage complex development workflows, especially in collaborative projects.\nDependency on Third-Party Servers: When using Dropbox and Google Drive, version control relies on their servers and infrastructure. This dependence may raise concerns about data security, privacy, and the availability of the service.\nFile Size and Storage Limits: Both services have limitations on file sizes and storage space. This can be problematic for larger projects with numerous files or when working with large binary files.\nLimited Automation and Integration: Dropbox and Google Drive lack the extensive automation and integration options provided by Git. In Git, you can set up various automated workflows and integrate with continuous integration tools for smoother development processes.\nRevision Conflicts: Version control in Dropbox and Google Drive may not handle revision conflicts as effectively as Git. Resolving conflicts manually can be time-consuming and may lead to data loss or discrepancies.\nLimited Offline Capabilities: When working offline, accessing version history or performing version control tasks in Dropbox and Google Drive might not be as seamless as with Git, which is designed to work effectively in both online and offline environments.\n\n\n\n\n\n\n\nFigure 1.5: Image from Chapter 3.1 on “Collaboration, Version Control, & GitHub” of the Mozilla Science Lab’s Study Group Orientation handbook, used under a Mozilla Public License Version 2.0 (direct download link)\n\n\nFigure 1.5 illustrates the concept of tracking versions within a single file. It illustrates a simplified linear project timeline (gray line). A version control system keeps track of the changes made to the file at specific time points (gray nodes in Figure 1.5). These nodes represent various actions such as additions (first node), deletions (second node), or edits to the content (third node). The blue arrows at the bottom indicate the ability to navigate along this linear timeline. By recording these changes, it becomes possible to access previous versions of the file. This means that you can go back and examine earlier versions or even revert the entire workflow back to a specific version, if needed. Rather than saving new files for each change, this system saves the changes within the same file, allowing for easier management and tracking of version history.\n\n\n1.6.2 Features of a version control system\n\nWhat: It keeps track of the changes made to a file when you edit it.\nWhen: It records the date and time when each change was made.\nWho It keeps a record of who made each change.\nWhy: It allows you to add a note explaining why you made a particular change.\n\nThe system takes snapshots of your project, giving them unique codes that include all these features. Instead of saving new files for each change, only the specific modifications made to the file are saved. This makes it easy to compare different versions, restore previous versions, and combine changes when needed."
  },
  {
    "objectID": "chapters/intro-version-control.html#git",
    "href": "chapters/intro-version-control.html#git",
    "title": "1  Introduction",
    "section": "1.7 Git",
    "text": "1.7 Git\n\n\n\nFigure 1.6: Git Logo (full color Git logo for light backgrounds) by Jason Long is licensed under the Creative Commons Attribution 3.0 Unported License (link to download page).\n\n\nAmong various version control systems, Git is the most widely used. It was created by the Linux development community in 2005. Git is a software primarily written in C, but you don’t need to know C.\n\n1.7.1 Key features of Git\n\nFree, fast, and open source.\nIt is a distributed system, meaning everyone working on a project has a complete copy of it.\nMost operations in Git can be performed using local files and resources, minimizing the need for external dependencies.\nGit keeps a detailed history of changes, including what was changed, when it was changed, who made the change, and why it was made.\nYou can easily retrieve previous versions of your project, allowing you to see the progression of your work.\nGit forms the foundation for collaboration tools like GitHub and GitLab.\n\nWhen you use Git, it takes snapshots of your project whenever you choose. It then compares the current snapshot with the previous one and prompts you to provide a message explaining why you made the specific changes.\n\n\n\n\n\n\nWhy is Git called Git?\n\n\n\n\n\nThe name “git” was given by the main developer Linus Torvalds when he created the software. Torvalds is well-known for his involvement in the development of the Linux kernel.\n\n“I’m an egotistical bastard, and I name all my projects after myself. First ‘Linux’, now ‘git’.” – Wikipedia: Git\n\nFor more insights and discussions about the name, you can refer to the README.md file on GitHub.\nThe name “git” was given by Linus Torvalds when he wrote the very first version. He described the tool as “the stupid content tracker” and the name as (depending on your mood):\n\nrandom three-letter combination that is pronounceable, and not actually used by any common UNIX command. The fact that it is a mispronunciation of “get” may or may not be relevant.\nstupid. contemptible and despicable. simple. Take your pick from the dictionary of slang.\n“global information tracker”: you’re in a good mood, and it actually works for you. Angels sing, and a light suddenly fills the room.\n“goddamn idiotic truckload of sh*t”: when it breaks"
  },
  {
    "objectID": "chapters/intro-version-control.html#summary",
    "href": "chapters/intro-version-control.html#summary",
    "title": "1  Introduction",
    "section": "1.8 Summary",
    "text": "1.8 Summary\nGit is a free version control system that helps you manage and track the history of your files, allowing you to retrieve previous changes. It is used locally on your computer.\nGitHub is a popular cloud-based hosting service for sharing projects tracked with Git. It offers collaboration features and serves as a reliable backup solution."
  },
  {
    "objectID": "chapters/intro-version-control.html#how-do-i-interact-with-git-on-my-computer",
    "href": "chapters/intro-version-control.html#how-do-i-interact-with-git-on-my-computer",
    "title": "1  Introduction",
    "section": "1.9 How do I interact with git on my computer?",
    "text": "1.9 How do I interact with git on my computer?\nThere are many options to interact with Git.\n\n1.9.1 Command line / terminal\nSee chapter on command line.\n\n\n1.9.2 Extensions to existing software\nYour text editor or analytical software is very likely to have a Git extensions / plugin, often via a Graphical User Interface (GUI).\n\nRStudio Desktop\nVisual Studio Code\n\n\n\n1.9.3 Git Clients (applications with a GUI)\nSeveral software applications enable the use of Git on your local computer without the need for the command line. The following is a non-comprehensive list of such software. Please consult their respective documentation for further details.\n\nGitKraken\nGitHub Desktop"
  },
  {
    "objectID": "chapters/intro-version-control.html#common-misconceptions",
    "href": "chapters/intro-version-control.html#common-misconceptions",
    "title": "1  Introduction",
    "section": "1.10 Common misconceptions",
    "text": "1.10 Common misconceptions\n\n1.10.1 Misconception: Git is the same as GitHub\nOne of the most widespread misconceptions is that Git and GitHub are the same thing. Git and GitHub are two distinct but related tools in the world of version control.\nGit is a version control system (software installed on your computer) that allows you to track changes and manage the history of your files locally on your computer. It provides features such as branching, merging, and reverting to previous versions.\nGitHub is a web-based hosting service for your Git repositories, allowing you to store and share your Git projects online. GitHub provides additional collaboration features such as issue tracking, pull requests, and project management tools.\nIn summary, Git is the version control system itself, while GitHub is a hosting service built on top of Git. Git can be used independently without GitHub, but GitHub relies on Git for its functionality.\n\n\n1.10.2 Misconception: Git is only for code and programmers\nWhile version control systems like Git are often associated with software development (and are indeed highly valuable for managing code-related projects), they are not limited to code and not exclusive to developers. Version control can be beneficial for anyone working with files that undergo changes over time, including writers, designers, and data analysts.\n\n\n1.10.3 Misconception: Git is only for collaboration\nGit offers remarkable benefits for collaboration, but its value extends beyond working with others. It enables you to collaborate effectively with your past and future self, fostering valuable skills and boosting your confidence when collaborating with others. Even if you currently don’t have a specific reason to collaborate with others, trying Git on your own can be highly beneficial and rewarding.\n\n\n1.10.4 Misconception: Git auto-saves your changes\nUnlike automatic saving, where changes are continuously saved in the background, Git requires manual intervention to capture snapshots. You have to explicitly inform Git when you want to take a snapshot, indicating that you want it to acknowledge your changes. While this may sound annoying at first, the benefits of having full control over your version history will become apparent in later chapters of this book.\n\n\n\n\nAI for Multiple Long-term Conditions Research Support Facility. 2023. “Introduction to Version Control with Git.” June 2023. https://www.youtube.com/watch?v=z9-qAGq78qE. License: CC BY 4.0. Source: https://github.com/aim-rsf/training/tree/main/version-control.\n\n\nBryan, Jennifer. 2018. “Excuse Me, Do You Have a Moment to Talk About Version Control?” The American Statistician 72 (1): 20–27. https://doi.org/10.1080/00031305.2017.1399928. Website: https://doi.org/10.1080/00031305.2017.1399928.\n\n\nKoziar, Katherine E., Madicken Munk, Andrew Greene, Annajiat Alim Rasel, Ed Bennett, Sarah LR Stevens, Ece Turnator, et al. 2023. Swcarpentry/Git-Novice: Software Carpentry: Version Control with Git 2023-05. Zenodo. https://doi.org/10.5281/ZENODO.7908089. License: CC BY 4.0. Source: https://github.com/swcarpentry/git-novice. Website: https://swcarpentry.github.io/git-novice/.\n\n\nPerez-Riverol, Yasset, Laurent Gatto, Rui Wang, Timo Sachsenberg, Julian Uszkoreit, Felipe da Veiga Leprevost, Christian Fufezan, et al. 2016. “Ten Simple Rules for Taking Advantage of Git and GitHub.” Edited by Scott Markel. PLOS Computational Biology 12 (7): e1004947. https://doi.org/10.1371/journal.pcbi.1004947. License: CC BY 4.0. Source: https://github.com/ypriverol/github-paper. Website: https://doi.org/10.1371/journal.pcbi.1004947.\n\n\nRam, Karthik. 2013. “Git Can Facilitate Greater Reproducibility and Increased Transparency in Science.” Source Code for Biology and Medicine 8 (1). https://doi.org/10.1186/1751-0473-8-7. License: CC BY 2.0. Source: https://github.com/karthik/smb_git. Website: https://doi.org/10.1186/1751-0473-8-7.\n\n\nThe Turing Way Community. 2022. The Turing Way: A Handbook for Reproducible, Ethical and Collaborative Research. Zenodo. https://doi.org/10.5281/zenodo.3233853. License: The process documents and data are made available under a CC BY 4.0 license. Software are made available under an MIT license. Website: https://the-turing-way.netlify.app/."
  },
  {
    "objectID": "chapters/command-line.html#introduction",
    "href": "chapters/command-line.html#introduction",
    "title": "2  Command Line",
    "section": "2.1 Introduction",
    "text": "2.1 Introduction\n\n2.1.1 Prerequisites\nIf you have stored files on a computer and you are familiar with terms such as “file,” “directory,” or “folder,” you are adequately prepared for this lesson. The goal of this chapter is to teach you enough to be able to use Git from the command line.\nTo get the most out of this chapter, don’t just passively read – take action! Open your terminal and type the commands as you go along. Feel the power of the command line and witness the results firsthand. By actively typing commands into your terminal, you’ll gain practical experience and a deeper understanding of the material.\n\n\n2.1.2 Questions\nAt the end of this chapter, you should be able to answer the following questions:\n\nWhat is the shell, command line, or terminal?\nWhy would I use the command line?\nWhy do I need to know the command line to use Git?\nHow do I use the command line?\nWhich are basic commands in the command line?\n\n\n\n2.1.3 Learning objectives\n\nExplain when and why command-line interfaces should be used instead of graphical interfaces.\nUnderstand how to form file paths and navigate directories\nUnderstand the difference between absolute and relative paths\nUnderstand how arguments and flags are used to modify command-line commands\nUnderstand the concept of wild cards (*)\n\n\n\n2.1.4 Why using Git from the command line?\nGit is fundamentally a command-line tool. This is why comfort with the command line is essential for learning Git.\n\n\n2.1.5 General advantages of the command line\n\nLongevity: The command line has stood the test of time, remaining relevant and widely used even as new technologies emerge.\nPower: The command line is a robust and powerful tool, enabling users to accomplish intricate tasks efficiently.\nSimplicity: With just a few keystrokes or lines of code, the command line empowers users to execute complex tasks effortlessly.\nTask Automation: The shell allows users to automate repetitive tasks, saving time and effort in performing them manually.\nWorkflow Integration: Users can seamlessly combine smaller tasks into larger, more potent workflows, enhancing productivity and efficiency.\nComprehensive Feature Set: The command line interface provides access to the complete range of Git features, offering more extensive functionality compared to graphical user interfaces (GUIs).\nExtensive Online Support: When seeking help or troubleshooting Git-related issues online, you will often find valuable assistance in the form of command line instructions. Platforms like Stack Overflow frequently provide guidance and solutions based on command line usage."
  },
  {
    "objectID": "chapters/command-line.html#terminology",
    "href": "chapters/command-line.html#terminology",
    "title": "2  Command Line",
    "section": "2.2 Terminology",
    "text": "2.2 Terminology\nA file is an unit of digital data storage that can contain a variety of information, such as text, images or even programs. It is identified by an unique name and an extension, which indicates the file’s format or type. Files are organized within a file system, allowing users to create, access, modify, and delete them.\nA folder is a container used in file systems to store and organize files and other folders. Folders provide a hierarchical structure that allows users to group and manage files, making it easier to locate and navigate through data.\nA directory is the more technical term, while folder is a user-friendly term for the same concept. In practice, the two terms are often used interchangeably, and many operating systems have adopted the term “folder”.\nThe “command-line interface (CLI)” is a text-based way to interact with computer programs. Most people primarily use a Graphical User Interface (GUI) to work with their programs, but historically, text-based interfaces were more common. Often, the GUI can only access a limited set of features available through the CLI and some programs don’t even have a GUI and can only be used through the command line. For many years, the command line was the primary way to interact with computers. Before GUIs like the ones we use today, early computer users communicated with their machines by typing text-based commands. This text-based interaction allowed them to perform various tasks, from running programs to managing files and directories.\n“Terminal” is short for “terminal emulator”, which is a program that mimics a physical device called a terminal. Terminals were used to connect to mainframe computers in the early days of computing. The terminal program creates the window with the dark background, light text, and cursor.\nA “shell” is a program that provides the command line to your operating system. It allows you to perform various tasks that your operating system offers, such as managing files, running and stopping programs, and changing system settings, all through text commands. When you “open a terminal”, the program initially communicating with the terminal is a shell. There are multiple shell options available for different operating systems, with the most popular one being the “Bourne Again Shell” or “Bash”.\nThe terms “shell”, “command line”, “command-line interface (CLI)”, and “terminal” are used interchangeably and generally refer to the same thing: a simple window with a dark background and light text, showing a prompt and a blinking cursor. In movies, when people hack into computers, they often type rapidly in this window."
  },
  {
    "objectID": "chapters/command-line.html#finding-the-command-line",
    "href": "chapters/command-line.html#finding-the-command-line",
    "title": "2  Command Line",
    "section": "2.3 Finding the command line",
    "text": "2.3 Finding the command line\nThis section can you help you finding the command line on your system. Click on the tab for your operating system for detailed information.\n\n MacOS Windows Linux JupyterHub\n\n\nYou can access your default shell through the Terminal program located within the Utilities folder: There are (at least) three different ways to get there:\n\nIn the Finder, go to Applications &gt; Utilities &gt; Terminal.app\nIn the Finder, select the Go menu &gt; Utilities &gt; Terminal.app\nActivate the Mac Spotlight search function, type Terminal in the search bar, and press the Return key.\n\nYou may want to keep Terminal in your Dock to find it more easily.\nOn a Mac computer running macOS Mojave or earlier versions, the default Unix Shell is Bash. However, for a Mac computer operating on macOS Catalina or later releases, the default Unix Shell is Zsh. Bash and Zsh are both programs, which are command-line interfaces for interacting with an operating system. Zsh is often considered better than Bash for its more advanced features and improved scripting capabilities. It also has extensive community-contributed plugins and themes. However, the change to Zsh was not a drastic shift for most users, since there a few practical differences.\nTo verify if your machine is configured to use a shell other than Bash, you can type echo $SHELL in your Terminal window. If the output is /bin/bash or a similar path, it means your default shell is set to Bash. This is the most common shell on Unix-based systems, including macOS. If the output is /bin/zsh or a similar path, it means your default shell is set to Zsh. If the output is a different path, it indicates that your shell is configured to use a different shell program. If your machine is configured to use a shell other than Bash, you can switch to Bash by opening a terminal and typing bash.\n\n\n\n\n\n\nWhich macOS version do I have installed?\n\n\n\n\n\n\nIn the upper-left corner of your screen, click on the  logo.\nSelect “About This Mac”: A dropdown menu will appear. Choose “About This Mac”.\nView macOS Version: In the “About This Mac” window, you will see information about your Mac, including the macOS version. The version number will be listed under the “Overview” tab. For example, it might say “macOS Big Sur” or “macOS Monterey”, along with the version number (e.g., “Version 11.4”).\n\n\n\n\n\n\nBy default, Windows operating systems do not come with a pre-installed Unix Shell program. In this guide, we recommend using an emulator provided by Git for Windows, which grants you access to both Bash shell commands and Git.\nFor an installation guide, you can check out the chapter on installation and setup. Once you have installed Git for Windows, you can easily open a terminal by launching the program called Git Bash from the Windows start menu.\n\n\nOpen a fresh Terminal.\n\n\nIf it is not possible for you to access a command line interface using your personal computer, you can use a remote solution with JupyterHub. JupyterHub is a web-based platform that allows multiple users to access an interactive computing environment on a shared server.\nYou can access a remote environment, using your Universität Hamburg login credentials here. Simply click on the link and log in.\nOnce you are logged in, you should be able to view the remote environment and create files using different programs like , Python  or Java .\n\n\n\nFigure 2.1: Screenshot of JupyterHub, showing the start screen.\n\n\nIf you scroll down in the “launcher” window, there should be the option to open a terminal window. Your remote environment will be mostly empty, but you can move around and manage files just like you could on your own computer.\n\n\n\nFigure 2.2: Screenshot of JupyterHub, showing the terminal."
  },
  {
    "objectID": "chapters/command-line.html#opening-the-command-line",
    "href": "chapters/command-line.html#opening-the-command-line",
    "title": "2  Command Line",
    "section": "2.4 Opening the command line",
    "text": "2.4 Opening the command line\nWhen you open the shell, you’ll see a prompt that tells you the shell is ready for input. Your terminal interface will usually show a message similar to the following prompt:\n\n$\n\nIn the shell, the prompt is usually represented by the symbol $ but it can be different sometimes. In our examples, we’ll use $ as the prompt. The important thing to remember is to not type the prompt, $, itself when entering commands. Only type the command that comes after the $ prompt. For this reason, we remove the $ prompt from all code examples in this guide. Also, remember to press the Enter key after typing a command to execute it.\nAfter the prompt, you’ll see a text cursor that shows where you can type. The cursor can be a flashing or solid block, or it can be an underscore or a pipe symbol. You may have seen a similar cursor in a text editing program.\nKeep in mind that your prompt may look slightly different. Usually, in popular shell environments, your username and the host name appear before the $ symbol. For example, your prompt might look like this:\n\nwittkuhn@lip-osx-005509:~$"
  },
  {
    "objectID": "chapters/command-line.html#navigating-the-file-system",
    "href": "chapters/command-line.html#navigating-the-file-system",
    "title": "2  Command Line",
    "section": "2.5 Navigating the file system",
    "text": "2.5 Navigating the file system\n\n2.5.1 Introduction\nYou might be familiar with using your mouse to click through folders, or perhaps you use arrow keys and clicks in the Finder (on macOS) or File Explorer (on Windows) to manage your files.\nThe command line offers a different, perhaps less intuitive, but very efficient and precise way to interact with your computer’s file system. Instead of relying on graphical elements, you use text-based commands to perform tasks like exploring directories, creating and deleting files, and moving between folders.\n\n\n2.5.2 Current working directory\nEnter the command pwd (short for “print working directory”). The working directory is the location within your file system where a user or an application is presently performing file operations or running commands. pwd will display the current directory that the shell is currently focused on in your file system.\n\npwd\n\n\n\n Click here to see the output of this command executed in the project directory of this guide.\n\n\n\n/home/runner/work/version-control-book/version-control-book\n\n\n\n\n\n2.5.3 Command not found\nIf the shell cannot find the program you typed as a command, it will show an error message. This can happen if you made a mistake when typing the command or if the program for that command is not installed on your system. For example, if you made a mistake when typing the pwd command, and accidentally entered pws, the following error message might appear:\n\npws: command not found\n\n\n\n2.5.4 Moving between folders\nThe cd command is used to change the current working directory (or “move” to a different directory in your file system). To use it, type cd followed by an argument, which is the path of the folder you want to navigate to. The path can be either absolute or relative.\nFor example, if you are on macOS and your current working directory is your home directory (for example, /Users/wittkuhn), you can switch to the /Downloads folder by using either an absolute or relative path with the cd command:\n\n\n\nAbsolute path\n\nwittkuhn@lip-osx-005509:~$ cd /Users/wittkuhn/Downloads\nwittkuhn@lip-osx-005509:~/Downloads$ pwd\n/Users/wittkuhn/Downloads\n\n\n\n\n\nRelative path\n\nwittkuhn@lip-osx-005509:~$ cd Downloads\nwittkuhn@lip-osx-005509:~/Downloads$ pwd\n/Users/wittkuhn/Downloads\n\n\nYou may notice that the prompt has been updated to show the new working directory. If a path starts with a forward slash (/), it is considered an absolute path. Paths that do not start with a forward slash are considered relative to the current working directory.\n\n\n2.5.5 Taking shortcuts\n\n2.5.5.1 Tilde: ~\nThe tilde symbol (~) provides a convenient and abbreviated way to refer to the user’s home directory, enabling us to easily construct paths relative to that directory. To quickly change the current working directory to your user’s home directory anywhere on your file system, we can use cd ~ which will transport us back to the user’s home directory.\n\nwittkuhn@lip-osx-005509:~/Downloads$ cd ~\nwittkuhn@lip-osx-005509:~$ \n\n\n\n2.5.5.2 Dot: .\nAnother symbol with a special meaning in paths, aside from ~, is the dot (.). It serves as a shorthand representation for the current working directory, and using it in a path means the reference remains within the same directory.\n\nwittkuhn@lip-osx-005509:~$ cd .\nwittkuhn@lip-osx-005509:~$\n\nIn turn, these two commands are equivalent:\n\nwittkuhn@lip-osx-005509:~$ cd ./Downloads\n\n\nwittkuhn@lip-osx-005509:~$ cd Downloads\n\n\n\n2.5.5.3 Dot Dot: ..\nThe .. symbol is a shorthand representation for the parent directory of the current working directory. It can be used repeatedly, allowing cd .. to move up one folder and `cd ../.. to move up two folders. This is useful for creating relative paths to other branches within a directory tree.\nFor instance, by executing the following sequence of commands, we will navigate horizontally (or sideways) to a folder located at the same hierarchical level as the current working directory:\n\n1wittkuhn@lip-osx-005509:~$ cd ~\n2wittkuhn@lip-osx-005509:~$ cd Downloads\n3wittkuhn@lip-osx-005509:~/Downloads$ cd ../Documents\n4wittkuhn@lip-osx-005509:~/Documents$ pwd\n/Users/wittkuhn/Documents\n\n\n1\n\nMove to the user’s home directory using the ~ shorthand.\n\n2\n\nMove to the Downloads folder.\n\n3\n\nMove sideways to the Documents folder.\n\n4\n\nDisplay the current working directory.\n\n\n\n\n\n\n\n\n\n\nUsing Command History Navigation\n\n\n\n\n\nYou can access your command history by using the up and down arrow keys on your keyboard to cycle through your last used commands. To execute a command, hit Enter, or you can edit it as needed before execution. This makes it easier to find and reuse specific commands. And is also the reason why the up arrow key is among the earliest that needs replacement on software developers’ keyboards.\n\n\n\n\n\n\n\n\n\nWhat are “parent” and “child” directories?\n\n\n\n\n\nIn the context of file systems, a “parent directory” and a “child directory” describe the relationship between directories (or folders).\n\nParent Directory: This is the directory that is “higher up” in the directory hierarchy and contains one or more “child directories.”\nChild Directory: A child directory is located “inside” or “below” a parent directory. It is contained within the parent directory and is considered subordinate to it, much like a child in a family is part of the larger family unit.\n\n\nparent $ tree\n.\n├── child1\n└── child2\n\n3 directories"
  },
  {
    "objectID": "chapters/command-line.html#list-files-and-folders",
    "href": "chapters/command-line.html#list-files-and-folders",
    "title": "2  Command Line",
    "section": "2.6 List files and folders",
    "text": "2.6 List files and folders\nThe ls command is used to list the files and folders in a specified directory or the current working directory. If you run this command, you will see the contents of your current working directory.\n\nls\n\n\n\n Click here to see the output of this command executed in the project directory of this guide.\n\n\n\nLICENSE\nMakefile\nREADME.md\n_affiliations.yml\n_authors.yml\n_book\n_extensions\n_metadata.yml\n_quarto.yml\n_variables.yml\nchapters\ncheatsheet.json\nchicago-author-date-note.csl\ncontents-listing.json\ncontents.html\ncontents.qmd\nfunctions.R\nindex.html\nindex.qmd\nmisc\nplausible.html\nreferences.bib\nrenv\nrenv.lock\nsite_libs\nstatic\nversion-control-book.Rproj\n\n\n\nHowever, the ls command provides various options, such as flags and arguments, to enhance its functionality beyond simple file listing. To provide additional instructions to a command, we can pass flags and arguments by typing them after the command name.\n\n2.6.1 List files in a specific directory\nFor example, we can list the contents of the /chapters folder in the project directory of this guide:\n\nls chapters\n\n\n\n Click here to see the output of this command executed in the project directory of this guide.\n\n\n\nbranches.qmd\ncommand-line.qmd\ncommand-line.rmarkdown\nfirst-steps-git.qmd\ngithub-intro.qmd\ngui.qmd\ninstallation.qmd\nintermediate-commands.qmd\nintro-version-control.html\nintro-version-control.qmd\nissues.qmd\nproject-management.qmd\nrewriting-history.qmd\nsetup.qmd\nsummary.qmd\n\n\n\nIn this case, chapters is an argument to the ls command.\n\n\n2.6.2 Listing hidden files\nHidden files, often starting with a dot in their names, are files that remain mostly concealed from the regular view in GUIs. They can serve different purposes, such as storing configuration settings, sensitive data, or temporary files. Hidden files can be accessed through the command line or by changing settings in the file manager to make them visible. It’s important to be cautious when modifying or deleting hidden files, as they can impact the proper functioning of the operating system and applications. This is also typically the reason for these files being hidden. To view hidden files, we can use the -a (for “all”) flag in the ls command. For example, we can list hidden files in the project directory:\n\nls -a\n\n\n\n Click here to see the output of this command executed in the /chapters directory of this guide.\n\n\n\n.\n..\n.Renviron\n.Rprofile\n.all-contributorsrc\n.codespellrc\n.git\n.github\n.gitignore\n.quarto\nLICENSE\nMakefile\nREADME.md\n_affiliations.yml\n_authors.yml\n_book\n_extensions\n_metadata.yml\n_quarto.yml\n_variables.yml\nchapters\ncheatsheet.json\nchicago-author-date-note.csl\ncontents-listing.json\ncontents.html\ncontents.qmd\nfunctions.R\nindex.html\nindex.qmd\nmisc\nplausible.html\nreferences.bib\nrenv\nrenv.lock\nsite_libs\nstatic\nversion-control-book.Rproj\n\n\n\n\n\n2.6.3 Interlude: What is the difference between a flag and an argument?\n\n2.6.3.1 Overview\nThe difference between a flag and an argument is that a flag is used to modify the behavior of a command, while an argument provides additional input or information to the command.\n\n\n2.6.3.2 What is a flag?\nA flag is typically a single character or a combination of characters preceded by a hyphen (-) or double hyphen (--). It is used to enable or disable specific options or features of a command. Flags are optional and are used to customize the behavior of the command.\n\n\n2.6.3.3 What is an argument?\nAn argument is the actual input or information that is passed to a command to perform a specific action. It can be a value, a file name, a directory path, or any other data required by the command to complete its task. Arguments are often positioned after the command and any flags, and they can be mandatory or optional depending on the command’s requirements.\n\n\n2.6.3.4 Multiple single-letter flags\nYou can combine multiple single-letter flags by using a single dash. For example, to instruct the ls command to list all files (including hidden files) in a long format that is easy to read for humans, you can use the following combination of flags:\n\nls -alh\n\n\n\n Click here to see the output of this command executed in the project directory of this guide.\n\n\n\ntotal 276K\ndrwxr-xr-x 12 runner docker 4.0K Jan 12 09:14 .\ndrwxr-xr-x  3 runner docker 4.0K Jan 12 09:04 ..\n-rw-r--r--  1 runner docker   36 Jan 12 09:05 .Renviron\n-rw-r--r--  1 runner docker   48 Jan 12 09:05 .Rprofile\n-rw-r--r--  1 runner docker 1.6K Jan 12 09:05 .all-contributorsrc\n-rw-r--r--  1 runner docker   76 Jan 12 09:05 .codespellrc\ndrwxr-xr-x  8 runner docker 4.0K Jan 12 09:14 .git\ndrwxr-xr-x  3 runner docker 4.0K Jan 12 09:05 .github\n-rw-r--r--  1 runner docker   75 Jan 12 09:05 .gitignore\ndrwxr-xr-x  7 runner docker 4.0K Jan 12 09:14 .quarto\n-rw-r--r--  1 runner docker  20K Jan 12 09:05 LICENSE\n-rw-r--r--  1 runner docker  582 Jan 12 09:05 Makefile\n-rw-r--r--  1 runner docker 4.1K Jan 12 09:05 README.md\n-rw-r--r--  1 runner docker 3.1K Jan 12 09:05 _affiliations.yml\n-rw-r--r--  1 runner docker 1.1K Jan 12 09:05 _authors.yml\ndrwxr-xr-x  2 runner docker 4.0K Jan 12 09:14 _book\ndrwxr-xr-x  3 runner docker 4.0K Jan 12 09:05 _extensions\n-rw-r--r--  1 runner docker   97 Jan 12 09:05 _metadata.yml\n-rw-r--r--  1 runner docker 3.4K Jan 12 09:05 _quarto.yml\n-rw-r--r--  1 runner docker  668 Jan 12 09:05 _variables.yml\ndrwxr-xr-x  2 runner docker 4.0K Jan 12 09:14 chapters\n-rw-r--r--  1 runner docker 4.0K Jan 12 09:05 cheatsheet.json\n-rw-r--r--  1 runner docker  23K Jan 12 09:05 chicago-author-date-note.csl\n-rw-r--r--  1 runner docker  476 Jan 12 09:14 contents-listing.json\n-rw-r--r--  1 runner docker  44K Jan 12 09:14 contents.html\n-rw-r--r--  1 runner docker  650 Jan 12 09:05 contents.qmd\n-rw-r--r--  1 runner docker 1.8K Jan 12 09:05 functions.R\n-rw-r--r--  1 runner docker  29K Jan 12 09:14 index.html\n-rw-r--r--  1 runner docker   59 Jan 12 09:05 index.qmd\ndrwxr-xr-x  2 runner docker 4.0K Jan 12 09:05 misc\n-rw-r--r--  1 runner docker  118 Jan 12 09:05 plausible.html\n-rw-r--r--  1 runner docker  11K Jan 12 09:05 references.bib\ndrwxr-xr-x  4 runner docker 4.0K Jan 12 09:07 renv\n-rw-r--r--  1 runner docker  16K Jan 12 09:05 renv.lock\ndrwxr-xr-x  9 runner docker 4.0K Jan 12 09:14 site_libs\ndrwxr-xr-x  2 runner docker 4.0K Jan 12 09:14 static\n-rw-r--r--  1 runner docker  211 Jan 12 09:05 version-control-book.Rproj\n\n\n\n\n\n2.6.3.5 The --help flag\nIf you want to know what flags and arguments a command supports, most commands provide usage information when you use the flag --help. In some cases, the flag -h can also be used to achieve the same result."
  },
  {
    "objectID": "chapters/command-line.html#manipulating-the-file-system",
    "href": "chapters/command-line.html#manipulating-the-file-system",
    "title": "2  Command Line",
    "section": "2.7 Manipulating the file system",
    "text": "2.7 Manipulating the file system\nThe command line offers commands for creating, moving, and deleting folders and files.\n\n2.7.1 Creating a folder\nLet’s use the command line to create a new project folder as an example: To make a directory, we’ll use the mkdir command.\nNote: When creating new directories, consider their location carefully. Consider deleting the newly created directories afterwards to avoid clutter.\nThe path of the directory we want to create is given as an argument to the command. If we want to create a directory in the current folder, we just need to use its name, as the path is assumed to be relative.\n\nmkdir my-project\n\nMake sure the project folder is present by using the ls command, and then move into it by using the cd command.\n\nls\ncd my-project\n\n\n\n2.7.2 Creating multiple folders\nNext, we will proceed to create multiple additional folders within the my-project project folder. The mkdir command allows us to create multiple directories simultaneously by providing multiple arguments, each representing a separate folder. For example, for a data analysis project we might create the following three folders:\n\nmkdir data results scripts\n\n\n\n2.7.3 Creating files\nLet’s create some files in the my-project project folder. To do this, you can use your favorite text editor or the command line. In the command line, you can use the touch command to create a new empty file. The file doesn’t need to contain anything. For example, to create an empty file called file.txt, we can use the following command:\n\ntouch file.txt\n\n\n\n2.7.4 Moving folders and files\nLet’s say we want to move the file.txt file to the /scripts folder. We can use the mv command to move files and folders. The mv command requires two arguments: the first is the files or folders to be moved, and the second is the path where they should be moved. To move the file.txt file, the command would look like this:\n\nmv file.txt scripts\n\n\n\n2.7.5 Renaming files and folders\nSuppose we don’t like the folder name scripts because file.txt is actually a documentation file, not a script. We can use the mv command to rename files and folders by moving them to a different location in the file system, for example docs, like this:\n\nmv scripts docs\n\n\n\n2.7.6 Wildcards\nNow, let’s learn how to use wildcards to perform actions on multiple files or folders at the same time. A wildcard is denoted by the symbol *, and it helps us select file system arguments that match certain patterns. For example, suppose we wish to display a list of all files of a certain file type (here, all files with the .yml file extension) in the current directory:\n\nls -alh *.yml\n\n\n\n Click here to see the output of this command executed in the project directory of this guide.\n\n\n\n-rw-r--r-- 1 runner docker 3.1K Jan 12 09:05 _affiliations.yml\n-rw-r--r-- 1 runner docker 1.1K Jan 12 09:05 _authors.yml\n-rw-r--r-- 1 runner docker   97 Jan 12 09:05 _metadata.yml\n-rw-r--r-- 1 runner docker 3.4K Jan 12 09:05 _quarto.yml\n-rw-r--r-- 1 runner docker  668 Jan 12 09:05 _variables.yml\n\n\n\nBy using the wildcard *, we can generate a list of all files ending with .yml. Similarly, we can apply the wildcard at the end of a path to match items starting with a specific letter, such as folders beginning with i:\n\nls -alh i*\n\n\n\n Click here to see the output of this command executed in the project directory of this guide.\n\n\n\n-rw-r--r-- 1 runner docker 29K Jan 12 09:14 index.html\n-rw-r--r-- 1 runner docker  59 Jan 12 09:05 index.qmd\n\n\n\n\n\n2.7.7 Removing files and folders\nTo delete files and folders, you can use the rm command. Provide the path of the files or folders that you want to delete as the argument. However, if you want to remove a folder, you need to include the -r (or --recursive) flag.\nFor example, to remove the docs folder, you would use the following command:\n\nrm -r docs\n\nWarning: When you use the rm command to delete files, they are removed entirely(!) from your system and cannot be retrieved from a “Recycle Bin” or “Trash” as when you delete files using GUIs."
  },
  {
    "objectID": "chapters/command-line.html#summary",
    "href": "chapters/command-line.html#summary",
    "title": "2  Command Line",
    "section": "2.8 Summary",
    "text": "2.8 Summary\nIn this lesson, we have achieved the following:\n\nSimplified and clarified some of the technical terms associated with the command line.\nExplored the components of command-line commands: paths, arguments, and flags.\nGained knowledge about relative and absolute paths, including convenient shortcuts like ~, . and ...\nWitnessed the functionality of wildcards.\nAcquired familiarity with several essential shell commands.\n\nIt’s important to note that what we covered here only scratches the surface of what can be accomplished using the shell. The primary aim was to provide useful concepts that help when learning Git. If you’re interested in delving deeper, you may find a more comprehensive introduction at one of the following resource.\n\n\n\nFigure 2.3: “Hackerman” meme found on Reddit.com"
  },
  {
    "objectID": "chapters/command-line.html#acknowledgements-further-reading",
    "href": "chapters/command-line.html#acknowledgements-further-reading",
    "title": "2  Command Line",
    "section": "2.9 Acknowledgements & further reading",
    "text": "2.9 Acknowledgements & further reading\nWe would like to express our gratitude to the following resources, which have been essential in shaping this chapter. We recommend these references for further reading:\n\n\n\n\nAuthors\nTitle\nWebsite\nLicense\nSource\n\n\n\n\nMillman et al. (2018)\nTeaching Computational Reproducibility for Neuroimaging\n\nCC BY 4.0. Website: \n\n\n\nMilligan and Baker (2014)\nIntroduction to the Bash Command Line\nNA\nNA\nNA\n\n\nMcBain (2019)\nGit for Scientists\n\nCC BY-SA 4.0\n\n\n\nCapes et al. (2023)\nswcarpentry/shell-novice: Software Carpentry: the UNIX shell\n\nCC BY 4.0"
  },
  {
    "objectID": "chapters/command-line.html#cheatsheet",
    "href": "chapters/command-line.html#cheatsheet",
    "title": "2  Command Line",
    "section": "2.10 Cheatsheet",
    "text": "2.10 Cheatsheet\n\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\npwd\nDisplay the current directory path\n\n\ncd &lt;PATH&gt;\nChange the current working directory to &lt;PATH&gt;\n\n\ncd ~\nChange the current working directory to the user’s home directory\n\n\ncd ..\nMove up one folder\n\n\ncd ../..\nMove up two folders\n\n\nls\nList files and folders in the current working directory\n\n\nls &lt;PATH&gt;\nList files and folders in &lt;PATH&gt;\n\n\nls -a\nList all files (including hidden files) in the current working directory\n\n\nls -alh\nList all files in a long format that is easy to read for humans\n\n\nmkdir &lt;FOLDER&gt;\nCreate a new folder, called &lt;FOLDER&gt;\n\n\nmkdir &lt;FOLDER1&gt; &lt;FOLDER2&gt;\nCreate two separate folders, called  and \n\n\ntouch &lt;FILE&gt;\nCreate a new empty file, called &lt;FILE&gt;\n\n\nmv FILE.txt &lt;FOLDER&gt;\nMove FILE.txt into &lt;FOLDER&gt;\n\n\nmv &lt;FOLDER_OLD&gt; &lt;FOLDER_NEW&gt;\nRename &lt;FOLDER_OLD&gt; to &lt;FOLDER_NEW&gt;\n\n\nls -alh *.csv\nUse a wildcard to list all .csv files\n\n\nrm -r &lt;FOLDER&gt;\nRemove the folder &lt;FOLDER&gt;\n\n\n\n\n\n\n\n\n\nCapes, Gerard, Bkmgit, Jacob Deppen, G. A. Devenyi, Alexander James Ball, Piper Fowler-Wright, Alessia Visconti, et al. 2023. Swcarpentry/Shell-Novice: Software Carpentry: The UNIX Shell. Zenodo. https://doi.org/10.5281/ZENODO.595899. License: CC BY 4.0. Source: https://github.com/swcarpentry/shell-novice. Website: https://swcarpentry.github.io/shell-novice/.\n\n\nMcBain, Miles. 2019. “Git for Scientists.” https://milesmcbain.github.io/git_4_sci/. License: CC BY-SA 4.0. Source: https://github.com/MilesMcBain/git_4_sci/. Website: https://milesmcbain.github.io/git_4_sci/.\n\n\nMilligan, Ian, and James Baker. 2014. “Introduction to the Bash Command Line.” Edited by Adam Crymble. Programming Historian, no. 3 (September). https://doi.org/10.46430/phen0037.\n\n\nMillman, K. Jarrod, Matthew Brett, Ross Barnowski, and Jean-Baptiste Poline. 2018. “Teaching Computational Reproducibility for Neuroimaging.” Frontiers in Neuroscience 12 (October). https://doi.org/10.3389/fnins.2018.00727. License: CC BY 4.0. Website: http://dx.doi.org/10.3389/fnins.2018.00727."
  },
  {
    "objectID": "chapters/installation.html#learning-objectives",
    "href": "chapters/installation.html#learning-objectives",
    "title": "3  Installation",
    "section": "3.1 Learning Objectives",
    "text": "3.1 Learning Objectives\n\nDownloading and installing Git"
  },
  {
    "objectID": "chapters/installation.html#prerequisites",
    "href": "chapters/installation.html#prerequisites",
    "title": "3  Installation",
    "section": "3.2 Prerequisites",
    "text": "3.2 Prerequisites\n\nBasic familiarity with the command line. We recommend to read the “Command Line” chapter."
  },
  {
    "objectID": "chapters/installation.html#fa-brands-git-alt-downloading-git",
    "href": "chapters/installation.html#fa-brands-git-alt-downloading-git",
    "title": "3  Installation",
    "section": "3.3  Downloading Git",
    "text": "3.3  Downloading Git\n\n3.3.1  macOS\n\n3.3.1.1 Option 1: Terminal\n\n\n\n\n\n\nWhere is the Terminal?\n\n\n\n\n\nThe Terminal can be found at /Applications/Utilities/Terminal.app or by searching the Spotlight for “Terminal”.\nIf you are unsure where to find the terminal, we recommend to read the “Command Line” chapter beforehand.\n\n\n\nMacOS usually comes with a pre-installed version of Git that is accessible through the Xcode Command Line Tools. Open the Terminal and type:\n\ngit --version\n\nIf Git is installed, you should receive an output similar to:\n\ngit version 2.39.2 (Apple Git-143)\n\nIf Git is not installed you will get a prompt asking you if you wish to install it along with Xcode command line tools. You also may be asked for your administrator password.\n\n\n\n\n\n\nError message: xcrun: error\n\n\n\n\n\nProblem\nDid you receive the following error message when entering a git command into the Terminal?\n\nxcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun\n\nSolution\n\nxcode-select --install\n\nThis will open a dialogue box. Select “Install”, and it will download and install the Command Line Tools package and fix the problem.\n\n\n\n\n\n3.3.1.2 Option 2: Binary installer\nDownload and run the installer from: https://git-scm.com/download/mac. Hit Continue through the prompts without modifying the installation destination or other settings. You may be asked for your administrator password.\n\n\n\n3.3.2  Windows\nTo use Git on a Windows computer, we recommend the installation of “Git for Windows”, which includes both the Bash shell and Git. You can download this program at gitforwindows.org.\n\n\n\nFigure 3.1: Screenshot of gitforwindows.org\n\n\nOn the homepage, you should see a prominent download link.\nClick on it to start downloading the installer. Once the installer is downloaded, double-click it to run the installation. During the installation process, you’ll be presented with various options and settings. We recommend to leave all settings to their standard configuration, unless you have a specific need to e.g. change the installation destination.\n          \nOnce you have finished selecting your preference, click the install button to begin the installation process.\nThe installer will copy the necessary files and set up Git and Git Bash on your system. Once the installation is complete, you’ll see a “Finish” button and the option to directly launch a Bash window.\n \nNow a Bash window opens up and you should be able to use the command line and Git!\n\n\n\nFigure 3.2: Screenshot of “Git Bash”\n\n\n\n\n3.3.3  Linux\nCheck if you have git installed by opening your terminal and running:\n\ngit --version\n\nIf git is not installed, install it using your package manager, e.g., by running the following command in the terminal:\n\nsudo apt-get install git"
  },
  {
    "objectID": "chapters/installation.html#acknowledgements-and-further-reading",
    "href": "chapters/installation.html#acknowledgements-and-further-reading",
    "title": "3  Installation",
    "section": "3.4 Acknowledgements and further reading",
    "text": "3.4 Acknowledgements and further reading\nWe would like to express our gratitude to the following resources, which have been essential in shaping this chapter. We recommend these references for further reading:\n\n\n\n\nAuthors\nTitle\nWebsite\nLicense\nSource\n\n\n\n\nChacon and Straub (2014)\nPro Git\n\nCC BY-NC\n\n\n\nCapes et al. (2023)\nswcarpentry/shell-novice: Software Carpentry: the UNIX shell\n\nCC BY 4.0\n\n\n\nKoziar et al. (2023)\nswcarpentry/git-novice: Software Carpentry: Version Control with Git 2023-05\n\nCC BY 4.0\n\n\n\nBryan (2023)\nHappy Git and GitHub for the useR\n\nCC BY-NC 4.0\n\n\n\n\n\n\n\n\n\nBryan, Jenny. 2023. Happy Git and GitHub for the useR. Jenny Bryan. https://happygitwithr.com. License: CC BY-NC 4.0. Source: https://github.com/jennybc/happy-git-with-r. Website: https://happygitwithr.com/.\n\n\nCapes, Gerard, Bkmgit, Jacob Deppen, G. A. Devenyi, Alexander James Ball, Piper Fowler-Wright, Alessia Visconti, et al. 2023. Swcarpentry/Shell-Novice: Software Carpentry: The UNIX Shell. Zenodo. https://doi.org/10.5281/ZENODO.595899. License: CC BY 4.0. Source: https://github.com/swcarpentry/shell-novice. Website: https://swcarpentry.github.io/shell-novice/.\n\n\nChacon, Scott, and Ben Straub. 2014. Pro Git. Apress. https://doi.org/10.1007/978-1-4842-0076-6. License: CC BY-NC. Source: https://github.com/progit/progit2. Website: https://git-scm.com/book/en/v2.\n\n\nKoziar, Katherine E., Madicken Munk, Andrew Greene, Annajiat Alim Rasel, Ed Bennett, Sarah LR Stevens, Ece Turnator, et al. 2023. Swcarpentry/Git-Novice: Software Carpentry: Version Control with Git 2023-05. Zenodo. https://doi.org/10.5281/ZENODO.7908089. License: CC BY 4.0. Source: https://github.com/swcarpentry/git-novice. Website: https://swcarpentry.github.io/git-novice/."
  },
  {
    "objectID": "chapters/setup.html#learning-objectives",
    "href": "chapters/setup.html#learning-objectives",
    "title": "4  Setup",
    "section": "4.1 Learning Objectives",
    "text": "4.1 Learning Objectives\n💡 You know how to set up Git for the first time 💡 You have set up Git on your computer 💡 You understand the different Git configuration levels 💡 You know how to configure your username and email address in Git 💡 You have set up your preferred text editor when working with Git 💡 You can escape the command-line text editor Vim\nReminder: Try out the commands in this chapter on your computer! ✨"
  },
  {
    "objectID": "chapters/setup.html#prerequisites",
    "href": "chapters/setup.html#prerequisites",
    "title": "4  Setup",
    "section": "4.2 Prerequisites",
    "text": "4.2 Prerequisites\n✅ You are familiar with the basics of the command line. We recommend to read the “command line” chapter beforehand. ✅ You have Git installed on your computer. If you need help, check out the “installation” chapter."
  },
  {
    "objectID": "chapters/setup.html#configuring-git",
    "href": "chapters/setup.html#configuring-git",
    "title": "4  Setup",
    "section": "4.3 Configuring Git",
    "text": "4.3 Configuring Git\nOnce you installed Git, it is time to set it up. We will use the the command line to set up and configure Git. The git config command is used to get and set configuration. It allows you to customize Git according to your preferences and requirements. To look at all the different configuration commands you can use\n\ngit config\n\nThis chapter will focus on the most important and / or necessary configurations.\n\n\n\n\n\n\nWhat are the different configuration levels?\n\n\n\n\n\nGit configuration values can be stored at three different configuration levels:\nSystem-level configuration: This level applies configuration values to every user on the system and all their repositories. To read or write configuration values at this level, you need administrative or superuser privileges.\nUser-level configuration: This level is specific to an individual user. Configuration values set at this level will be applied to all repositories owned by the user.\nRepository-level configuration: This level is specific to a particular Git repository. The configuration values set at this level override values set at the system-level and user-level configurations for that specific repository. By default, Git reads from and writes to this file when you use the git config command without any additional options.\n\n\n\n\n4.3.1  Identifying yourself\nBefore you start using Git, it’s important to set your username and email address. This information is crucial because Git uses it to identify the author of each change you track with Git. By associating your changes with your username and email, it allows others (including future you) to see who made the changes which facilitates transparency and collaboration within a project. You will be able connect Git to remote repositories like GitHub, using this email address. So it makes sense to set your email address to the one you use (or will use) to create a GitHub account.\nSetting your username and email address is a one-time setup process, but you can always update them later, if needed. To perform this configuration, you can use the command line:\n\ngit config --global user.name \"Jane Doe\"\ngit config --global user.email jane@example.com\n\nMake sure to replace \"Jane Doe\" with your own username and jane@example.com with your own email address.\n\n\n\n\n\n\nFAQ: Which name should I use for Git?\n\n\n\n\n\nIt can be your GitHub username, your real name, or something informative about you. This name will be attached to the changes you track with Git, so choose something that makes sense to others and yourself in the future.\n\n\n\n\n\n4.3.2  Configure the default name of the initial branch\nGit uses a concept called “branches” to enable working on different versions of the same project. (More on this will be explained later in the book.)\nOn most installations of Git, by default, the name “master” for the initial branch is used when creating a new repository. However, there has been a growing movement to transition to using “main” as the default branch name instead. One of the main motivations behind this change is to promote inclusivity and remove offensive terminology from the default Git workflow (you can read more about the reasons here or here). To configure the default branch name to “main” in Git, you can use the following command\n\ngit config --global init.defaultBranch main"
  },
  {
    "objectID": "chapters/setup.html#fa-gear-check-your-settings",
    "href": "chapters/setup.html#fa-gear-check-your-settings",
    "title": "4  Setup",
    "section": "4.4  Check your settings",
    "text": "4.4  Check your settings\nYou can verify if your configurations were set correctly using the following command:\n\ngit config --list\n\nThis should create a long output list, in which you should find your set configurations, for example:\n\nuser.name=Jane Doe\nuser.email=jane@example.com\ninit.defaultbranch=main"
  },
  {
    "objectID": "chapters/setup.html#fa-circle-question-calling-for-help",
    "href": "chapters/setup.html#fa-circle-question-calling-for-help",
    "title": "4  Setup",
    "section": "4.5  Calling for Help",
    "text": "4.5  Calling for Help\nThe --help option in Git is a command that provides you with access to the built-in Git documentation and help resources. When you run a Git command followed by --help, Git displays information about that command, including its usage, available options, and a brief description of its functionality.\nFor example, the following command will open up a browser in the command line containing information about the git config command.\n\ngit config --help\n\nTo quit the browser use q.\nWhile the command provides extensive documentation and information about Git commands, it is arguably not the most beginner-friendly resource."
  },
  {
    "objectID": "chapters/setup.html#fa-pen-text-editor",
    "href": "chapters/setup.html#fa-pen-text-editor",
    "title": "4  Setup",
    "section": "4.6  Text editor",
    "text": "4.6  Text editor\nSometimes, Git might open up a text editor inside the command line, and it can be annoying if you end up in an editor you don’t like or don’t know how to use. The standard text editor on macOS and when using “Git for Windows” is called Vim, which is widely known for being difficult to use. You can find more information about the challenges of using Vim (and some funny memes) here. To check out which text editor Git is using, you can use:\n\ngit config --get core.editor\n\nIf you have not changed your text editor yet, the output should be empty. This means that Git is using the command line´s default editor, which should be Vim if you are using a Mac or Git for Windows. To make sure, you can use:\n\ngit var GIT_EDITOR\n\nIf the output is: vim or vi, your systems default editor is indeed Vim/Vi. (Vim is an improved version of Vi, but there are virtually no differences between them for our usecase.)\nIn this situation, you can either pick up on the basics of Vim (see below) or simply change the text editor. Also note that you will typically not have to use the text editor in the command line a lot.\n\n4.6.1 Vim Basics\nTo start Vim, open the command line and type vim followed by the filename of the file that you want to edit (for example, vim file.txt). In Vim, you have two main modes: “Insert” mode for typing and “Normal” mode for navigation and command execution. Inside Vimn to switch from “Normal” mode to “Insert” mode, press i for inserting text. To save your changes and exit Vim, press Esc to enter “Normal” mode, then type :w to save, and :q to quit. Vim’s strength lies in its powerful commands for text manipulation, such as copying, pasting, and searching, which are executed in “Normal” mode.\nFor a more detailed and interactive tutorial, you can check out openvim.com.\n\n\n4.6.2 Changing your text editor\nIf you want to change the standard text editor, to one you are more comfortable with, there a lot of alternatives like Nano, Visual Studio Code or Notepad++. If you have decided to use a different text editor you can use the following command (replace editor-name with the name of your preferred text editor):\n\ngit config --global core.editor editor-name\n\nFrom now on, when Git requires you to interact with a text editor, it will use the one you have set. If you ever want to change your Git editor in the future, you can repeat the above steps and specify the new editor command or path."
  },
  {
    "objectID": "chapters/setup.html#unsetting-configuration",
    "href": "chapters/setup.html#unsetting-configuration",
    "title": "4  Setup",
    "section": "4.7 Unsetting configuration",
    "text": "4.7 Unsetting configuration\nIf you want to undo a configuration setting, you can use the --unset in the git config command. For example, to unset the global configuration of your preferred text editor (core.editor) you can use the following command:\n\ngit config --global --unset core.editor"
  },
  {
    "objectID": "chapters/setup.html#acknowledgements-and-further-reading",
    "href": "chapters/setup.html#acknowledgements-and-further-reading",
    "title": "4  Setup",
    "section": "4.8 Acknowledgements and further reading",
    "text": "4.8 Acknowledgements and further reading\nWe would like to express our gratitude to the following resources, which have been essential in shaping this chapter. We recommend these references for further reading:\n\n\n\n\nAuthors\nTitle\nWebsite\nLicense\nSource\n\n\n\n\nChacon and Straub (2014)\nPro Git\n\nCC BY-NC\n\n\n\nCapes et al. (2023)\nswcarpentry/shell-novice: Software Carpentry: the UNIX shell\n\nCC BY 4.0\n\n\n\nKoziar et al. (2023)\nswcarpentry/git-novice: Software Carpentry: Version Control with Git 2023-05\n\nCC BY 4.0\n\n\n\nBryan (2023)\nHappy Git and GitHub for the useR\n\nCC BY-NC 4.0"
  },
  {
    "objectID": "chapters/setup.html#cheatsheet",
    "href": "chapters/setup.html#cheatsheet",
    "title": "4  Setup",
    "section": "4.9 Cheatsheet",
    "text": "4.9 Cheatsheet\n\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\ngit config\nOverview of config commands\n\n\ngit config --global user.name\nSet Username\n\n\ngit config --global user.email\nSet Email\n\n\ngit config --global core.editor\nSet Editor\n\n\ngit config --global init.defaultBranch main\nSet default branch name\n\n\ngit config --list\nView set configurations\n\n\n\n\n\n\n\n\n\nBryan, Jenny. 2023. Happy Git and GitHub for the useR. Jenny Bryan. https://happygitwithr.com. License: CC BY-NC 4.0. Source: https://github.com/jennybc/happy-git-with-r. Website: https://happygitwithr.com/.\n\n\nCapes, Gerard, Bkmgit, Jacob Deppen, G. A. Devenyi, Alexander James Ball, Piper Fowler-Wright, Alessia Visconti, et al. 2023. Swcarpentry/Shell-Novice: Software Carpentry: The UNIX Shell. Zenodo. https://doi.org/10.5281/ZENODO.595899. License: CC BY 4.0. Source: https://github.com/swcarpentry/shell-novice. Website: https://swcarpentry.github.io/shell-novice/.\n\n\nChacon, Scott, and Ben Straub. 2014. Pro Git. Apress. https://doi.org/10.1007/978-1-4842-0076-6. License: CC BY-NC. Source: https://github.com/progit/progit2. Website: https://git-scm.com/book/en/v2.\n\n\nKoziar, Katherine E., Madicken Munk, Andrew Greene, Annajiat Alim Rasel, Ed Bennett, Sarah LR Stevens, Ece Turnator, et al. 2023. Swcarpentry/Git-Novice: Software Carpentry: Version Control with Git 2023-05. Zenodo. https://doi.org/10.5281/ZENODO.7908089. License: CC BY 4.0. Source: https://github.com/swcarpentry/git-novice. Website: https://swcarpentry.github.io/git-novice/."
  },
  {
    "objectID": "chapters/first-steps-git.html#logistics",
    "href": "chapters/first-steps-git.html#logistics",
    "title": "5  First steps with Git",
    "section": "5.1 Logistics",
    "text": "5.1 Logistics\n\n5.1.1 Learning Objectives\nIn this chapter, you will learn fundamental operations in Git, including:\n💡 Initializing a Git repository 💡 Staging and committing changes 💡 Exploring the commit history 💡 Comparing versions 💡 Creating a .gitignore file\n\n\n5.1.2 Prerequisites\nTo follow the contents of this chapter, you should have:\n\nBasic familiarity with the command line. Recommended reading: “Command line” chapter\nInstalled Git. Recommended reading: “Installation” chapter\nSet up Git. Recommended reading: “Setup” chapter\n\n\n\n5.1.3 Exercises\nTo learn Git effectively, it makes sense to practice version control by implementing it on your own small project. For the purpose of this guide, we will start off with a small project that only involves plain-text files. You don’t need to know any programming language like R or Python. So while reading this chapter and using the commands along, your task is to:\n\nCreate a folder called recipes and initialize it as a Git repository.\nCreate a plain text file called recipes.txt in this folder.\nAdd a recipe in this file. This can be the recipe for your favorite dish or an unusual AI-generated recipe.\nStage and commit your changes to the file\n\nPlease keep this project directory! This guide will continue to use your recipe project as an example in following chapters.\nThere are several terms in these instructions that might be unfamiliar to you, for example “repository”, “stage” or “commit”. Don’t worry, you will learn about what these terms mean in this chapter. Let’s git started!"
  },
  {
    "objectID": "chapters/first-steps-git.html#fa-folder-closed-creating-a-git-repository",
    "href": "chapters/first-steps-git.html#fa-folder-closed-creating-a-git-repository",
    "title": "5  First steps with Git",
    "section": "5.2  Creating a Git repository",
    "text": "5.2  Creating a Git repository\nFirst, we will create a so-called “repository” (or “repo”, for short). A repository is a regular folder on your computer that is tracked by Git. The full history of commits of a project and information about who changed what, when is also stored by Git in this folder.\nTo create your first Git repository, you need to initialize a folder as a Git repository.\nFirst, create an empty folder, for example using the command line:\n\nmkdir foldername\n\nAlternatively, you can create a folder using the graphical user interface of your file browser.\nNext, navigate, using the Terminal, to the folder which you want to initialize as a Git repository. You can use the cd command to change directories. Once you are in the desired folder, run the git init command to initialize the folder as a Git repository.\n\ngit init\n\nYou should see an output similar to:\n\nInitialized empty Git repository in /foldername/.git/\n\nCongratulations on successfully initializing your first Git repository! 🎉\nGit is now able to track your file(s) and the changes you make to them in this folder. You only need to use git init once per folder.\nYou can also skip creating a folder manually and only use the git init command:\n\ngit init /Users/yourusername/Desktop/foldername\n\nGit will create an already initialized folder at the path and with the name you use. Check your current working directory to be sure that you create the Git repository in the desired location. You can use both absolute and relative paths as arguments to the git init command to specify the location of your Git repository.\nGit can now track every file you move, create or change in this folder. You can use this folder, like any other normal folder on you computer. The only difference is the tiny but powerful folder called .git within it, which stores the full history of files and relevant metadata of your project, thereby enabling the tracking of your project progress.\n\n\n\n\n\n\n.git folder?\n\n\n\n\n\nIf you want to verify that Git is tracking your folder, you can look for the .git folder. To do this navigate to the correct folder and use ls -a to receive a list of hidden files. If the folder has been initialized as a Git repository, you should see a folder called .git. You probably should not manually modify this folder, since doing so can corrupt your repository.\n\n\n\n\n\n\n\n\n\nDon’t mess with the .git folder!\n\n\n\n\n\nThe .git folder in a Git repository contains all the essential information and configuration for the repository to function properly. Tampering with this folder can have serious consequences, as it can lead to data loss, corruption, or the inability to use the repository effectively. It’s essential to only modify Git repositories through Git commands and established workflows to ensure the integrity and reliability of your project. In short: Don’t mess with the .git folder.\n\n\n\n\n5.2.1 Checking the status of the Git repository\nAfter you initialized a Git repository, you can use git status to receive the current file tracking status from Git.\n\ngit status\n\nYou should see output similar to the following:\n\nOn branch main\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)\n\nLet’s unpack what this output means:\n\nOn branch main tell you that you are currently working on the “main” branch of your Git repository. A branch is like a separate line of development in your project. The default branch is often configured during the setup of Git.\nNo commits yet means that there haven’t been any changes or updates made to the repository yet. You haven’t created or saved any new versions of your project.\nnothing to commit (create/copy files and use \"git add\" to track) indicates that there are no new changes to save or “commit” to the repository at this moment. Git is suggesting that if you want to start tracking changes, you should create or copy some files into the repository’s directory and then use the git add command to tell Git to start keeping track of those files. Once you’ve added files with git add, you can then commit those changes to save them in your project’s history.\n\nAs you can see git status gives you an overview, which files Git is tracking for you. The git status command is helpful for understanding the current state of your Git repository and we recommend to use it frequently, especially before adding or committing changes in files to the Git history (see below for more details).\n\n\n\n\n\n\nCommon git status flags\n\n\n\n\n\n-s: Provides a more compact and simplified output, showing only the file status in a short format.\n-b: Includes information about the branch you are currently on along with the status.\n-u: Shows untracked files in the output.\n-uno: Suppresses the display of untracked files.\n-v: Provides more detailed information, including additional status information about ignored files.\nYou can use these flags in combination. For example, git status -s -b will display a short and concise output along with the branch information.\n\n\n\n\n\n5.2.2 Adding files to the Git repository\nIn the next step, please create an empty text file within your repository, for example using the touch command:\n\ntouch filename.txt\n\nYou can also use any other method or application for creating files."
  },
  {
    "objectID": "chapters/first-steps-git.html#fa-file-export-status-staging-and-committing",
    "href": "chapters/first-steps-git.html#fa-file-export-status-staging-and-committing",
    "title": "5  First steps with Git",
    "section": "5.3  Status, staging and committing",
    "text": "5.3  Status, staging and committing\n\n5.3.1 Checking the status of your Git repository again\nAfter you initialized a Git repository and added a file, you can use git status to receive the current file tracking status from Git again. This time, you should see output similar to the following:\n\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n  \n  filename.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n\n\n5.3.2 Introduction to staging and committing\nAfter initializing a folder with Git, it’s capable of recording changes in your files, but it won’t do so automatically. In Git, the process of saving changes involves two steps: the staging area and commits. The staging area is like a preparation area where you gather and organize your changes before saving them. You can choose which changes to include in a snapshot by adding them to the staging area using git add. Once you are happy with the changes in the staging area, you create a commit with git commit. A commit is like taking a snapshot of your project at a specific moment, capturing all changes in the staging area and saving them as a new version of your project. Commits serve as milestones to track your project’s progress and allow you to revert to previous versions if needed. As further introduction to the basic workflow of Git you can check out the last two minutes of the Youtube video: Version control for reproducible research from BERD Academy, which explains the process very vividly.\n\n\n5.3.3 Staging\nYou can use git add to place new or modified files in the staging area. The staging area acts as a space for gathering changes you plan to commit shortly. It bridges between your modified files and the next commit.\nFor example, you can stage a specific file like this:\n\ngit add filename.txt\n\nIf you use git status again, your file(s) should now show up under “changes to be committed”.\n\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n    new file:   filename.txt\n\nYour change to the file (or the addition of it to the project directory) is now staged. You do not have to add every file one by one, you can simply use the -A flag. This means if you want to stage every file in your project for preparation of your next commit, you can use:\n\ngit add -A\n\n\n\n\n\n\n\nBe careful when staging all files!\n\n\n\n\n\nEspecially for existing project folders that have a lot of files in them, be careful when you stage and / or commit all files in the project directory. Git might start to track files that you are actually not interested in tracking. We recommend to use git status frequently to check which files are in the staging area and will therefore be added to the next commit.\n\n\n\n\n\n\n\n\n\nCommon git add flags\n\n\n\n\n\n-A: Adds all changes, including modifications, deletions, and new files, in the entire working tree.\n-u: Adds modifications and deletions, but not new files.\n--ignore-errors: Ignores errors when adding files, allowing the command to continue even if some files cannot be added.\n\n\n\n\n\n5.3.4 Committing\nNow that the changes to your file(s) are staged, you are ready to create a commit.\nIn simple terms, a “commit” in Git is like taking a snapshot of your project at a specific moment in time. It’s a way to save the changes you’ve made to your files. When you make a commit, you’re saying, “I want to remember what my project looks like right now”. Each commit in Git includes a record of the changes you’ve made, a description of what you did, and a unique identifier. Commits are like milestones in your project’s history, and they allow you to keep track of all the different versions of your work over time. You can go back to any commit to see what your project looked like at that point or even undo changes if needed. Commits help you manage and document the history of your project.\nTo create a commit, use the git commit command followed by the flag -m and a commit message in quotes that describes the changes you made. The commit message should be short yet informative, providing enough detail to understand the purpose of the commit. If you just use git commit without adding a commit massage, the editor of your choosing, opens up and lets you type in a commit message.\n\ngit commit -m \"Add filename.txt file\"\n\nYou should see output similar to the following:\n\n[main (root-commit) e9ea807] Add filename.txt file\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 filename.txt\n\nCongratulations! You have successfully created your first commit in the Git repository. 🎉 Commits are the core elements of version control and the “commit history” of your Git repository. They allow you to track the history of your project and easily revert changes if needed.\nYou can use the same workflow of git add and git commit for every file you add or make changes in.\n\n5.3.4.1 Commit description\nThough it’s not required, it can be a good idea to add a more thorough description to the commit, in addition to the (shorter) commit message. While the commit message is usually a single short (less than 50 character) line summarizing the change, a more through description can be used to add more background information or helpful links that may help to understand the changes of the commit.\nTo add an additional description directly in the command line, add an extra -m after the commit message, followed by the description in quotes:\n\ngit commit -m \"Title\" -m \"Description\"\n\n\n\n\n\n\n\nCommon git commit flags\n\n\n\n\n\n-m : Specifies the commit message inline. For example, git commit -m \"Fix typo\" allows you to provide a short commit message directly in the command.\n-a or --all: Automatically stages all modified and deleted files before committing. This skips the separate git add step.\n-v or --verbose: Provides a detailed output, showing the diff of the changes being committed.\n-e or --edit: Opens the commit message editor, allowing you to edit the commit message before finalizing the commit.\n--amend: Modifies the previous commit. It allows you to add new changes to the previous commit or modify its commit message.\n\n\n\n\n\n\n5.3.5 Logging commits\nTo look at your past commits you can use the git log command.\n\ngit log\n\nYou should see output similar to the following:\n\ncommit e9ea80781ceed7cc3d6bff0c7bfa71f320ec1f60 (HEAD -&gt; main)\nAuthor: Jane Doe &lt;jane@example.com&gt;\nDate:   Thu Jun 29 12:23:53 2023 +0200\n\n    Add filename.txt file\n\ngit log is useful because it provides a clear and organized view of a repository’s commit history. It allows you to track the evolution of a project over time by displaying detailed information about each commit, including changes made, authors, and timestamps. The command can help identifying the source of bugs or issues by pinpointing the commit that introduced them.\n\n\n\n\n\n\nCommon git log flags\n\n\n\n\n\n--oneline: Provides a condensed output with each commit displayed on a single line, showing the abbreviated commit hash and commit message.\n-n  or --max-count=: Limits the number of commits shown to the specified . For example, git log -n 5 will display the latest 5 commits.\n--since=: Shows commits made after the specified . You can use various date formats, such as specific dates or relative expressions like “2 weeks ago” or “yesterday”.\n--until=: Shows commits made before the specified .\n--author=: Filters commits by the author’s name or email using a specified .\n\n\n\n\n\n5.3.6 Comparing versions\nAnother very handy feature is the git diff command. It allows you to compare two different versions of your file(s). By default it shows you any uncommitted changes since the last commit. You can explore this by pasting text in your .txt file, for example:\n\nLorem ipsum dolor sit amet, consectetur adipisici elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua. \nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquid ex ea commodi consequat. \nQuis aute iure reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \nExcepteur sint obcaecat cupiditat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nYou can then look at the changes using:\n\ngit diff\n\nYou should see output similar to the following:\n\n+++ b/filename.txt\n@@ -0,0 +1 @@\n+Lorem ipsum dolor sit amet, consectetur adipisici elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquid ex ea commodi consequat. Quis aute iure reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat cupiditat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\\ No newline at end of file\n\nThe output of git diff includes several pieces of information:\n\n+++ and --- indicate the paths to the files being compared.\n@@ -0,0 +1 @@ is a unified diff header. It shows where the changes occurred. Note, that this line will look different for each change or commit.\n+ indicates added lines and - indicates removed lines. Lines that are identical between the two versions are not explicitly shown.\n\nYou can also use git diff to compare two specific commits. For example, if you want to compare the current state of your file with a commit from a few commits ago:\n\ngit diff &lt;commit-A&gt; &lt;commit-B&gt;\n\nInstead of &lt;commit-A&gt; and &lt;commit-B&gt;, you use the commit hashes, that you can see when using git log.\nIf you’ve staged some changes using git add, you can compare the staged changes to your last commit.\n\ngit diff --staged\n\nIf you only want to look at the changes of a specific file, you can specify that file.\n\ngit diff &lt;filename&gt;\n\nThis command can also be combined with additional flags and options.\n\n\n\n\n\n\nCommon git diff flags\n\n\n\n\n\n--cached or --staged: Shows the changes that are staged (added) but not yet committed.\n&lt;commit&gt;: Displays the difference between the current working directory and a specific commit. For example, git diff abc123 shows the changes compared to commit abc123.\n&lt;commit&gt; .. &lt;commit&gt;: Shows the difference between two specific commits. For example, git diff abc123 def456 displays the changes between commit abc123 and commit def456.\n--name-only: Outputs only the names of the files that have differences, without showing the actual changes.\n--name-status: Displays the names of files along with a status identifier that indicates if a file was added, modified, or deleted.\n--color-words: Highlights the differences at the word level, providing more granular detail.\n\n\n\n\n\n5.3.7 Good commits\nYou should not consider a commit as a general Save button, that you use to save all your recent changes in one go. Instead, each commit should ideally contain one isolated and complete change. For example, if you want to rename a variable and add a new enhancement, put the variable rename in one commit and the enhancement in another commit.\nThis approach to commits, helps you down the line. For example, if you want to keep the enhancement but revert the renaming of the variable, you can revert the specific commit that contained the variable rename. If you put the variable rename and the enhancement in the same commit or spread the variable rename across multiple commits, you would spend more effort reverting your changes.\n\n\n5.3.8 Commit messages etiquette\nGit allows for a title or commit message with a 72 character limit and a description without such a limit. In general you should aim to write clear and short commit messages. There are different conventions across projects/persons but also some general guidelines, you can stick to.\nIt is standard to start the title with an imperative verb to indicate the purpose of the commit, for examople, “add”, “fix” or “improve”. It is also recommended to only write 50 characters for the title and up to 72 for the description (if such a description is even necessary). Here is an example:\n\ngit commit -m \"Implement user registration feature\n\nThis commit adds the user registration functionality to the application. It includes the following changes:\n- Created a new 'register' route and view for user registration.\n- Added form validation for user input.\"\n\n\n\n\n\n\n\nCommit messages examples\n\n\n\n\n\nSome examples for commit messages, which stick to the etiquette:\n\n\"Add 'favourites.txt' to the project\"\n\"Fix typo in first recipe\"\n\"Improve code comments for clarity\"\n\"Fix critical security vulnerability (CVE-2022-1234)\"\n\"Refactor database query functions for efficiency\"\n\"Update installation instructions in README\"\n\n\n\n\n\n\n5.3.9 Amending a commit\nThe git commit --amend command is used to modify (or “amend”) your most recent Git commit in your repository. It allows you to edit the commit message, add more changes to the commit, or simply adjust the last commit without creating a new commit. This flag can be useful if you forgot to include something in your last commit, made a typo or want to change your commit message. You can also combine --amend with other flags. To change the commit message of your last commit (without opening an editor) try:\n\ngit commit --amend -m \"changed commit message\"\n\nReplace \"changed commit message\" with your actual improved commit message.\nIf you want to to keep your commit message but include new changes to your file(s) in you last commit, you can use:\n\ngit commit --amend --no-edit\n\nThe --no-edit flag, lets you keep the commit message of your most recent commit.\n\n5.3.9.1 The repeated --amend workflow\nThe “repeated amend” is a Git workflow where you avoid cluttering your history with numerous tiny commits. Instead, you gradually build up a “good” commit by amending it repeatedly. Continue making small changes and amending the existing commit, refining it over time. This method keeps your Git history useful and looking good, making sure your commits tell a straightforward story of how your project evolved.\nThis workflow can be useful when you’re working on a new feature or a significant change and you might make several small adjustments to get it right. Instead of cluttering your history with numerous tiny commits for each tweak, you can use the “repeated amend” to gradually build up a well-polished commit that includes the entire feature."
  },
  {
    "objectID": "chapters/first-steps-git.html#what-files-canshould-i-track-with-git",
    "href": "chapters/first-steps-git.html#what-files-canshould-i-track-with-git",
    "title": "5  First steps with Git",
    "section": "5.4 What files can/should I track with Git?",
    "text": "5.4 What files can/should I track with Git?\nIn principle, any file can be tracked with Git. However, to make use of the full potential of Git, it is recommended to mainly track plain text files with Git.\n\n5.4.1  Code files\nTracking code files is the most common and original use case for version control with Git. Git is well-suited for tracking changes in source code, and it’s widely used by developers and teams for this purpose. Whether it’s a single developer maintaining a personal project or a large team collaborating on a complex software system, Git excels at tracking code files throughout the development lifecycle.\n\n\n5.4.2  Plain textfiles\nGit is a useful tool even if your project contains few or no code at all, especially in comparison to a setup that uses emails or shared Dropbox folders for “version control” (see the introduction chapter). However, to really be able to use the full set of features of Git, you should rely on plain text files for your project. This is because .docx files are saved as binary files, which makes meaningful outputs of the text inside it impossible for Git. “Plain textfiles” does not mean you have to use .txt files. Instead you can use formattable Markdown (.md) files. Markdown (.md) files are plain text files that contain formatting elements, making them more versatile than plain .txt files. Markdown allows you to add simple formatting like headings, lists, links, and images.\n\n\n5.4.3  Microsoft office files\nAs said earlier, it is not recommended to track Microsoft office files using Git, since Git treats .docx files as binary files. Binary files lack the inherent structure that allows Git to capture and display changes effectively. Git relies on understanding the differences between versions of files. With binary files, you won’t benefit from the ability to view detailed textual differences (git diff) or effectively use branches. Collaborative work on binary files, such as simultaneous editing of a Word document, may result in complex merge conflicts that are challenging to resolve.\nSo while it is possible to track .docx files with Git, you will not be able to use the many features of Git, which rely on Git being able to display the file, since Git can only output the “zeros and ones” and not the text inside the .docx files.\nIf you ever choose to track them regardless, you should use detailed commit messages, since you will not be able to easily look at the text content of past versions. You will also need to know about temporary word files. For it’s own version control system, Word creates temporary files in the folder of your word file. You should not track these files using Git, since Word creates a lot of them. To not stage or commit these files by accident, you can use the .gitignore file."
  },
  {
    "objectID": "chapters/first-steps-git.html#ignoring-files-and-folders-.gitignore",
    "href": "chapters/first-steps-git.html#ignoring-files-and-folders-.gitignore",
    "title": "5  First steps with Git",
    "section": "5.5 Ignoring files and folders: .gitignore",
    "text": "5.5 Ignoring files and folders: .gitignore\n.gitignore is a special file. It is used in Git to specify files and directories that should be ignored and not tracked. When you create a .gitignore file, place it inside your Git repository and specify filenames inside it. Git will then exclude these files and directories from being staged or committed, e.g. when using git add -A. which normally stages all your files.\nThe .gitignore file is useful to prevent certain files or directories that are not essential for the project or generated during the development process from being included in the version history. Files that can recreated from the code, like for example .png plots from R code, should also be included in your project’s .gitignore file. Including only essential files in version control keeps your repository clean, making it easier for collaborators to focus on the important project fules without distractions from unnecessary files. .gitignore can also help you avoid accidentally committing sensitive information like passwords, API keys, or personal data, which can lead to serious privacy breaches. Huge files, like big data files should also not be committed, since they can slow down working with your repository. To version control files with a big size, toolsl like DataLad are more appropriate.\nTo create a .gitignore file from the command line, navigate to your repository and use the touch command. Alternatively, create the file in your favorite text editor.\n\ntouch .gitignore\n\n.gitignore will be a hidden file, to make it show up in the terminal, you will have to use the -a flag in the ls command. For details on listing of files and folders, see the chapter on the command line.\n\nls -a\n\nNow you can write a filename or folder name inside it, to prevent Git from tracking it.\n\n5.5.1 Global .gitignore file\nInstead of specifying files you want Git to ignore for each folder, you can also create global .gitignore file. To do this, you create a file named .gitignore_global (or any name you prefer) in your users’s home directory (located, for example, at /Users/yourusername). Then, you configure Git to use this global file by running:\n\ngit config --global core.excludesfile ~/.gitignore_global\n\nAfter this setup, you can add common files to this list, that you want to ignore. These rules will apply across to all Git repositories on your computer.\n\n\n\n\n\n\nCommon wildcards\n\n\n\n\n\nAs discussed in the command line chapter wildcards are special characters that represent patterns of filenames or directory names. They can be used to specify multiple files or directories that should be ignored by Git when tracking changes. Wildcards allow you to match multiple files with a single rule, making it more convenient to exclude specific types of files or patterns.\n*: Matches any number of characters within a filename. For example, *.txt will match all files with the extension .txt in any directory.\n?: Matches a single character within a filename. For example, image?.png will match files like image1.png or imageA.png.\n/: Matches the root directory of the repository. For example, /config will match a directory named config only in the root of the repository.\n[] (Square Brackets): Matches any single character within the brackets. For example, file[123].txt will match file1.txt, file2.txt, or file3.txt.\n!: Negates a pattern and includes files that would otherwise be ignored. For example, !important.txt will exclude important.txt from being ignored, even if there’s a wildcard pattern that matches it.\n\n\n\n\n\n\n\n\n\nCommon files to ignore in scientific settings\n\n\n\n\n\n\nTemporary files and output: Ignore files generated during analysis, like log files, temporary files, or intermediate data files.\nData folders: Exclude large datasets or data stored locally.\nEnvironment-specific files: Exclude environment-specific files like .env files or venv folders used for local development setups.\nSystem-specific files: In macOS, ignore .DS_Store files, and in Windows, ignore Thumbs.db files.\nR: Ignore .Rdata files and /Rplots.pdf generated by R for plotting.\nPython: Ignore .pyc (Python compiled) files and pycache folders.\nLaTeX: Ignore auxiliary files like .aux, .log, .bbl, and .blg files generated during LaTeX compilation.\n\n\n\n\n\n\n\n\n\n\nExample .gitignore file for an R project\n\n\n\n\n\n\n\n# R-specific\n*.Rproj.user/\n*.Rhistory\n.RData\n.Rproj\n\n# R package specific\n.Rcheck/\nman/*.Rd\nNAMESPACE\n\n# Temporary files\n*.bak\n*.csv~\n*.html\n*.pdf\n\n# RMarkdown-specific\n*.knit.md\n*_cache/\n*_files/\n\n# R Markdown Notebook\n*.nb.html\n\n# RStudio Project Files\n*.Rproj\n\n# R Environment Variables\n.Renviron\n\n# R dcf file\nDESCRIPTION.meta\n\n# Mac-specific\n.DS_Store"
  },
  {
    "objectID": "chapters/first-steps-git.html#bonus-exercises",
    "href": "chapters/first-steps-git.html#bonus-exercises",
    "title": "5  First steps with Git",
    "section": "5.6 Bonus exercises",
    "text": "5.6 Bonus exercises\nBesides generally playing around with staging, committing, git log and git diff, you can also do these tasks:\n\nAdd a recipe to your project using the repeated --amend workflow\nInitialize a new Git repository and create a .docx file in it. Check out the results of git diff after writing in the file.\nUse ls -a to see the temporary files.\nCreate a .gitignore file, where you put all temporary files Word creates."
  },
  {
    "objectID": "chapters/first-steps-git.html#cheatsheet",
    "href": "chapters/first-steps-git.html#cheatsheet",
    "title": "5  First steps with Git",
    "section": "5.7 Cheatsheet",
    "text": "5.7 Cheatsheet\n\n\n\n\n\nCommand\nDescription\n\n\n\n\ngit init\nInitialize folder as Git Repository\n\n\ngit status\nView Git tracking status of files in Repository\n\n\ngit add\nAdd file to staging area\n\n\ngit commit\nCommit staged files\n\n\ngit log\nView past commits\n\n\ngit diff\nView made changes compared to the last commit"
  },
  {
    "objectID": "chapters/first-steps-git.html#acknowledgements-further-reading",
    "href": "chapters/first-steps-git.html#acknowledgements-further-reading",
    "title": "5  First steps with Git",
    "section": "5.8 Acknowledgements & further reading",
    "text": "5.8 Acknowledgements & further reading\nWe would like to express our gratitude to the following resources, which have been essential in shaping this chapter. We recommend these references for further reading:\n\n\n\n\nAuthors\nTitle\nWebsite\nLicense\nSource\n\n\n\n\nThe Turing Way Community (2022)\nThe Turing Way: A handbook for reproducible, ethical and collaborative research\n\nLicense: The process documents and data are made available under a . Software are made available under an . Website: \n\n\n\nMillman et al. (2018)\nTeaching Computational Reproducibility for Neuroimaging\n\nCC BY 4.0. Website: \n\n\n\nMcBain (2019)\nGit for Scientists\n\nCC BY-SA 4.0\n\n\n\nBryan (2023)\nHappy Git and GitHub for the useR\n\nCC BY-NC 4.0\n\n\n\n\n\n\n\n\n\nBryan, Jenny. 2023. Happy Git and GitHub for the useR. Jenny Bryan. https://happygitwithr.com. License: CC BY-NC 4.0. Source: https://github.com/jennybc/happy-git-with-r. Website: https://happygitwithr.com/.\n\n\nMcBain, Miles. 2019. “Git for Scientists.” https://milesmcbain.github.io/git_4_sci/. License: CC BY-SA 4.0. Source: https://github.com/MilesMcBain/git_4_sci/. Website: https://milesmcbain.github.io/git_4_sci/.\n\n\nMillman, K. Jarrod, Matthew Brett, Ross Barnowski, and Jean-Baptiste Poline. 2018. “Teaching Computational Reproducibility for Neuroimaging.” Frontiers in Neuroscience 12 (October). https://doi.org/10.3389/fnins.2018.00727. License: CC BY 4.0. Website: http://dx.doi.org/10.3389/fnins.2018.00727.\n\n\nThe Turing Way Community. 2022. The Turing Way: A Handbook for Reproducible, Ethical and Collaborative Research. Zenodo. https://doi.org/10.5281/zenodo.3233853. License: The process documents and data are made available under a CC BY 4.0 license. Software are made available under an MIT license. Website: https://the-turing-way.netlify.app/."
  },
  {
    "objectID": "chapters/branches.html#logistics",
    "href": "chapters/branches.html#logistics",
    "title": "6  Branches",
    "section": "6.1 Logistics",
    "text": "6.1 Logistics\n\n6.1.1 Learning Objectives\n💡 Knowing purpose and benefits of using branches in Git 💡 Creating and switching between branches 💡 Merging branches and resolving conflicts\n\n\n6.1.2 Exercises\n\nCreate a new branch called feature/newrecipe\nAdd a new recipe to your recipe text file\nMerge this branch with your main branch and delete the feature branch afterwards"
  },
  {
    "objectID": "chapters/branches.html#why-branches",
    "href": "chapters/branches.html#why-branches",
    "title": "6  Branches",
    "section": "6.2 Why branches?",
    "text": "6.2 Why branches?\nGit branches are like separate workspaces within a Git repository. They let you work on different stuff without messing up the main code. You can visualize branches as shown in Figure 6.1.\nEach branch keeps its own history, so you can develop things in parallel and easily merge changes between branches when you’re ready. It’s great for trying out new features, fixing bugs, or experimenting without causing chaos in the main development branch. Scientists might use branches to collaborate on research papers, exploring different parameters while running experiments or to test different data processing techniques or visualization approaches during data analysis. Git makes it easy to switch between branches and handle conflicts when merging. With branches, you can work independently and keep your code organized.\n\n\n\nFigure 6.1: Image from Chapter “Git Branch” of the Atlassian “Become a git guru” tutorials, used under a Creative Commons Attribution 2.5 Australia License (direct link)"
  },
  {
    "objectID": "chapters/branches.html#checking-your-branches",
    "href": "chapters/branches.html#checking-your-branches",
    "title": "6  Branches",
    "section": "6.3 Checking your branches",
    "text": "6.3 Checking your branches\nBy default, your work is on the initial branch, usually called main (or master). We recommend changing your initial branch name to main, as discussed in the setup chapter. You can list the available branches in your repository by using git branch.\n\ngit branch \n\nThis should return the following output:\n\n* main\n\nThis output indicates that you are currently on the branch named main. The asterisk (*) in front of the branch name indicates the active or current branch in your Git repository.\nIn Git, you can have multiple branches in your project, and this command helps you see the list of available branches. The one with the asterisk is the branch where your working directory is currently positioned. In this case, main is the active branch. If there were other branches listed without an asterisk, it means they exist, but you are not currently “on” those branches. You are “on main”."
  },
  {
    "objectID": "chapters/branches.html#creating-a-new-branch",
    "href": "chapters/branches.html#creating-a-new-branch",
    "title": "6  Branches",
    "section": "6.4 Creating a new branch",
    "text": "6.4 Creating a new branch\nTo create a new branch, use git branch followed by a branch name. For example, to create a new branch called feature run the following command:\n\ngit branch feature\n\nNow you can use git branch again to confirm the creation of the new branch.\n\ngit branch \n\nThis should return the following output:\n\n  feature\n* main\n\nYour newly created branch will show up, but your active branch should still be main.\n\n\n\n\n\n\nCommon git branch flags\n\n\n\n\n\n-a or --all: Lists both local and remote branches.\n-r or --remote: Lists only remote branches.\n-d or --delete: Deletes a specified branch. For example, git branch -d feature.\n-D or --force: Force deletes a branch, even if it has unmerged changes.\n-m or --move: Renames a branch. For example, git branch -m old-branch new-branch.\n-c or --copy: Creates a new branch by copying an existing branch. For example, git branch -c existing-branch new-branch\n-v or --verbose: Shows more information when listing branches, including the last commit message.\n--contains: Filters branches that contain a specific commit."
  },
  {
    "objectID": "chapters/branches.html#switching-branches",
    "href": "chapters/branches.html#switching-branches",
    "title": "6  Branches",
    "section": "6.5 Switching branches",
    "text": "6.5 Switching branches\nTo switch to another branch, you can use git checkout or git switch.\nFor example, enter the following command to switch to the newly created feature branch:\n\ngit switch feature\n\nIf you switched branches successfully, you should receive an output similar to this:\n\nSwitched to branch 'feature'\n\nNow you can work on this branch as usual using the staging/committing workflow introduced in the chapter on basic Git commands.\n\n\n\n\n\n\nWhat is the difference between git checkout and git switch?\n\n\n\n\n\nPrior to Git version 2.23, the git checkout command was the primary way to switch branches. It allows you to move to a different branch and update your working directory to reflect the state of that branch. In Git 2.23 and later versions, the git switch command was introduced as a safer and more intuitive alternative to git checkout. It simplifies the branch-switching process and provides clearer feedback in case of errors.\ngit checkout is a versatile and powerful command that, among other things, was traditionally used for switching branches. However, it has other use cases like checking out specific files or commits. It can be used for branch switching, but it may have some ambiguity in its syntax, especially when used for other purposes.\n\n\n\n\n6.5.1 Error when switching branches\nGit is designed to prevent you from switching branches if there’s a risk of overwriting your changes. This means that Git will not allow you to switch branches if you have uncommitted changes on your branch. If you try to switch branches with uncommitted changes you will get an error message similar to:\n\nerror: Your local changes to the following files would be overwritten by checkout:\n        chapters/branches.qmd\nPlease commit your changes or stash them before you switch branches.\nAborting\n\nThe message specifies the file with modifications, and indicates an aborted branch switch due to uncommitted changes.\nIf you want to keep your changes you should save them using the stage and commit workflow It is also possible to temporarily stash your changes using git stash or delete your changes using git reset which is covered in the Stashing and co. chapter."
  },
  {
    "objectID": "chapters/branches.html#merging-branches",
    "href": "chapters/branches.html#merging-branches",
    "title": "6  Branches",
    "section": "6.6 Merging branches",
    "text": "6.6 Merging branches\nAfter you worked on a branch for some time you might want to incorporate your work into the main branch. You can do this using the git merge command. Switch to your main branch (using git switch or git checkout) and then use:\n\ngit merge feature\n\nNote, that your current branch (the branch that you are “on”) should be the one that you want to merge changes into from another branch. For example, if you want to merge changes into the main branch from the feature branch, you need to be on main and then merge the feature branch.\nIf you have not yet made any changes you should get the following output:\n\nAlready up to date.\n\nThis output indicates that the branch you are trying to merge is already fully incorporated into the branch you are currently on. In other words, there are no new changes in the feature branch that need to be merged because your current branch already contains all the changes from the feature branch.\nIf you have changed file(s) in your folder, you should get an output similar to:\n\nUpdating 555ba0c..994bb8d\nFast-forward\n \n example.txt    |   4 ++++\n\n 1 file changed\n\nThe output reveals a “fast-forward” merge operation, where changes from commit 555ba0c to 994bb8d are incorporated. The common starting point of the two branches is commit 555ba0c and commit 994bb8d marks the latest commit in the merged branch. A “fast-forward” merge, the simplest form of merges, smoothly updates your position to the latest changes without creating a new commit. This linear integration avoids diverging paths. Additionally, the merge modified only one file, the example.txt file, introducing four new lines denoted by 4 ++++."
  },
  {
    "objectID": "chapters/branches.html#merge-conflicts",
    "href": "chapters/branches.html#merge-conflicts",
    "title": "6  Branches",
    "section": "6.7 Merge conflicts",
    "text": "6.7 Merge conflicts\nMerge conflicts occur when Git is unable to automatically resolve differences between two branches during a merge. This happens when both branches include conflicting changes to the same part of a file. Git simply can’t determine which version of the code should take precedence, and as a result, it requests manual intervention from the developer. It’s like when two people try to edit the same part of a file at the same time, and Git gets confused about whose changes to keep. So, it raises its hand and asks you, the developer, to step in and help.\n\n6.7.1 Avoiding merge conflicts\nMerge conflicts can be a bit of a headache. If you only work locally on your computer, without a remote repository (for example, an online version of your repository on GitHub), you can avoid merge conflicts easier, and might not even need different branches. However, once you start to collaborate with others, it may not be possible to entirely avoid merge conflicts. That being said,\nEmploying good development practices can minimize the occurrence of merge conflicts. Regularly pulling changes from the remote repository into your local branch (using git pull) and keeping your branch up-to-date can help identify and resolve conflicts early. You will learn more about how to effectively manage collaborative work on Git repositories in the following chapters on GitHub.\n\n\n6.7.2 Resolving merge conflicts\nWhen a merge conflict arises, you should not view it as a limitation of Git but rather as a helpful feature. Git is like a referee saying, “Hey, programmers, sort out your differences!”\nIf you try to merge with conflicting changes in a file the output looks similar to this:\n\nAuto-merging example.txt\nCONFLICT (content): Merge conflict in example.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n\nGit will highlight the conflicting parts in the affected file(s), and you must choose the desired changes or modify them to create a consistent version. To do this, open up the file(s) with conflicts in a text editor, and you’ll see the conflicting sections marked with &lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, and &gt;&gt;&gt;&gt;&gt;&gt;&gt;.\nThis might look something like this:\n\\&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n# Recipe: Chocolate Cake\n\nIngredients:\n- 2 cups all-purpose flour\n- 1 3/4 cups granulated sugar\n- 3/4 cup unsweetened cocoa powder\n- ...\n\nInstructions:\n1. Preheat the oven to 350°F (175°C).\n2. In a large bowl, whisk together dry ingredients.\n3. Add eggs, milk, oil, and vanilla. Beat well.\n4. Stir in boiling water.\n5. Pour into prepared pans.\n\\=======\n# Recipe: Chocolate Brownies\n\nIngredients:\n- 1 cup unsalted butter\n- 2 cups granulated sugar\n- 4 large eggs\n- ...\n\nInstructions:\n1. Preheat the oven to 350°F (175°C).\n2. Melt butter, then stir in sugar, eggs, and vanilla.\n3. Combine dry ingredients and gradually add to the butter mixture.\n4. If desired, fold in chopped nuts.\n5. Spread the batter evenly into the prepared pan.\n\\&gt;&gt;&gt;&gt;&gt;&gt;&gt; \nThe lines between &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD and ======= represent the changes that were made in your current branch. The section between ======= and &gt;&gt;&gt;&gt;&gt;&gt;&gt; represents the changes from the branch you are trying to merge into your current branch.\nManually edit the conflicting sections to the desired state, removing the conflict markers. You might want to keep some changes from your current branch, some from the incoming branch, or make entirely new changes.\nAfter editing the file it might look something like this:\n# Recipe: Chocolate Cake\n\nIngredients:\n- 2 cups all-purpose flour\n- 1 3/4 cups granulated sugar\n- 3/4 cup unsweetened cocoa powder\n- ...\n\nInstructions:\n1. Preheat the oven to 350°F (175°C).\n2. In a large bowl, whisk together dry ingredients.\n3. Add eggs, milk, oil, and vanilla. Beat well.\n4. Stir in boiling water.\n5. Pour into prepared pans.\n\n# Recipe: Chocolate Brownies\n\nIngredients:\n- 1 cup unsalted butter\n- 2 cups granulated sugar\n- 4 large eggs\n- ...\n\nInstructions:\n1. Preheat the oven to 350°F (175°C).\n2. Melt butter, then stir in sugar, eggs, and vanilla.\n3. Combine dry ingredients and gradually add to the butter mixture.\n4. If desired, fold in chopped nuts.\n5. Spread the batter evenly into the prepared pan.\n\nIn this example, the conflict has been resolved by keeping both sets of changes. The sections for “Chocolate Cake” and “Chocolate Brownies” are now both present in the file.\nIf you are done, save the file and use git add to stage the resolved changes:\n\ngit add example.txt\n\nOnce all conflicts are resolved, proceed with the commit, for example:\n\ngit commit -m \"Resolve merge conflict\"\n\nYour branches should now be merged and your conflict resolved.\n\n\n\n\n\n\nCommon git merge flags\n\n\n\n\n\n--abort: Abort the current merge operation and reset the branch to its pre-merge state.\n--continue: Continue the merge process after resolving conflicts.\n--log: Include the log message from the commit(s) being merged in the new merge commit.\n\n\n\n\n\n6.7.3 Types of merges\nGit supports different types of merges to cater to various situations in software development. Each merge type has its purpose and advantages, allowing developers to choose the most suitable approach based on their specific project needs and workflow.\n\n6.7.3.1 Standard merge\nIn a standard merge, Git takes each commit from the merged branch and adds them to the history of the base branch with their original time stamps. It creates a new “merge commit”, a special record that marks when the merge happened, showing that the branches are now combined. To perform a standard merge, use the following command:\n\ngit merge \n\n\n\n6.7.3.2 Fast Forward Merge\nIf no new commits were made to the base branch since the feature was created, Git automatically does a “Fast Forward Merge”. It’s like the standard merge, but no new merge commit is created. It’s as if you made the commits directly on the base branch. Since the base branch remained unchanged, there’s no need to mark a separate merge in the history. You can ensure a fast-forward merge by using the --ff-only flag:\n\ngit merge --ff-only\n\nIf you do not want a fast-forward merge, you can ensure a merge commit with the --no-ff flag.\n\ngit merge --no-ff\n\n\n\n6.7.3.3 Squash and Merge\nWhen you squash a branch, Git combines all commits of the branch into a single commit. This new commit is then added to the history, but the individual commits that were part of the branch are not retained or preserved separately. Instead, the squashed commit represents the collective changes made in the branch, creating a cleaner and more concise history.\n\ngit merge --squash\n\n\n\n\n\n\n\nCommon git merge flags\n\n\n\n\n\n--interactive or -i: Start an interactive rebase, allowing you to edit, reorder, or squash commits interactively.\n--continue: Continue the rebase after resolving conflicts or editing commits during an interactive rebase.\n--abort: Abort the current rebase operation and return the branch to its original state before the rebase.\n--skip: Skip the current commit during an interactive rebase.\n-p or --preserve-merges: Preserve merge commits during the rebase.\n--autosquash: Automatically squash commits marked with “squash” or “fixup” in their commit message during an interactive rebase."
  },
  {
    "objectID": "chapters/branches.html#deleting-branches",
    "href": "chapters/branches.html#deleting-branches",
    "title": "6  Branches",
    "section": "6.8 Deleting Branches",
    "text": "6.8 Deleting Branches\nOnce a branch has served its purpose and is no longer needed, it can be deleted. Removing branches that are no longer active helps maintain a clean and manageable branch structure. To delete a branch you can use the git branch command, followed by a -d flag.\n\ngit branch -d feature\n\nThis should yield an output similar to:\n\nDeleted branch feature (was 3343f36).\n\nYou can only delete a branch, you are not currently on."
  },
  {
    "objectID": "chapters/branches.html#branches-best-practices",
    "href": "chapters/branches.html#branches-best-practices",
    "title": "6  Branches",
    "section": "6.9 Branches best practices",
    "text": "6.9 Branches best practices\n\n6.9.1 Naming branches\nAdopt a consistent naming convention for branches that accurately reflects their purpose. This can include prefixes like feature/, bug/, or hotfix/ followed by a descriptive name. Clear and standardized branch names make it easier to identify the purpose of each branch.\n\n\n6.9.2 Branch Lifecycle\nCreate branches with a specific goal or task in mind, and aim to keep them short-lived. Long-lived branches can lead to conflicts and make it harder to merge changes. Once the task is complete or the feature is integrated, consider deleting the branch."
  },
  {
    "objectID": "chapters/github-intro.html#logistics",
    "href": "chapters/github-intro.html#logistics",
    "title": "7  GitHub",
    "section": "7.1 Logistics",
    "text": "7.1 Logistics\n\n7.1.1 Learning objectives\n💡 Connecting Git and Github 💡 Setting up a GitHub repository 💡 Pulling and pushing changes to / from a Github repository\n\n\n7.1.2 Exercises\n\n7.1.2.1 Upload your repository to GitHub\n\nCreate a new repository on GitHub.\nSet the remote URL to your GitHub repository.\nPush your changes to GitHub.\n\n\n\n7.1.2.2 Clone your repository, push and pull\n\nClone your uploaded repository to a different location on your computer.\nMake changes and push them to GitHub.\nPull the changes into your original repository.\n\n\n\n7.1.2.3 Bonus: Create a Pull Request\n\nCreate a new branch in your local repository.\nAdd, commit, and push changes in the new branch.\nCreate and merge a pull request for this new branch on GitHub"
  },
  {
    "objectID": "chapters/github-intro.html#what-are-remote-repositories",
    "href": "chapters/github-intro.html#what-are-remote-repositories",
    "title": "7  GitHub",
    "section": "7.2 What are remote repositories",
    "text": "7.2 What are remote repositories\nA remote repository is a version of your Git repository that is hosted on a server, mostly on the internet. Unlike your local repository, which is on your personal computer, a remote repository can be a shared resource that allows multiple contributors to collaborate on a project. These remote repositories could be hosted on platforms like GitHub, GitLab, Bitbucket, or a private server.\n\n7.2.1 Why use remote repositories?\nOne of the primary reasons to use remote repositories is for collaboration. They provide a centralized location where team members can collectively work on a project. Whether contributors are across the room or across the globe, remote repositories make it possible for everyone to access the same set of project files and contribute to the development process.\nHosting a project on a remote repository also serves as a backup mechanism. If a contributor’s computer fails or their files get corrupted, they can always clone a fresh copy of the project from the remote repository. This ensures that the project’s progress is not dependent on a single person’s local environment."
  },
  {
    "objectID": "chapters/github-intro.html#fa-brands-github-what-is-github",
    "href": "chapters/github-intro.html#fa-brands-github-what-is-github",
    "title": "7  GitHub",
    "section": "7.3  What is GitHub?",
    "text": "7.3  What is GitHub?\nGitHub is a popular web-based platform that hosts Git repositories remotely. You can use it in your browser without installing any software on your computer. It’s a collaborative environment for software development, allowing developers to work together, manage code, and track changes. GitHub also offers project management and code review tools, making it great for open-source development and team collaboration."
  },
  {
    "objectID": "chapters/github-intro.html#fa-brands-github-creating-a-github-account",
    "href": "chapters/github-intro.html#fa-brands-github-creating-a-github-account",
    "title": "7  GitHub",
    "section": "7.4  Creating a GitHub account",
    "text": "7.4  Creating a GitHub account\nTo be able to use GitHub, you will need to create an account:\n\nOpen https://github.com in your browser\nClick the Sign up button\nEnter the required personal details\nIn step 2 select the free plan.\n\n\n\n\n\n\n\nChoosing a Github Name\n\n\n\n\n\nHere are some tips for choosing a GitHub username:\n\nIncorporate your name.\nAdapt your username from other platforms.\nChoose a professional username. Your future boss might look at your GitHub profile.\nOpt for a shorter username.\nBe unique and concise.\nAvoid references to specific institutions.\nUse all lowercase and hyphens for word separation.\n\n\n\n\n\n\n\n\n\n\nGitHub student education pack\n\n\n\n\n\nThe GitHub Student Developer Pack is a program offered by GitHub to students, providing them with free access to a collection of valuable developer tools and services. To benefit from the pack, visit the GitHub Education website and sign up with your student email to verify your academic status. Once verified, you gain access to various resources, including GitHub Pro with unlimited private repositories, free domain names, cloud credits, coding courses, and more."
  },
  {
    "objectID": "chapters/github-intro.html#fa-brands-github-connecting-to-github",
    "href": "chapters/github-intro.html#fa-brands-github-connecting-to-github",
    "title": "7  GitHub",
    "section": "7.5  Connecting to GitHub",
    "text": "7.5  Connecting to GitHub\n\n7.5.1 Authentication\nGitHub authentication is needed to access and work with repositories that are stored on GitHub. It is kind of like showing your ID to prove who you are before entering a restricted area. It’s necessary to make sure only the right people or programs can access and do things on GitHub, keeping everything safe and organized.\nFor security reasons it is no longer possible to authenticate yourself using only your GitHub email and password. There are multiple authentication methods which offer different advantages and drawbacks. In this section, we will briefly introduce one of the two most common authentication methods: Personal Access Tokens.\nIf you would rather use the SSH protocol for authentication, check out the SSH documentation on Github.com.\n\n7.5.1.1 Personal Access Token\nFollow these steps to set it up:\n\nLog in to your GitHub account on GitHub.com\nClick on your profile picture in the top-right corner and select “Settings”.\nIn the left sidebar, select “Developer settings”, then “Personal access tokens (classic)”.\nClick “Generate new token”.\nGive your token a name. The name should help you to later identify in which context you used the token. For example, you could add a short description of the machine that you generated the token for.\nChoose the desired scopes. The scopes define the permissions of the token, or “what it is allowed to do” with your GitHub account and repositories. For a normal usecase, you should enable the scopes: repo, admin:org and delete_repo for a full access.\nSet an expiration date if needed. You can also choose “No expiration”.\n\n\n\n\nFigure 7.1: Screenshot of the personal access token settings\n\n\nClick “Generate token,” and you’ll be presented with your new token.\nMake sure to copy it as it won’t be shown again. The first time you try to interact with a remote repository, you will get asked for a password. Paste this key as a password into the terminal to proceed.\nIf you use Git Bash on Windows, your terminal will open a window where you can choose to authenticate yourself with a PAT.\n\n\n\n\n\n\nMore about PAT settings\n\n\n\n\n\nExpiration Date:\nWhen you create a Personal Access Token, you can specify its expiration date. The expiration date is the date and time when the token becomes invalid and cannot be used for authentication anymore. Setting an expiration date is a security measure to limit the time during which the token can be misused if it falls into the wrong hands. Creating an expiration date for a GitHub Personal Access Token (PAT) is not strictly necessary, but it is considered a good security practice.\nScopes:\nWhen you create a PAT, you can choose the scopes to define what actions the token is allowed to perform. These scopes determine the level of access the token has to different parts of your GitHub account or repositories.\nHere are some common scopes you might encounter when creating a GitHub PAT:\nrepo: This scope provides full control of private and public repositories, including the ability to read, write, and delete code.\nrepo:status: Grants access to commit statuses, allowing the token to read and set commit status for a repository.\nrepo_deployment: Enables the token to access deployment-related events and perform actions related to repository deployments.\nread:org: Allows the token to read organization membership, teams, and repositories within an organization.\nuser: Grants access to user-related data, including user profile information.\ndelete_repo: Provides permission to delete repositories.\nadmin:org: Offers administrative access to the entire organization, including managing teams and repositories."
  },
  {
    "objectID": "chapters/github-intro.html#fa-folder-closed-github-repositories",
    "href": "chapters/github-intro.html#fa-folder-closed-github-repositories",
    "title": "7  GitHub",
    "section": "7.6  GitHub repositories",
    "text": "7.6  GitHub repositories\n\n7.6.1 Creating a GitHub repository\nTo create a new repository, click on the “+” sign in the top-right corner of the GitHub page. From the dropdown menu, select New repository.” On the new repository page, as shown in Figure 7.2, enter a name for your repository and make sure the “Public” option is selected if you want it to be accessible to everyone. You can also choose to create a README file by checking the corresponding box. If you want to upload an existing repository, you should not create a README, since your GitHub repository needs to be completely empty. Finally, click the green “Create repository” button at the bottom of the page to complete the creation process.\n\n\n\n\n\n\nPublic or private?\n\n\n\n\n\nWhen you create a new repository on GitHub, you can control who can see it by choosing if it’s public or private.\nIf it’s public, anyone on the internet can access it. If it’s private, only you, the people you specifically allow, and, for organization repositories, certain members can access it. For further details, see the chapter “About repository visibility” in the GitHub documentation.\nIf you have admin permissions for a repository, you can change its visibility. This means you can later still make a public repository private and vice verca, if needed.\n\n\n\n\n\n\nFigure 7.2: Screenshot of creating a new repository\n\n\n\n\n7.6.2 Committing changes on GitHub directly\nOnce you have created the repository and initialized it with a README.md file, you will find the README.md file in your repository. You can edit this file to provide information and details about your project. Whatever you write in the README.md file will be displayed on the front page of your project.\nTo add more files to your repository, click on the “Add file” button and choose whether to upload existing files or create a new file directly on GitHub. Remember to provide a descriptive commit message each time you add a new file or make changes. The commit message helps you keep track of the changes you’ve made and serves as a brief summary of the modifications made to the repository.\n\n\n\n\n\n\nWriting a README file\n\n\n\n\n\nKeep it simple! When you’re working in any field, whether it’s coding or studying stars, you’ll likely use specialized terms that might confuse others. So, use plain language and explain any unfamiliar words you use.\nDescribe what you’re doing now and what you plan to do in the future. This helps people understand your work and goals. Tell people who you are and how they can reach you. It’s great for networking and collaboration. If you’re not sure how to start, take a look at other people’s README.md files for inspiration.\n\n\n\n\n\n7.6.3 Uploading your repository\nTo initialize an existing folder as a GitHub repository, you first need to create a new repository, like explained above. You will then need to initialize the folder as a Git repository using git init. If you have already done this, you can of course skip this.\nTo add your folder as a remote repository, navigate to your folder using the command line and use the git remote command.\n\ngit remote add origin https://github.com/yourusername/repositoryname.git\n\nThis command is essentially telling Git: “Add a remote repository named origin with the location (URL) https://github.com/yourusername/repositoryname.git”. After running this command, your local Git repository will be aware of the remote repository, and you can push and pull changes between your local repository and the one on GitHub. The term “origin” is a conventionally used name for the default remote repository. It’s a standard name, but you could technically choose another name if you prefer.\nYour are now able to push your files to the remote repo using git push.\n\ngit push -u origin main\n\nThis pushes the local branch named “main” to a remote repository called “origin” while setting it as the upstream branch. -u is used to set the upstream branch. It tells Git to remember the remote branch to which your local branch should be pushed in the future.\n\n\n\n\n\n\ncommon git remote commands\n\n\n\n\n\ngit remote: Lists all remote repositories associated with the current local repository.\ngit remote -v: Lists remote repositories along with their URLs.\ngit remote add &lt;name&gt; &lt;url&gt;: Adds a new remote repository with the specified name and URL.\ngit remote rm &lt;name&gt;: Removes the remote repository with the specified name.\ngit remote rename &lt;old-name&gt; &lt;new-name&gt;: Renames a remote repository from old-name to new-name.\n\n\n\n\n\n7.6.4  Cloning a Repository\nCloning refers to creating a local copy of a repository from GitHub on your computer. When you clone a repository, you download all of its files, commit history, and branches to your local machine. Cloning allows you to work with the repository locally, make changes, and push those changes back to the original repository if you have write access. It is commonly used when you want to contribute to a project or work on it independently. To clone a repository, you need the repository’s URL from GitHub. You can find the repository’s HTTPS URL on the repository page, if you click on the green Code button. Then use the terminal to navigate to the directory where you want to clone the repository. Then use the git clone command followed byh the URL of the remote repository.\n\ngit clone https://github.com/username/repository.git\n\nOnce the cloning process is complete, you will have a local copy of the Git repository in the directory you specified. You can now work with the files in the repository, make changes, and commit your modifications locally. Remember to use the appropriate Git commands like git add, git commit, and git push to manage your changes and synchronize them with the remote repository as needed. By default, git clone will create a reference to the remote repository called “origin”, so you do not have to use git remote to create a remote repository.\n\n\n7.6.5 Repository settings\nTo access the settings of a GitHub repository, go to the main page of the GitHub repository you want to configure and look for the “Settings” tab, usually located towards the right side of the repository’s navigation bar. Once you’re on the repository settings page, you’ll find various sections on the left sidebar that allow you to configure different aspects of the repository, such as “General,” “Branches,” or “Collaborators”.\nIn the “General” section you can, for example, rename your repository or default branch, change the repositories visibility or delete your repository.\nIn the “Collaborators” tab, it is possible to add accounts which can view or change your repository, even if it is private. For a detailed guide on the repository settings, you can check out the GitHub documentation.\n\n\n7.6.6 Fetching\nThe command git fetch is used to keep up-to-date with changes in the remote repository, without merging them into your local branch. Instead Git will update all your local tracking branches to the remote branch. To view your remote tracking branches, you can use git branch -r. After fetching, you can use git switch to review the changes on these branches. If you want to integrate the changes into you local branch, you can either now use git pull to directly update your local branch, or use git merge origin/branchname when you are on your local branch that you want to update.\ngit fetch is the safer option compared to git pull since it retrieves the changes from the remote repository without making any changes to your local working directory and staging area."
  },
  {
    "objectID": "chapters/github-intro.html#fa-download-pulling",
    "href": "chapters/github-intro.html#fa-download-pulling",
    "title": "7  GitHub",
    "section": "7.7  Pulling",
    "text": "7.7  Pulling\nThe git pull command is used to retrieve the latest changes from a remote repository and merge them into your local branch. Effectively git pull first runs git fetch (see above) to fetch the latest changes from the remote repository and then integrates these changes into the local branch, either using git merge (for details, see the branches chapter) or git rebase (for details, see the section on rebasing), depending on the configuration. In other words, git pull is a git fetch followed by a git merge. You can test this function by editing a file in your repository on GitHub and then use git pull to update your local file with the change made on GitHub. To edit a file, first click on it, in the repository. In the top-right corner of the file view, click on the pencil icon (“Edit this file”) to start editing. Make the necessary changes to the file in the in-browser editor. You can add, modify, or delete content as needed. As you make changes, GitHub automatically tracks your modifications in the editor, displaying them as “changes not staged for commit”. Provide a brief description of the changes in the “Commit changes” section at the bottom of the page.\nNow you can open up your terminal once again, and in the relevant directory use the git pull command to update your local file with the change made on GitHub.\n\ngit pull\n\nIf the pull is successful and there are no conflicts, you might see a message like:\n\nUpdating abc123..def456\nFast-forward file.txt | 2 +- 1 file changed, \n1 insertion(+), 1 deletion(-)\n\nThe first part of the message indicates the range of commits that were fetched and merged. In this example, it suggests that Git is updating from commit abc123 to commit def456. The “Fast-forward” message indicates that the local branch could be updated by moving the branch pointer forward, incorporating the new commits from the remote branch. This is possible when the local branch has not diverged from the remote branch, and there are no local commits that the remote branch does not have. The next line shows changes in the file file.txt. The 2 +- indicates that two lines were changed with one insertion and one deletion. The + represents an addition, and the - represents a deletion. The last line of the message provides a summary of the changes. It states that one file was changed, with one line inserted and one line deleted.\n\n\n\n\n\n\nBe aware which branch you are pulling!\n\n\n\n\n\nA regular git pull incorporates changes from a remote repository into the current branch. You can use the git branch command to verify which branch you are currently on (for details, see the branches chapter). If the current branch is behind the remote, then by default it will fast-forward the current branch to match the remote. If the current branch and the remote have diverged, the user needs to specify how to reconcile the divergent branches.\n\n\n\n\n\n\n\n\n\nCommon git pull command flags\n\n\n\n\n\n--ff-only: Perform a fast-forward merge only. If the remote branch has new changes, Git will only update your local branch if a fast-forward merge is possible. Otherwise, it will abort the pull.\n--no-commit: Perform the pull, but do not create an automatic commit after merging. This allows you to review the changes before committing manually.\n--verbose or -v: Provide more detailed output during the pull operation. This can be helpful for understanding the actions Git is performing.\n--squash: Instead of a regular merge or rebase, squash all the changes into a single commit. This can be useful for cleaning up the commit history or grouping related changes together.\n--autostash: Automatically stash local changes before pulling, then apply them back after the pull is complete. This is handy when you have changes in progress and want to pull in the latest changes from the remote branch."
  },
  {
    "objectID": "chapters/github-intro.html#fa-upload-pushing",
    "href": "chapters/github-intro.html#fa-upload-pushing",
    "title": "7  GitHub",
    "section": "7.8  Pushing",
    "text": "7.8  Pushing\nThegit push command is like a reversed git pull. It is used to upload your local commits to the remote repository. When you run git push, Git examines your local branch and its commits, and then pushes those commits to the corresponding branch on the remote repository. Git will verify if your local branch is up to date with the remote branch. If there are new commits on the remote branch that you don’t have locally, Git may reject the push and ask you to first pull the latest changes and merge them into your local branch to prevent overwriting or conflicts. It’s important to note that you need appropriate access and permissions to push to a remote repository. If you do not have write access, you won’t be able to push your changes. If you do not specify a branch, Git will push the one you are on in the moment.\n\ngit push origin main\n\nThis pushes your local commits to the remote repository called origin on the branch main. After a successful push, you will get a message like this:\n\nEnumerating objects: 17, done.\nCounting objects: 100% (17/17), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (12/12), done.\nWriting objects: 100% (12/12), 2.11 KiB | 2.11 MiB/s, done.\nTotal 12 (delta 9), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (9/9), completed with 5 local objects.\nTo https://github.com/username/repository.git\n   fb3efef..8f50685  main -&gt; main\n\nThe git push operation involves enumerating, compressing, and writing objects to the remote repository. The output indicates the progress of these steps, including delta compression, and concludes with a summary of the pushed branch and commit range. In this specific example, changes from the local main branch (commit fb3efef) were pushed to the remote main branch (commit 8f50685).\n\n\n\n\n\n\nCommon git push flags\n\n\n\n\n\n-u or --set-upstream: This flag is used to set the upstream branch for the current branch. It is typically used when pushing a branch for the first time to link the local branch with a remote branch.\n--force or -f: Force pushes the local main branch to the origin remote repository, overwriting any changes that may have been made to the main branch in the remote repository.\n--all: This flag pushes all branches to the remote repository.\n--dry-run: This flag simulates the push operation without actually pushing any data to the remote repository. It’s useful for checking what would be pushed.\nlocal_branch:remote_branch: This syntax allows you to push a specific local branch to a specific remote branch. Example: git push origin my_local_branch:my_remote_branch"
  },
  {
    "objectID": "chapters/github-intro.html#extra-features",
    "href": "chapters/github-intro.html#extra-features",
    "title": "7  GitHub",
    "section": "7.9 Extra features",
    "text": "7.9 Extra features\n\n7.9.1 Forking a repository\nForking a repository on GitHub allows you to create a personal copy of a project under your GitHub account.\nThis separate copy includes all files, commit history, and branches. Forking is commonly used when you want to contribute to a project without directly modifying the original repository. It enables you to make changes independently, create new branches, and push modifications to your forked repository. You can also submit changes to the original repository through pull requests.\nBy clicking the Fork button on a repository page, shown in Figure 7.3, you create an identical copy in your GitHub account.\n\n\n\nFigure 7.3: Screenshot of a repository with fork button\n\n\nOnce the forking process is complete, you can clone the repository to your local machine using the git clone command.\n\n\n7.9.2 Pull requests\nA pull request serves as a request for code review and integration into a project’s codebase, enabling collaboration and ensuring code quality before changes are merged. When dealing with pull requests, there are two main workflows: (1) a pull request from a forked repository, (2) a pull request from a branch within a repository.\n\n7.9.2.1 Pull request from a forked repository\nTo create a pull request after forking a repository and making changes follow these steps:\n\nNavigate to your forked repository on GitHub by visiting https://github.com//. Make sure you are on the branch that contains the changes you want to propose.\nClick on “Contribute” and then “Open Pull Request”.\nIn the pull request interface, choose the branch you made changes to in your fork (the “compare” branch) and the original repository’s branch where you want to propose your changes (the “base” branch).\nReview the changes.\nClick on the “Create Pull Request” button. Give your pull request a meaningful title and provide a description explaining the changes you made.\nSubmit the Pull Request.\n\nThe owner of the original repository can now approve the changes and thereby merge your repository’s branch into his.\n\n\n7.9.2.2 Pull request from a branch within a repository\nIn this scenario, contributors work directly within the main repository, creating a new branch for their changes. After completing the changes in the branch, they create a pull request from that branch to the main repository’s default branch (typically main or master). The workflow for this is the same as for opening a pull request for a forked repository.\n\n\n\n7.9.3 Git blame\nThe command git blame is useful when you are working on a project with multiple collaborators. It it used to show when and by whom, each line in a specific file was last changed. You have to specify a file when using it, for example:\n\ngit blame recipes.txt\n\nIf you are working solo on a text file, the result should not be very interesting. However if you collaborate on code, this command can be very useful (for blame or praise!)\n\n\n\n\n\n\nCommon git blame flags\n\n\n\n\n\n-L &lt;start&gt;,&lt;end&gt;: Specifies a line range to blame. For example, git blame -L 10,20 file.txt will blame lines 10 to 20 of the file.\n-M: Detects lines that were moved within the file and shows the original author’s information.\n-e: Shows the author’s email address in addition to their name.\n-t: Shows the commit timestamp for each line.\n\n\n\n\n\n7.9.4 Template repositories\nTemplate repositories, or repository templates, on GitHub enable you to create a repository that acts as a starting point for others. Instead of beginning a new project from scratch, you can use a template repository that already includes predefined files, directories, and even code. This simplifies the process of setting up new projects that share common characteristics or follow best practices. Template repositories have a “Use this template” button on a template repository page, as shown in Figure 7.4. Click it to provide a new, repository name and description, and then create the repository with your desired settings.\n\n\n\nFigure 7.4: Screenshot of a template repository\n\n\n\n\n7.9.5 Branch protection\nWhen using Git hosting platforms like GitHub or GitLab, it’s a good idea to enable branch protection rules for your critical branch(es), typically your main or master branch. By protecting it, you ensure that only reviewed and/or tested code gets merged into this branch. It also prevents accidental or unauthorized changes from being merged directly.\n\n7.9.5.1 How to protect the main branch on GitHub\n\nGo to your repository on GitHub and click on “Settings”.\nIn the left sidebar, select “Branches”.\nUnder “Branch protection rules,” click on “Add rule”.\nIn the “Branch name pattern” field, enter the name of your main branch.\nEnable the options you want to enforce for the main branch.\nClick “Create” to save the branch protection rule.\n\nA common option includes to require pull request reviews. This requires one or more approving reviews before changes can be merged. Optionally, you can enable other protections, such as preventing force pushes or deleting the branch.\n\n\n\n7.9.6 Alternatives to GitHub\nWhile GitHub is one of the most popular and widely used platforms for hosting Git repositories, there many alternatives to GitHub. Not only since it was bought by Microsoft in 2018, who subsequently used public repositories to train their AI tool Some prominent options include GitLab, Bitbucket, SourceForge or Codeberg.\nPotential disadvantages of GitHub include limited free private repositories, privacy concerns and a potential vendor lock in. On the other hand there are also advantages to GitHub like it’s relatively easy to use interface, the rich ecosystem and it’s extensive integration to third party tools."
  },
  {
    "objectID": "chapters/github-intro.html#acknowledgements",
    "href": "chapters/github-intro.html#acknowledgements",
    "title": "7  GitHub",
    "section": "7.10 Acknowledgements",
    "text": "7.10 Acknowledgements\n\n\n\n\nAuthors\nTitle\nWebsite\nLicense\nSource\n\n\n\n\nThe Turing Way Community (2022)\nThe Turing Way: A handbook for reproducible, ethical and collaborative research\n\nLicense: The process documents and data are made available under a . Software are made available under an . Website: \n\n\n\nChacon and Straub (2014)\nPro Git\n\nCC BY-NC\n\n\n\nGitHub (2023)\nGitHub Docs\n\nCC BY-NC 4.0"
  },
  {
    "objectID": "chapters/github-intro.html#cheatsheet",
    "href": "chapters/github-intro.html#cheatsheet",
    "title": "7  GitHub",
    "section": "7.11 Cheatsheet",
    "text": "7.11 Cheatsheet\n\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\ngit clone\nCreates a local copy of a repository\n\n\ngit pull\nFetches and merges the latest changes from a remote repository into your current branch\n\n\ngit fetch\nUpdates your remote tracking branches\n\n\ngit push\nUpload your local commits to a remote repository\n\n\ngit blame\nshows the authorship and commit information of each line in a file\n\n\ngit remote\nmanages remote repositories\n\n\n\n\n\n\n\n\n\nChacon, Scott, and Ben Straub. 2014. Pro Git. Apress. https://doi.org/10.1007/978-1-4842-0076-6. License: CC BY-NC. Source: https://github.com/progit/progit2. Website: https://git-scm.com/book/en/v2.\n\n\nGitHub. 2023. GitHub Docs. GitHub. https://docs.github.com/en. License: CC BY-NC 4.0. Source: https://docs.github.com/en.\n\n\nThe Turing Way Community. 2022. The Turing Way: A Handbook for Reproducible, Ethical and Collaborative Research. Zenodo. https://doi.org/10.5281/zenodo.3233853. License: The process documents and data are made available under a CC BY 4.0 license. Software are made available under an MIT license. Website: https://the-turing-way.netlify.app/."
  },
  {
    "objectID": "chapters/project-management.html#communication",
    "href": "chapters/project-management.html#communication",
    "title": "8  Project Management",
    "section": "8.1 Communication",
    "text": "8.1 Communication\nCommunication in science often happens across a diversity of communication channels, including email, messenger apps like Slack, Mattermost or Discord and Project Management Software like Trello. As illustrated in Figure 8.1 this can often lead to uncertainty about how to communicate about a project most effectively with whom.\n\n\n\nFigure 8.1: “Chat Systems” by xkcd (xkcd.com). Used under a Creative Commons Attribution-NonCommercial 2.5 (CC BY-NC 2.5) licence (direct link)."
  },
  {
    "objectID": "chapters/project-management.html#overview",
    "href": "chapters/project-management.html#overview",
    "title": "8  Project Management",
    "section": "8.2 Overview",
    "text": "8.2 Overview\nThe basic idea is to manage your project next to your work (your code, your data) via a repository hosting service, in this case GitHub.\n\nDiscuss and plan your work in Issues\nPropose changes to code or data using pull requests\nManage access to your code and data with detailed permissions and roles\nAdd documentation to your repository or in a separate wiki"
  },
  {
    "objectID": "chapters/issues.html#logistics",
    "href": "chapters/issues.html#logistics",
    "title": "9  Issues",
    "section": "9.1 Logistics",
    "text": "9.1 Logistics\n\n9.1.1 Learning objectives\n💡 Understand the purpose of GitHub Issues: 💡 Master the creation and management of Issues 💡 Collaborative problem solving with Issues: 💡 Practicing with a practical exercise"
  },
  {
    "objectID": "chapters/issues.html#overview",
    "href": "chapters/issues.html#overview",
    "title": "9  Issues",
    "section": "9.2 Overview",
    "text": "9.2 Overview\nGitHub is famous for helping people work together on code. But to work well together, you need to talk and organize tasks. GitHub makes this easy with a feature called GitHub Issues. This chapter shows you how to use GitHub Issues for organizing and following a task.\nGitHub issues are a powerful and often used feature of the platform. Think of the issues for a project as its bug tracker. Even for projects that are not pure software development, we can co-opt this machinery to organize our to-do list more generally.\nThe basic unit is an issue and you can interact with one in two ways. First, issues are integrated into the project’s web interface on GitHub, with a set of options for linking to project files and incremental changes. Second, issues and their associated comment threads appear in your email, just like regular messages (this can, of course, be configured). The result is that all correspondence about a project comes through your normal channels, but is also tracked inside the project itself, with good navigability and search capabilities. For software, issues are used to track bugs and feature requests. In a data analysis project, you might open an issue to flesh out a specific sub-analysis or to develop a complicated figure. In a course, we could use them to manage homework submission, marking, and peer review.\nIssues can be assigned to specific people and they can be labeled, for example, bug, simulation-study, or final-exam. Coupled with the ability to cross-link issues and the project files or file changes, you have the power to document why things have happened in the past and to organize what needs to happen in the future."
  },
  {
    "objectID": "chapters/issues.html#benefits-of-issues",
    "href": "chapters/issues.html#benefits-of-issues",
    "title": "9  Issues",
    "section": "9.3 Benefits of issues",
    "text": "9.3 Benefits of issues\nOrganized research tasks\nIssues help scientists keep track of their research tasks, experiments, and observations in an organized and structured manner.\nEasier collaboration\nIssues facilitate seamless collaboration among scientists, allowing them to work together on experiments, data analysis, and research projects regardless of geographical locations.\nClear Communication\nScientists can use issue descriptions and comments to communicate their findings, hypotheses, and insights, fostering a transparent and clear dialogue within their research teams.\nStructured Problem Solving\nIssues enable scientists to break down complex research problems into smaller, manageable tasks, making it easier to solve challenges step by step.\nDocumentation and Records\nBy creating issues, scientists create a comprehensive record of their research progress, methodologies, and results, providing valuable documentation for future reference and publication.\nTask prioritization\nResearchers can assign labels and milestones to issues, helping them prioritize tasks, experiments, and analyses based on urgency and importance.\nTraceable Changes\nScientists can track changes made to issues, allowing them to see the evolution of ideas, experiments, and conclusions over time.\nError Tracking and Resolution\nIssues are ideal for identifying, documenting, and resolving errors, ensuring accuracy and reliability in scientific experiments and data analysis."
  },
  {
    "objectID": "chapters/issues.html#features---overview",
    "href": "chapters/issues.html#features---overview",
    "title": "9  Issues",
    "section": "9.4 Features - Overview",
    "text": "9.4 Features - Overview\n\nYou can organize issues by labels, for example bug.\nYou can assign responsibility for an issue to a team member.\nYou can add the issue to a project milestone.\nIssues can be combined in Issue boards\nIssues can be sorted (by due date, label priority, etc.)\nIssues can be transferred between repositories\nIssues can be crosslinked e.g., in commit messages: git commit -m \"add missing data, close #37\"\nIssues can send automated email notifications\nIssues can be exported and archived\n\n(more details here)"
  },
  {
    "objectID": "chapters/issues.html#step-by-step",
    "href": "chapters/issues.html#step-by-step",
    "title": "9  Issues",
    "section": "9.5 Step-by-step",
    "text": "9.5 Step-by-step\n\n9.5.1 Prerequisites\nTo make an issue, you need a repository. You have the option to use a repository you already have permission to write in, or you can create a new repository. The repository must have issues enabled. If you want more guidance on making a repository, refer to the chapter on first steps with Git. If you need help with turning on issues in case they’re currently turned off in your repository, take a look at the section titled “disabling issues”.\n\n\n9.5.2 Opening a blank issue\nFirst, create a new issue. There are multiple ways to create an issue. You can choose the most convenient method for your workflow. This example will create an issue from a repository on GitHub. For more information about other ways to create an issue, see the section “Creating an issue” in the GitHub documentation.\n\nOn GitHub, navigate to the main page of the repository. For example, the main page of the GitHub repository of this guide can be found here.\nUnder the repository name, click  Issues (see Figure 9.1).\nOn the following page, click the green New issue button.\n\n\n\n\nFigure 9.1: “Repo Tabs Issues” taken from the GitHub Docs (docs.github.com). The GitHub product documentation in the assets, content, and data folders are licensed under a Creative Commons Attribution 4.0 International (CC BY 4.0) licence (direct link).\n\n\n\n\n\n\n\n\nTry it!\n\n\n\nOpen a new Issue in the repository of this online guide (requires a GitHub account).\n\n\nIf the repository uses issue templates (details below), click the green Get started button next to the type of issue you’d like to open (see Figure 9.2). If the kind of issue you want to create isn’t listed among the choices, simply click on “Open a blank issue”.\n\n\n\nFigure 9.2: “Blank Issue Link” taken from the GitHub Docs (docs.github.com). The GitHub product documentation in the assets, content, and data folders are licensed under a Creative Commons Attribution 4.0 International (CC BY 4.0) licence (direct link).\n\n\n\n\n9.5.3 Filling in issues\n\nChoose a descriptive title for your issue. The title should convey what the issue is about.\nInclude a description that explains why you’re creating this issue and any information that might help to solve it. For instance, if it’s about a bug, explain how to reproduce the bug, what you expected to happen, and what actually happened. You have the option to use Markdown to add special formatting, links, emojis, and other things. For more information, see the section “Writing on GitHub” in the GitHub documentation.\nYou can also attach files or images by dropping, selecting or pasting them into the issue.\nWhen you’re done, click the green Submit new issue button. You can still edit any of the fields after creating the issue.\n\nOn the right-hand side, you’ll see options to assign someone to the issue, add labels, add the issue to projects, or add the issue to milestones. We’ll explore these features in more detail below. You can also set all of these options after you submitted the issue.\n\n\n\nFigure 9.3: “Issue Title Body” taken from the GitHub Docs (docs.github.com). The GitHub product documentation in the assets, content, and data folders are licensed under a Creative Commons Attribution 4.0 International (CC BY 4.0) licence (direct link).\n\n\n\n\n9.5.4 Submitting your issue\nClick Submit new issue to create your issue. You can edit any of the above fields after creating the issue. Your issue has a unique URL that you can share with team members, or reference in other issues or pull requests."
  },
  {
    "objectID": "chapters/issues.html#features-of-issues",
    "href": "chapters/issues.html#features-of-issues",
    "title": "9  Issues",
    "section": "9.6 Features of Issues",
    "text": "9.6 Features of Issues\n\n9.6.1 Editing issues\nYou can always edit the title and description of your issue after you submitted the issue.\nOn the right side of the title, you’ll notice an Edit button. This comes in handy if you ever need to change the title of the issue as the discussion evolves over time or you want to make the title more descriptive. Even if you edit the issue, the issue number will always remain the same.\nWhat if you decide to modify the main text of your issue or a comment after you’ve submitted it? No problem at all. Once your issue is submitted, a blue bar will appear at the top of your comment. This bar displays your username and the comment’s date. Toward the right side of this blue bar, you’ll notice three dots (). If you click on those dots, you’ll find the option to edit your comment.\n\n\n9.6.2 Communicating in issues\n\n9.6.2.1 Commenting issues\nThe major benefit of issues is that they serve as platforms for conversations with yourself and others. Once an issue has been submitted, you can continue the conversation by adding more comments within that issue. For example, you might ask a question, and someone else could respond with a solution or idea. They might even include links to related issues or external resources that could be helpful.\n\n\n9.6.2.2 Mentioning people\nYou can also mention people in issue comments using the @ symbol. Anyone who is part of the repository will automatically receive email notifications about new comments. Tagging specific users with the @ symbol will also send them an email, making it a useful way to involve individuals who might not already be closely following the entire repository. In a public repository, you can tag any GitHub user, while in a private repository, they need to have appropriate permissions.\nTo connect related issues in the same repository, you can type # followed by part of the issue title and then clicking the issue that you want to link.\n\n\n\nFigure 9.4: “Issue Comment” taken from the GitHub Docs (docs.github.com). The GitHub product documentation in the assets, content, and data folders are licensed under a Creative Commons Attribution 4.0 International (CC BY 4.0) licence (direct link.\n\n\n\n\n9.6.2.3 Timeliness of issues\nWhenever a new comment is added to the issue thread, a new date will be displayed in the blue bar at the top of the issue. This provides a convenient way to assess the timeliness of ongoing discussions.\n\n\n9.6.2.4 Referencing comments\nAnother useful feature is the ability to click on the date of an issue’s comment, causing the URL in your browser to update. This updated URL lets you link directly to a particular comment in the issue thread. This is very handy when you want to share a specific comment with someone, saving them the trouble of scrolling. Alternatively you can also you can also click on the three dots on the right of the blue comment header () and select the option to copy the link for that specific comment.\n\n\n9.6.2.5 Using Markdown syntax\nGitHub allows you to use Markdown syntax in your issue comments, which provides an easy way of formatting text. For example, you can create headers using the # symbol (# Header 1, ## Header 2, and so on). For a complete overview of Markdown syntax, you cn check out this GitHub documentation.\n\n\n\n9.6.3 Adding a task list\nOne way of using Markdown syntax in GitHub issues, is creating a task list. It can be helpful to divide big problems into smaller tasks or group related issues together. A task list is a set of tasks that each appear on a separate line with a clickable checkbox. You can select or deselect the checkboxes to mark the tasks as complete or incomplete. You can make a task list by putting - [ ] in front of list items. You can refer to other issues using their number or URL. You can also use plain text to keep track of tasks without issues and turn them into issues later if needed. For more information, see the section “About task lists” in the GitHub documentation.\n\n\n\nFigure 9.5: “Issue Task List Raw” taken from the GitHub Docs (docs.github.com). The GitHub product documentation in the assets, content, and data folders are licensed under a Creative Commons Attribution 4.0 International (CC BY 4.0) licence (direct link).\n\n\n\n\n9.6.4 Adding labels\nAdd a label to categorize your issue. You can apply labels to an issue on the right side of the issue thread or when creating a new issue (see Figure 9.6). For example, you could apply a bug label and a good first issue label to indicate that an issue is a bug that a first-time contributor could tackle. Users can filter issues by label to find all issues that have a specific label. For example, you can find a list of issues for this repo here. For information, see the section “Managing labels” in the GitHub documentation.\n\n\n\nFigure 9.6: “Issue With Label” taken from the GitHub Docs (docs.github.com). The GitHub product documentation in the assets, content, and data folders are licensed under a Creative Commons Attribution 4.0 International (CC BY 4.0) licence (direct link).\n\n\n\n9.6.4.1 Creating a label\nAnyone with write access to a repository can create a new label or customize existing labels.\n\nOn GitHub, navigate to the main page of the repository.\nUnder the repository name, click  Issues or  Pull requests.\nAbove the list of issues or pull requests, click Labels.\nTo the right of the search field, click New label.\nUnder “Label name”, type a name for your label.\nUnder “Description”, type a description to help others understand and use your label.\nOptionally, to customize the color of your label, edit the hexadecimal number, or, for another random selection, click .\nTo save the new label, click Create label.\n\n\n\n\n9.6.5 Adding milestones\nYou can add a milestone to track the issue as part of a higher-order project target. A milestone will show the progress of the issues as the target date approaches. For more information, see the section “About milestones” in the GitHub documentation.\n\n\n\nFigure 9.7: “Issue Milestone” taken from the GitHub Docs (docs.github.com). The GitHub product documentation in the assets, content, and data folders are licensed under a Creative Commons Attribution 4.0 International (CC BY 4.0) licence (direct link).\n\n\n\n\n9.6.6 Assigning the issue\nTo clearly communicate responsibility for an issue, you can assign the issue to a team member of your project or organization.\n\n\n\nFigure 9.8: “Issue Assignees” taken from the GitHub Docs (docs.github.com). The GitHub product documentation in the assets, content, and data folders are licensed under a Creative Commons Attribution 4.0 International (CC BY 4.0) licence (direct link.\n\n\n\n\n9.6.7 Adding projects\nYou can add the issue to an existing project and populate metadata for the project.\n\n\n\nFigure 9.9: “Issue Project” taken from the GitHub Docs (docs.github.com). The GitHub product documentation in the assets, content, and data folders are licensed under a Creative Commons Attribution 4.0 International (CC BY 4.0) licence (direct link.\n\n\nLearn more about projects\n\n\n9.6.8 Issue templates\nGitHub issue templates are predefined formats for creating new issues in a repository. They help with the process of opening new issues by providing a structure for the information that contributors should include when reporting a bug, requesting a feature, or any other type of issue. You can create multiple templates for different types of issues, such as bug reports, feature requests, or general inquiries Each template is a Markdown file (.md) with predefined sections, such as description, steps to reproduce, expected behavior, actual behavior, etc.\nWhen a user opens a new issue, GitHub automatically displays the template content in the issue description field. Users can then fill in the required information based on the template.\nTo create a new template follow these steps:\n\nNavigate to the repository on GitHub.\nClick on the Settings tab.\nUnder the General tab, in the Features section, find the Button labeled: Set up templates\n\nHere you will find predefined templates by GitHub, but also the option to create a new issue template from scratch.\n\n\n9.6.9 Linking to an issue\nYou can link to an issue directly from the command line! You can link a pull request, branch or commit to an issue to show that a fix is in progress and to automatically close the issue when the pull request, branch or commit is merged. For example:\n\ngit commit -m \"Add a new file. close #7\" \n\nThis closes issue number 7 of your repository. (if committed to the default branch)\n\n9.6.9.1 Linking to an issue using a keyword\nYou can link to an issue by using a supported keyword in the pull request’s description or in a commit message. The pull request or commit must be on the default branch. Possible keywords are:\n\nclose\ncloses\nclosed\nfix\nfixes\nfixed\nresolve\nresolves\nresolved\n\nFor further information, see this chapter of the GitHub docs.\n\n\n\n9.6.10 Disabling issues\nIf you want to disable issues for your repository, you can easily do this in your repository’s settings.\n\nNavigate to the repository on GitHub.\nClick on the Settings tab.\nUnder the General tab, in the Features section, find the checkbox related to issues.\nUncheck or disable the issues feature."
  },
  {
    "objectID": "chapters/issues.html#strategies-for-issues",
    "href": "chapters/issues.html#strategies-for-issues",
    "title": "9  Issues",
    "section": "9.7 Strategies for Issues",
    "text": "9.7 Strategies for Issues\nMost repositories on GitHub have Issues. But should you use Issues in every project? It’s helpful to think about why you’re using them.\n\n9.7.1 Issues for bug reporting and feature requests\nIf you’re using Issues for typical things like reporting and fixing problems in code or adding new features, it’s a good idea to keep the project open to the public. You can have all the discussions related to that project inside it.\n\n\n9.7.2 Issues for internal conversations\nIf you’re using Issues for internal conversations (for example, discussions within a research group), you might want to keep the repository private at first. But here’s something to consider: Do you plan to make the project public when you’re ready to share your research with the world? Changing a project from private to public (or the other way around, which you can do in the project’s settings) not only makes the code and files public but also all the discussions in the Issues. That’s okay, but it adds some things to think about in terms of what’s being talked about in those discussions."
  },
  {
    "objectID": "chapters/issues.html#further-reading",
    "href": "chapters/issues.html#further-reading",
    "title": "9  Issues",
    "section": "9.8 Further Reading",
    "text": "9.8 Further Reading\n\nGitHub Docs: Tracking your work with issues\nGitHub for project management - openscapes"
  },
  {
    "objectID": "chapters/issues.html#acknowledgements",
    "href": "chapters/issues.html#acknowledgements",
    "title": "9  Issues",
    "section": "9.9 Acknowledgements",
    "text": "9.9 Acknowledgements\n\n\n\n\nAuthors\nTitle\nWebsite\nLicense\nSource\n\n\n\n\nLowndes and Robinson (2022)\nOpenscapes Champions Lesson Series\n\nCC BY 4.0\n\n\n\n\n\n\n\n\n\nLowndes, Julia Stewart, and Erin Robinson. 2022. “Openscapes Champions Lesson Series,” December. https://doi.org/10.5281/ZENODO.7407247. License: CC BY 4.0. Source: https://github.com/Openscapes/series. Website: https://openscapes.github.io/series/."
  },
  {
    "objectID": "chapters/gui.html#logistics",
    "href": "chapters/gui.html#logistics",
    "title": "10  Graphical User Interfaces",
    "section": "10.1 Logistics",
    "text": "10.1 Logistics\n\n10.1.1 Learning objectives\n💡 Understanding the benefits of Git GUIs 💡 Exploring different GUIs 💡 Exploring branch management in a GUI 💡 Practicing with a practical exercise\n\n\n10.1.2 Exercises\n\nInstall GitKraken or GitHub Desktop\nLogin to the client using your GitHub Account and view your recipe repository\nAdd two recipes in the same file, stage and commit only one of them, using a GUI\nOpen your recipe repository in RStudio, edit a file and commit your changes"
  },
  {
    "objectID": "chapters/gui.html#introduction-to-git-guis",
    "href": "chapters/gui.html#introduction-to-git-guis",
    "title": "10  Graphical User Interfaces",
    "section": "10.2 Introduction to Git GUIs",
    "text": "10.2 Introduction to Git GUIs\nGraphical User Interfaces (GUIs) offer a more user-friendly way to work with Git compared to the command-line, using visuals instead of text commands. They show your project’s history, branches, and changes in a more colorful and easy-to-understand manner.\nThey make Git seem less scary and more accessible to everyone, helping you manage your code, without the hassle of remembering complex commands. While Git GUIs offer a user-friendly approach to version control, they come with a few limitations. One notable drawback is their reduced flexibility compared to the command-line interface. GUIs are designed to simplify common tasks, but more advanced or customized operations may be challenging to perform within a graphical environment. Despite their user-friendly design, understanding the underlying Git concepts and the specific workflow of a GUI is still very important.\nAs this book primarily emphasizes teaching Git through the command line interface, it will only feature a short introduction, not extensive tutorials for GUI tools."
  },
  {
    "objectID": "chapters/gui.html#popular-git-guis",
    "href": "chapters/gui.html#popular-git-guis",
    "title": "10  Graphical User Interfaces",
    "section": "10.3 Popular Git GUIs",
    "text": "10.3 Popular Git GUIs\nThere is a wide variety of Git GUIs available, each of them offers its own set of features and benefits, catering to different preferences and workflows. In this section, we will focus on GitHub Desktop and GitKraken, although many more options exist. For a more comprehensive overview, you can explore the official Git website.\n\n10.3.1  GitHub Desktop\n\n10.3.1.1 Download\nGitHub Desktop is a desktop application developed by GitHub. It is free to download for macOS and Windows on the GitHub website. There is currently no official version available for Linux.\n\n\n10.3.1.2 Setup\nAfter you download and install the program, you will be required to log in using your GitHub account. Once logged in, you can select a repository to work on, either from GitHub or a local repository (as shown in Figure 10.1).\n\n\n\nFigure 10.1: Screenshot of GitHub Desktop. Showing the start screen.\n\n\nOnce you’ve picked a repository to work on, GitHub Desktop shows you the history of that repository in a visual way. You’ll see branches, commits, and tags displayed on a timeline in chronological order. This setup makes it easy to dive into version control tasks like handling branches, commits, changes, and pull requests.\n\n\n\nFigure 10.2: Screenshot of GitHub Desktop. Showing an example repository.\n\n\nFor a more extensive GitHub Desktop tutorial, you can check out the GitHub documentation.\nIn general, GitHub Desktop’s primary advantage lies in its integration with github.com. The interface is simple and user-friendly. A significant drawback of relying on GitHub Desktop is its strong tie to the GitHub platform. This dependency can be limiting if you’re looking to work with repositories on alternative Git hosting services.\n\n\n\n10.3.2  GitKraken\n\n10.3.2.1 Download\nGitKraken is a third-party program and another very popular git GUI client for Windows, macOS and Linux. You can download it from the official website. Normally, GitKraken only offers a free seven-day trial period. However, if you are a student, you can get it for free, through the GitHub Student Developer Pack.\n\n\n10.3.2.2 Setup\nAfter downloading, you either begin to track a local repository or log in to a hosting website like GitHub (but also to other ones) and work with your repositories from there.\n\n\n\nFigure 10.3: Screenshot of GitKraken. Showing the start screen.\n\n\nAfter choosing a repository to track, you will see a visual representation of the commit history, branches, and commits.\n\n\n\nFigure 10.4: Screenshot of GitKraken. Showing an example repository.\n\n\nJust like with GitHub Desktop, your are able to manage your branches, push to or pull from remote branches and commit changes through GitKraken. For an extensive tutorial, you can check out the GitKraken Client Documentation."
  },
  {
    "objectID": "chapters/gui.html#use-cases-for-git-guis",
    "href": "chapters/gui.html#use-cases-for-git-guis",
    "title": "10  Graphical User Interfaces",
    "section": "10.4 Use cases for Git GUIs",
    "text": "10.4 Use cases for Git GUIs\nYou can perform a wide range of basic and advanced Git operations with GUIs. Here, we present a few Git use cases where the use of a GUI can be particularly helpful as compared to doing the same thing from the command-line.\n\n10.4.1 Partial commits\nOne useful feature of Git GUIs is the ability to easily commit only specific parts or “hunks” of code from within a file. This is particularly handy when you’ve made changes to different parts of a file and want to commit them separately to group related changes together and keep a clean commit history. With a Git GUI, you can easily select the lines or blocks of code you want to include in a commit, stage them, and then commit just those changes.\nFor example, to do this in GitKraken, change a file, then click on your last commit in the GitKraken GUI (see Figure 10.5). You will see a list of unstaged files with changes. After you click on one, you will see your additions highlighted green and your deletions highlighted red. If you hover over the changed lines you will see the option to “Stage this Line”. To stage multiple lines at the same time, highlight the ones you want to stage, do a right-click and select “Stage selected lines”. You can also stage the whole file or “hunk” and unstage specific changes.\n\n\n\nFigure 10.5: Screenshot of Rstudio. Showing staging an example file.\n\n\n\n\n\n\n\n\nWhat is a hunk?\n\n\n\n\n\nIn Git, a “hunk” refers to a distinct block of code changes within a file. It represents a cohesive set of added, modified, or deleted lines in a specific location. Git automatically divides changes into hunks to facilitate easier review, selective staging, and conflict resolution during version control operations.\n\n\n\nYou can also create a partial commit in GitHub Desktop. For details, see the GitHub Desktop documentation.\n\n\n10.4.2 Merge conflict resolution\nGit GUIs make resolving merge conflicts more intuitive. When conflicts arise due to incompatible changes made in different branches, a GUI helps you identify conflicting lines side by side. You can then select which changes to keep, discard, or modify. The graphical representation simplifies the process.\nTo merge two branches in GitKraken, you can either drag and drop one branch onto another branch or use the right-click menu of the branch you want to merge in. If a merge conflict occurs you will see a list of conflicted files. When you click on a file, it will show you a side-by-side comparison of the conflicting changes, allowing you to choose which lines to keep. After resolving all conflicts, you can continue the merge process by completing the merge commit.\n\n\n\nFigure 10.6: Screenshot of Gitkraken. Showing an example merge conflict."
  },
  {
    "objectID": "chapters/gui.html#git-integration-in-rstudio",
    "href": "chapters/gui.html#git-integration-in-rstudio",
    "title": "10  Graphical User Interfaces",
    "section": "10.5 Git Integration in RStudio",
    "text": "10.5 Git Integration in RStudio\nEven though it is not a complete GUI, RStudio Desktop, the most popular development environment for  programming, offers Git integration to simplify version control within your projects.\nWhen opening a new RStudio project, you can choose to “Checkout a project from a version control project”. After choosing this, you have the option to clone a Git repository, for example from Github. RStudio will then download the files and you can start to edit them in RStudio.\n\n\n\nFigure 10.7: Screenshot of Rstudio. Showing the options for loading a repository.\n\n\nAfter cloning a remote repository or opening a local Git repository folder, you can do things like committing, pushing or switching branches using buttons in Rstudio, instead of using the command line. The Git tab within the upper right panel enables you to stage, commit, push and pull changes. The branches tab in the Git pane displays a list of available branches, making it straightforward to switch between them.\n\n\n\nFigure 10.8: Screenshot of Rstudio. Showing an example repository.\n\n\nClicking “Commit” will open up a window, where you see your changes marked with colors. You also easily write commit message and have the option to amend your last command. It is also possible to stage specific lines.\n\n\n\nFigure 10.9: Screenshot of Rstudio. Showing an example commit.\n\n\nFor a more comprehensive tutorial on using Git in Rstudio you can check out the “Happy Git and GitHub for the useR” by Jenny Bryan.\nYou should keep in mind that while the RStudio GUI simplifies many Git tasks, it lacks the flexibility and customization of using the command line. But considering you can also open a command line tab in RStudio, the GUI might be a help in your workflow, if you work on a  project and track it using Git."
  },
  {
    "objectID": "chapters/gui.html#acknowledgements-further-reading",
    "href": "chapters/gui.html#acknowledgements-further-reading",
    "title": "10  Graphical User Interfaces",
    "section": "10.6 Acknowledgements & further reading",
    "text": "10.6 Acknowledgements & further reading\n\n\n\n\nAuthors\nTitle\nWebsite\nLicense\nSource\n\n\n\n\nBryan (2023)\nHappy Git and GitHub for the useR\n\nCC BY-NC 4.0\n\n\n\nGitHub (2023)\nGitHub Docs\n\nCC BY-NC 4.0\n\n\n\n\n\n\n\n\n\nBryan, Jenny. 2023. Happy Git and GitHub for the useR. Jenny Bryan. https://happygitwithr.com. License: CC BY-NC 4.0. Source: https://github.com/jennybc/happy-git-with-r. Website: https://happygitwithr.com/.\n\n\nGitHub. 2023. GitHub Docs. GitHub. https://docs.github.com/en. License: CC BY-NC 4.0. Source: https://docs.github.com/en."
  },
  {
    "objectID": "chapters/intermediate-commands.html#logistics",
    "href": "chapters/intermediate-commands.html#logistics",
    "title": "11  Stashing and Co.",
    "section": "11.1 Logistics",
    "text": "11.1 Logistics\n\n11.1.1 Learning objectives\nIn this chapter, you will learn more advanced operations in Git including:\n💡 Stashing and retrieving changes 💡 Undoing changes and removing files 💡 Rebasing and cherry-picking\n\n\n11.1.2 Exercises\n\n11.1.2.1 Stashing\n\nCreate a new branch called feature/stash-exercise.\nMake changes to two different files in your project directory.\nStash your changes without adding a message.\nUse git status to verify that your working directory is clean.\nApply the stash to your working directory and verify that your changes are restored.\n\n\n\n11.1.2.2 Reverting\n\nCreate a new branch called feature/revert-exercise.\nMake changes and commit these to your file.\nUse git revert to revert the most recent commit, specifying its hash.\n\n\n\n11.1.2.3 Rebasing\n\nCreate a new branch called feature/rebase-exercise.\nMake three commits with minor changes on the feature/rebase-exercise branch.\nSwitch to the main branch and make additional changes.\nRebase the feature/rebase-example branch onto the main branch using git rebase main.\nCheck the commit history with git log to see the updated order of commits."
  },
  {
    "objectID": "chapters/intermediate-commands.html#stashing-changes-for-later-use",
    "href": "chapters/intermediate-commands.html#stashing-changes-for-later-use",
    "title": "11  Stashing and Co.",
    "section": "11.2 Stashing changes for later use",
    "text": "11.2 Stashing changes for later use\ngit stash is a valuable command in Git that allows you to save your current changes temporarily without committing them. This is useful when you need to switch branches or work on something else without creating a commit for unfinished work. For example, when you’re working on a feature and you need to switch to a different task quickly or your work gets interrupted unexpectedly, you may not want to commit your unfinished changes. When you run git stash, Git stores the changes in your working directory and staged changes in a special stash commit. The working directory is then reverted to the last committed state, providing a clean slate for your next task.\n\n11.2.1 Stashing changes\nTo demonstrate the usefulness of git stash, you can edit one or more files in your repository, stage or don’t stage your changes, but don’t commit them. Now use git status to look at your working directory.\n\ngit status\n\nYo should get an output similar to:\n\nChanges to be committed:\n  (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n\n    modified:   example.html\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   example.txt   \n\nIn this example, there are changes on two tracked files, one staged and one not staged, that we want to stash. Just like when committing, it is possible to add a message when stashing using the -m flag. It makes sense to add a message because it serves as a reminder of what changes were stashed, making it easier to identify the purpose of the stash when you later list or apply stashes.\n\ngit stash -m \"feature X WIP\"\n\nYou should get an output similar to:\n\nSaved working directory and index state On feature: \"feature X WIP\"\n\nYou can now use git status to look at your working directory again and should see an output similar to:\n\nOn branch main\nnothing to commit, working directory clean\n\nNow you can switch branches and work on something else or stop working on the project altogether.\n\n\n11.2.2 Retrieving stashed changes\nIf you want to reapply your changes, you can use git stash apply. To look at all your stored stashes, you can use git stash list.\n\ngit stash list\n\nYou should get an output similar to:\n\nstash@{0}: On feature: feature X WIP\n\nAll of your stored stashes should show up, with the most recent on top. Every stash should have a number, applied chronologically. git stash apply automatically applies your latest stash. You can also specify a stored stash, for example git stash apply stash@{3}\n\ngit stash apply stash@{3}\n\nYou should get an output similar to:\n\nOn branch main\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;.. .\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n    modified:   example.html\n    modified:   example.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\nThe changes made in your stored stashed are now applied again in your working directory. Note that already staged files are not automatically staged again.\n\n\n\n\n\n\nCommon git stash flags\n\n\n\n\n\ngit stash -m \"message\": Save your changes in a stash with a message.\ngit stash apply stash@{n}: Apply the changes from the specified stash (identified by its index n) to your working directory.\ngit stash pop stash@{n}: Apply the changes from the specified stash (identified by its index n) to your working directory and remove the stash from the stash list.\ngit stash list: List all the stashes you have created, showing their reference numbers and stash messages.\ngit stash drop stash@{n}: Remove the specified stash (identified by its index n) from the stash list.\ngit stash branch &lt;branchname&gt;: Create a new branch named &lt;branchname&gt; from the commit where you originally stashed your changes and apply the stash to the new branch.\ngit stash show stash@{n}: Show the diff of the changes stored in the specified stash (identified by its index n)."
  },
  {
    "objectID": "chapters/intermediate-commands.html#removing-changes-or-files",
    "href": "chapters/intermediate-commands.html#removing-changes-or-files",
    "title": "11  Stashing and Co.",
    "section": "11.3 Removing changes or files",
    "text": "11.3 Removing changes or files\n\n\n\n\n\n\nBe careful about data loss!\n\n\n\nThis section introduces Git commands that may delete changes in your repository beyond recovery. Especially if you apply them for the first time, take your time and only execute a command if you are certain about its consequences. Better yet, experiment with these commands in a separate test repository, not in a repository where you keep your most important work.\n\n\n\n11.3.1 Discarding changes in the working directory\nSometimes you might want to revert files back to the state of your last commit. For example, this can be useful when you realize that the recent changes you made to a file have introduced an error. You can use git restore to discard changes in the working directory and revert the files to the state they were in when you last committed them.\n\ngit restore &lt;file&gt;\n\n\n\n\n\n\n\nBe careful about data loss!\n\n\n\nPlease note that it may not be possible to undo the restore, since Git does not keep track of the state before the restore operation!\n\n\nIt is also possible to revert all files in your repository to the state of your last commit using:\n\ngit restore .\n\n\n\n11.3.2 Unstaging files\nYou can also use git restore with the --staged flag to unstage files, you have previously added to the staging area. This can be useful when you accidentally staged files or want to reorganize your commit.\n\ngit restore --staged &lt;file&gt;\n\nOr:\n\ngit restore --staged .\n\n\n\n11.3.3 Deleting files\nIf you want to delete files from your computer and your Git repository, you can use the git rm command. This command removes files from your working directory and automatically stages this change for your next commit. The workflow would go like this:\n\ngit rm &lt;FILE&gt;\n\n\ngit commit -m \"Delete file &lt;FILE&gt;\"\n\n\n\n\n\n\n\nCommon git rm flags\n\n\n\n\n\n-f or --force: This flag forces the removal of files, even if they are modified.\n-r or --recursive: Use this flag to remove directories and their contents.\n--cached: This flag removes files from the staging area but preserves them in the working directory.\n-n or --dry-run: With this flag, Git will only show you what would be removed but will not actually perform the deletion.\n\n\n\n\n\n11.3.4 “Untracking” files\nSometimes, you may have files, in your Git repository that you no longer want to track or include in future commits, but want to keep in your local filesystem. It makes sense to include these files in a .gitignore file, as discussed in the chapter on first steps with Git. You could also use git rm in combination with the --cached flag.\n\ngit rm --cached &lt;file&gt;\n\n\n\n11.3.5 Reverting commits\nThe git revert command is used to create a new commit that undoes the changes made in a previous commit. It’s a way to safely reverse the effects of a specific commit without actually removing that commit from the commit history. It requires specifying the commit hash you want to revert. To look at the hashes of your commits, you can use the git log command. If you have a specific commit that you want to revert, you would use a command like:\n\ngit revert &lt;commithash&gt;\n\nThis will create a new commit that effectively undoes the changes made in the specified commit. This new commit will have the opposite changes, effectively canceling out the changes from the original commit. You might need to resolve a merge conflict, if the changes you want to revert conflict with changes in subsequent commits. By default the commit message will be revert &lt;commit message of reverted commit&gt;. However, Git will open an editor for you to change this message, if you don’t specify it otherwise.\n\n\n\n\n\n\nWhat are hashes?\n\n\n\n\n\nIn Git, a commit hash, also known as a commit ID or SHA-1 hash, is a unique identifier for a specific commit in a Git repository. It’s a 40-character hexadecimal string that represents the contents and history of that commit. Each commit in a Git repository has a unique hash.\n\n\n\n\n\n\n\n\n\nCommon git revert flags\n\n\n\n\n\n-n or --no commit: Prevents Git from automatically creating a new commit after reverting changes. It stages the changes, allowing you to make additional modifications or review them before committing.\n-m &lt;parent-number&gt;: When dealing with a merge commit, this flag specifies which parent commit to use as the source for reverting. By default, Git uses the first parent (main branch), but you can specify another parent by providing its number.\n--no-edit: This flag prevents the text editor from opening for editing the commit message, making it useful when you want to keep the default commit message.\n\n\n\n\n\n11.3.6 Resetting to a commit\nIf you want to reset your repository to a commit that was made in the past, you can use the git reset command.\nTo get an overview of your past commits you can either use git log or git reflog. Both commands should get you an overview of your past commits. For example:\n\ngit log --oneline\n\nwill give you an output like:\n\n25a51e8 Update README.md\nb7f3a12 Add new feature X\n8d76a45 Merge branch 'feature-branch'\n2f0e73b Implement new functionality\n\nUsing git reset &lt;commit&gt; will undo all the changes you made after the specific commit you picked. Your “branch pointer” will move to the specified commit, and changes after that commit will be uncommitted and moved back to the working directory. For example:\n\ngit reset 8d76a45\n\nHowever, these changes are still present in your working directory, so if you want to discard them completely, you can use add the --hard flag:\n\ngit reset --hard &lt;commit&gt;\n\nThis will not only reset your “branch pointer” but also discard all changes in your working directory and staging area since the specified commit. It effectively resets your working directory to the state of the chosen commit.\n\n\n\n\n\n\nBe careful about data loss!\n\n\n\nPlease be careful when using the git reset --hard command! This command reset your working directory to the state of the chosen previous commit. This will delete changes beyond recovery, unless you can retrieve these changes from another location, for example a remote repository like GitHub.\n\n\n\n\n\n\n\n\ngit reflog vs. git log\n\n\n\n\n\ngit log shows the commit history, while git reflog shows a log of all changes to branches, including resets and other adjustments. Think of git log as a timeline of commits, and git reflog as a detailed diary of all recent changes, even those that alter commit history, providing a safety net for recovery.\n\n\n\n\n\n\n\n\n\nCommon git reset flags\n\n\n\n\n\n--soft: Resets the branch pointer to the specified commit but keeps changes staged. This allows you to rework the changes and create a new commit.\n--mixed (default): Resets the branch pointer to the specified commit and unstages changes. Changes are kept in your working directory, allowing you to modify them before committing.\n--hard: Resets the branch pointer to the specified commit, unstages changes, and discards changes in your working directory. Use with caution, as it can lead to data loss.\n--merge: Resets the branch pointer and the index to the specified commit, but keeps changes in your working directory. This is useful in aborting a merge.\n--keep: Resets the branch pointer and index to the specified commit but refuses to do so if there are uncommitted changes in the working directory.\n--patch or -p: Allows you to interactively choose changes to reset, similar to the git add -p command for staging changes."
  },
  {
    "objectID": "chapters/intermediate-commands.html#partial-commits",
    "href": "chapters/intermediate-commands.html#partial-commits",
    "title": "11  Stashing and Co.",
    "section": "11.4 Partial commits",
    "text": "11.4 Partial commits\nGit allows you to make partial commits by staging only specific parts of your file before committing. This can be achieved using git add with the -p or --patch option, which allows you to interactively choose which changes to stage.\nTo try this make some changes to your file(s) and use:\n\ngit add -p\n\nThis will prompt you with each change, giving you options to stage, skip, or split the changes. You’ll see a series of prompts like this:\n\n+ Example text ...\n+\n+\n+\n(1/x) Stage this hunk [y,n,q,a,d,e,?]?\n\nThese prompt option respectively stand for:\n\ny: Stage this hunk.\nn: Do not stage this hunk.\nq: Quit. Do not stage this hunk or any remaining hunks.\na: Stage this hunk and all later hunks in the file.\nd: Do not stage this hunk or any later hunks in the file.\n/: Search for a hunk matching the given regex.\ne: Manually edit the current hunk.\n?: Print help.\n\nType one of the symbols in the command line to proceed in the desired manner.\n\n\n\n\n\n\nWhat is a “hunk”?\n\n\n\n\n\nIn Git, a “hunk” refers to a distinct block of code changes within a file. It represents a cohesive set of added, modified, or deleted lines in a specific location. Git automatically divides changes into hunks to facilitate easier review, selective staging, and conflict resolution during version control operations.\n\n\n\n\n\n\n\n\n\nOur recommendation: Use a GUI for partial commits\n\n\n\n\n\nIn our opinion, using partial commits on the command line is a bit of a hassle. This would be a good usecase for a Git GUI. To checkout how to do partial commit using GitKraken checkout the GUI chapter in this book."
  },
  {
    "objectID": "chapters/intermediate-commands.html#alternatives-to-standard-merging",
    "href": "chapters/intermediate-commands.html#alternatives-to-standard-merging",
    "title": "11  Stashing and Co.",
    "section": "11.5 Alternatives to standard merging",
    "text": "11.5 Alternatives to standard merging\n\n11.5.1 Cherrypicking\ngit cherry-pick allows you to apply the changes from a specific commit from one branch to another. This means, you can pick and apply specific commits to your current branch without merging the entire branch. This can be useful when you only want to bring in specific changes from another branch into your current branch, in contrast to merging all commits of a branch, as visualized in Figure 11.1. You will need the hash of the commit you want to “cherry-pick” and then use the command:\n\ngit cherry-pick &lt;commithash&gt;\n\nAgain, you might have to resolve merge conflicts. The default commit message will be:\n\nCherry-pick commit &lt;commit-hash&gt;\nThis commit was cherry-picked from &lt;source-branch&gt; at &lt;source-commit-hash&gt;\n\n\n\n\nFigure 11.1: Image from Blogpost “What IS git cherry-pick?” by 0xkoji\n\n\n\n\n\n\n\n\nCommon git cherry-pick flags\n\n\n\n\n\n-n or --no commit: Prevents Git from automatically creating a new commit after cherry-picking. It stages the changes, allowing you to make additional modifications or review them before committing.\n-e or --edit: Opens the default text editor to edit the commit message of the new cherry-picked commit. Useful when you want to provide a custom message for the cherry-picked commit.\n\n\n\n\n\n11.5.2 Rebasing\ngit rebase is a different way compared to a standard merge to integrate changes from one branch into another. For example, when you rebase the feature branch onto the main branch you “rearrange” the commits. It’s like taking your changes, applying them on top of the latest main branch, and making it all look like a smooth line. The new commits you made in the feature branch are still there, but they appear as if they were created after the latest changes in the main branch. It’s like picking up your changes and placing them on the latest code, resulting in a linear history. For an illustration, see Figure 11.2.\n\ngit rebase main\n\nHowever, you should use rebase with caution when collaborating with others, as it can rewrite commit history and create conflicts for team members.\n\n\n\nFigure 11.2: Image from Blogpost “Deep dive into Git Rebase” by Mohan Murali\n\n\n\n\n\n\n\n\nCommon git rebase flags\n\n\n\n\n\n--interactive or -i: Start an interactive rebase, allowing you to edit, reorder, or squash commits interactively.\n--continue: Continue the rebase after resolving conflicts or editing commits during an interactive rebase.\n--abort: Abort the current rebase operation and return the branch to its original state before the rebase.\n--skip: Skip the current commit during an interactive rebase.\n-p or --preserve-merges: Preserve merge commits during the rebase.\n--autosquash: Automatically squash commits marked with “squash” or “fixup” in their commit message during an interactive rebase."
  },
  {
    "objectID": "chapters/intermediate-commands.html#acknowledgements-further-reading",
    "href": "chapters/intermediate-commands.html#acknowledgements-further-reading",
    "title": "11  Stashing and Co.",
    "section": "11.6 Acknowledgements & further reading",
    "text": "11.6 Acknowledgements & further reading\nWe would like to express our gratitude to the following resources, which have been essential in shaping this chapter. We recommend these references for further reading:\n\n\n\n\nAuthors\nTitle\nWebsite\nLicense\nSource\n\n\n\n\nChacon and Straub (2014)\nPro Git\n\nCC BY-NC"
  },
  {
    "objectID": "chapters/intermediate-commands.html#cheatsheet",
    "href": "chapters/intermediate-commands.html#cheatsheet",
    "title": "11  Stashing and Co.",
    "section": "11.7 Cheatsheet",
    "text": "11.7 Cheatsheet\n\n\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\ngit rebase\nDifferent way of integrating changes from two branches\n\n\ngit stash\nStores made changes for later use\n\n\ngit stash -m stashing message\nStashes your changes and includes a message\n\n\ngit stash list\nShows all of your stored stashes\n\n\ngit stash apply\nApplies your latest stash\n\n\ngit stash apply stash@{n}\nApplies a specific stash\n\n\ngit stash pop\nApplies your latest stash and removes it from stash list\n\n\ngit stash pop stash@{n}\nApplies a specific stash and removes it from stash list\n\n\ngit restore &lt;file&gt;\nReverts  back to the state of your last commit\n\n\ngit restore .\nReverts all files in your repository back to the state of your last commit\n\n\ngit restore --staged &lt;file&gt;\nRemoves  from your staging area\n\n\ngit restore --staged .\nRemoves all files in your repository from your staging area\n\n\ngit rm &lt;file&gt;\nDeletes  from your repository\n\n\ngit rm --cached &lt;file&gt;\nRemoves  from your repository but keeps  on your system\n\n\ngit revert &lt;commithash&gt;\nCreates a new commit which reverts your repository back to \n\n\ngit reflog\nLogs recent branch changes\n\n\ngit reset &lt;commithash&gt;\nResets the branch to a specified commit, keeping changes in the working directory\n\n\ngit reset --hard &lt;commithash&gt;\nResets the branch to a specified commit\n\n\ngit cherry-pick &lt;commithash&gt;\nApplies changes from \n\n\ngit clean\nDeletes untracked files from your directory\n\n\n\n\n\n\n\n\n\nChacon, Scott, and Ben Straub. 2014. Pro Git. Apress. https://doi.org/10.1007/978-1-4842-0076-6. License: CC BY-NC. Source: https://github.com/progit/progit2. Website: https://git-scm.com/book/en/v2."
  },
  {
    "objectID": "chapters/rewriting-history.html#how-to-avoid-accidental-commits",
    "href": "chapters/rewriting-history.html#how-to-avoid-accidental-commits",
    "title": "12  Rewriting history",
    "section": "12.1 How to avoid accidental commits",
    "text": "12.1 How to avoid accidental commits\nThere are a few simple tricks to avoid committing things you don’t want committed:\n\nUse a visual program like GitHub Desktop or gitk to commit changes. Visual programs generally make it easier to see exactly which files will be added, deleted, and modified with each commit.\nAvoid the catch-all commands git add . and git commit -a on the command line—use git add filename and git rm filename to individually stage files, instead.\nUse git add --interactive to individually review and stage changes within each file.\nUse git diff --cached to review the changes that you have staged for commit. This is the exact diff that git commit will produce as long as you don’t use the -a flag.\n\nYou accidentally added a large file to a previous commit.\nNow you want to remove the file but keep all commits that came afterwards."
  },
  {
    "objectID": "chapters/rewriting-history.html#purging-a-file-from-your-repositorys-history",
    "href": "chapters/rewriting-history.html#purging-a-file-from-your-repositorys-history",
    "title": "12  Rewriting history",
    "section": "12.2 Purging a file from your repository’s history",
    "text": "12.2 Purging a file from your repository’s history\n\n\n\n\n\n\nNote\n\n\n\nIf sensitive data is located in a file that’s identified as a binary file, you’ll need to remove the file from the history, as you can’t modify it to remove or replace the data.\n\n\n\n12.2.1 Using the BFG\nTODO: TBA\n\n\n12.2.2 Using git filter-repo\n\n\n\n\n\n\nWarning\n\n\n\nWarning: If you run git filter-repo after stashing changes, you won’t be able to retrieve your changes with other stash commands. Before running git filter-repo, we recommend unstashing any changes you’ve made. To unstash the last set of changes you’ve stashed, run git stash show -p | git apply -R. For more information, see Git Tools - Stashing and Cleaning.\n\n\nTo illustrate how git filter-repo works, we’ll show you how to remove your file with sensitive data from the history of your repository and add it to .gitignore to ensure that it is not accidentally re-committed.\n\n\n\n\n\n\nInstall git filter-repo\n\n\n\n\n\nInstall the latest release of the git filter-repo tool. You can install git-filter-repo manually or by using a package manager. For example, to install the tool with HomeBrew on macOS, use the brew install command.\n\nbrew install git-filter-repo\n\nFor more information, see INSTALL.md in the newren/git-filter-repo repository.\n\n\n\n\n\n12.2.3 Clone the repository\nIf you don’t already have a local copy of your repository with sensitive data in its history, clone the repository to your local computer.\n\n112git clone https://github.com/YOUR-USERNAME&gt;/YOUR-REPOSITORY\n\n\n1\n\nReplace YOUR-USERNAME with your GitHub username and YOUR-REPOSITORY with the name of your GitHub repository.\n\n\n\n\n\n\n12.2.4 Navigate into the repository’s working directory\nNavigate into the repository’s working directory.\n\n1cd YOUR-REPOSITORY\n# TODO: add reference to command line chapter\n\n\n1\n\nReplace YOUR-REPOSITORY with the name of your GitHub repository. For details on the cd command, see the chapter on command line.\n\n\n\n\n\n\n12.2.5 Run git filter-repo command\nRun the following command, replacing PATH-TO-FILE-YOU-WANT-TO-REMOVE with the path to the file you want to remove, not just its file name. These arguments will:\n\nForce Git to process, but not check out, the entire history of every branch and tag\nRemove the specified file, as well as any empty commits generated as a result\nRemove some configurations, such as the remote URL, stored in the .git/config file. You may want to back up this file in advance for restoration later.\nOverwrite your existing tags\n\n\n1git filter-repo --invert-paths --path PATH-TO-FILE-YOU-WANT-TO-REMOVE\n\n\n1\n\nReplace PATH-TO-FILE-YOU-WANT-TO-REMOVE with the path to the file you want to remove, not just its file name.\n\n\n\n\n\n\n\n\n\n\nI did not clone a fresh copy of the repository. Is this a problem?\n\n\n\n\n\nIf you did not clone a fresh copy of your repository, you may see this message after running the git filter-repo command:\n\nAborting: Refusing to destructively overwrite repo history since\nthis does not look like a fresh clone.\n  (expected freshly packed repo)\nPlease operate on a fresh clone instead.  If you want to proceed\nanyway, use --force.\n\nAs described in the message, you have two options:\n\nClone a fresh copy of your repository and execute the command there.\nAdd --force to proceed with the existing repository.\n\n\n\n\n\n12.2.5.1 Add your file to .gitignore\nAdd your file to .gitignore to ensure that you don’t accidentally commit it again. You can edit .gitignore in your favorite text editor\n\n1echo \"PATH-TO-FILE-YOU-WANT-TO-REMOVE\" &gt;&gt; .gitignore\ngit add .gitignore\ngit commit -m \"Add YOUR-FILE-WITH-SENSITIVE-DATA to .gitignore\"\n\n\n1\n\nThis command writes PATH-TO-FILE-YOU-WANT-TO-REMOVE inside the .gitignore file. &gt;&gt; makes sure that this is written to a new line inside the .gitignore file.\n\n\n\n\nThis will create the following output:\n\n[main 64dda05] Add YOUR-FILE-WITH-SENSITIVE-DATA to .gitignore\n 1 files changed, 1 insertions(+), 0 deletions(-)\n\n\n\n\n12.2.6 Double-check the state of your repository\nDouble-check that you’ve removed everything you wanted to from your repository’s history, and that all of your branches are checked out.\n\n\n12.2.7 Force-push your local changes to GitHub\nIf you are happy with the state of your repository, force-push your local changes to overwrite your repository on github.com/, as well as all the branches you’ve pushed up. A force push is required to remove sensitive data from your commit history.\n\ngit push origin --force --all\n\n\n\nOutput\n\n\nCounting objects: 1074, done.\nDelta compression using 2 threads.\nCompressing objects: 100% (677/677), done.\nWriting objects: 100% (1058/1058), 148.85 KiB, done.\nTotal 1058 (delta 590), reused 602 (delta 378)\nTo https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git\n  + 48dc599...64dda05 main -&gt; main (forced update)\n\n\n\n\n\n\n\n\nfatal: ‘origin’ does not appear to be a git repository\n\n\n\n\n\nDid you receive this error message?\n\nfatal: 'origin' does not appear to be a git repository\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n\nAs described above, this could mean that origin was removed from your repo. Configure origin again:\n\nSSHHTTPS\n\n\n\ngit remote add origin https://github.com/YOUR-USERNAME/YOUR-REPOSITORY\n\n\n1\n\nReplace YOUR-USERNAME with your GitHub username and YOUR-REPOSITORY with the name of your GitHub repository.\n\n\n\n\n\n\n\ngit remote add origin git@github.com:YOUR-USERNAME/YOUR-REPOSITORY.git\n\n\n2\n\nReplace &lt;YOUR-USERNAME&gt; with your GitHub username and &lt;YOUR-REPOSITORY&gt; with the name of your GitHub repository.\n\n\n\n\n\n\n\n\n\n\nIn order to remove the sensitive file from your tagged releases, you’ll also need to force-push against your Git tags:\n\ngit push origin --force --tags\n\n\n\nOutput\n\n\nCounting objects: 321, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (166/166), done.\nWriting objects: 100% (321/321), 331.74 KiB | 0 bytes/s, done.\nTotal 321 (delta 124), reused 269 (delta 108)\nTo https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git\n + 48dc599...051452f main -&gt; main (forced update)"
  },
  {
    "objectID": "chapters/rewriting-history.html#fully-removing-the-data-from-github",
    "href": "chapters/rewriting-history.html#fully-removing-the-data-from-github",
    "title": "12  Rewriting history",
    "section": "12.3 Fully removing the data from GitHub",
    "text": "12.3 Fully removing the data from GitHub\nAfter using either the BFG tool or git filter-repo to remove the sensitive data and pushing your changes to GitHub, you must take a few more steps to fully remove the data from GitHub.\n\nContact GitHub Support, asking them to remove cached views and references to the sensitive data in pull requests on GitHub. Please provide the name of the repository and/or a link to the commit you need removed.\nTell your collaborators to rebase, not merge, any branches they created off of your old (tainted) repository history. One merge commit could reintroduce some or all of the tainted history that you just went to the trouble of purging.\nAfter some time has passed and you’re confident that the BFG tool / git filter-repo had no unintended side effects, you can force all objects in your local repository to be dereferenced and garbage collected with the following commands (using Git 1.8.5 or newer)\n\n\n$ git for-each-ref --format=\"delete %(refname)\" refs/original | git update-ref --stdin\n$ git reflog expire --expire=now --all\n$ git gc --prune=now\n&gt; Counting objects: 2437, done.\n&gt; Delta compression using up to 4 threads.\n&gt; Compressing objects: 100% (1378/1378), done.\n&gt; Writing objects: 100% (2437/2437), done.\n&gt; Total 2437 (delta 1461), reused 1802 (delta 1048)\n\nNote: You can also achieve this by pushing your filtered history to a new or empty repository and then making a fresh clone from GitHub."
  },
  {
    "objectID": "chapters/rewriting-history.html#references",
    "href": "chapters/rewriting-history.html#references",
    "title": "12  Rewriting history",
    "section": "12.4 References",
    "text": "12.4 References\n\nhttps://docs.github.com/en/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository"
  },
  {
    "objectID": "misc/cheatsheet.html",
    "href": "misc/cheatsheet.html",
    "title": "Cheatsheet",
    "section": "",
    "text": "Chapter\nCommand\nDescription\n\n\n\n\ncli\npwd\nDisplay the current directory path\n\n\ncli\ncd &lt;PATH&gt;\nChange the current working directory to &lt;PATH&gt;\n\n\ncli\ncd ~\nChange the current working directory to the user’s home directory\n\n\ncli\ncd ..\nMove up one folder\n\n\ncli\ncd ../..\nMove up two folders\n\n\ncli\nls\nList files and folders in the current working directory\n\n\ncli\nls &lt;PATH&gt;\nList files and folders in &lt;PATH&gt;\n\n\ncli\nls -a\nList all files (including hidden files) in the current working directory\n\n\ncli\nls -alh\nList all files in a long format that is easy to read for humans\n\n\ncli\nmkdir &lt;FOLDER&gt;\nCreate a new folder, called &lt;FOLDER&gt;\n\n\ncli\nmkdir &lt;FOLDER1&gt; &lt;FOLDER2&gt;\nCreate two separate folders, called  and \n\n\ncli\ntouch &lt;FILE&gt;\nCreate a new empty file, called &lt;FILE&gt;\n\n\ncli\nmv FILE.txt &lt;FOLDER&gt;\nMove FILE.txt into &lt;FOLDER&gt;\n\n\ncli\nmv &lt;FOLDER_OLD&gt; &lt;FOLDER_NEW&gt;\nRename &lt;FOLDER_OLD&gt; to &lt;FOLDER_NEW&gt;\n\n\ncli\nls -alh *.csv\nUse a wildcard to list all .csv files\n\n\ncli\nrm -r &lt;FOLDER&gt;\nRemove the folder &lt;FOLDER&gt;\n\n\nconfig\ngit config\nOverview of config commands\n\n\nconfig\ngit config --global user.name\nSet Username\n\n\nconfig\ngit config --global user.email\nSet Email\n\n\nconfig\ngit config --global core.editor\nSet Editor\n\n\nconfig\ngit config --global init.defaultBranch main\nSet default branch name\n\n\nconfig\ngit config --list\nView set configurations\n\n\nbasic\ngit init\nInitialize folder as Git Repository\n\n\nbasic\ngit status\nView Git tracking status of files in Repository\n\n\nbasic\ngit add\nAdd file to staging area\n\n\nbasic\ngit commit\nCommit staged files\n\n\nbasic\ngit log\nView past commits\n\n\nbasic\ngit diff\nView made changes compared to the last commit\n\n\ngithub\ngit clone\nCreates a local copy of a repository\n\n\ngithub\ngit pull\nFetches and merges the latest changes from a remote repository into your current branch\n\n\ngithub\ngit fetch\nUpdates your remote tracking branches\n\n\ngithub\ngit push\nUpload your local commits to a remote repository\n\n\ngithub\ngit blame\nshows the authorship and commit information of each line in a file\n\n\ngithub\ngit remote\nmanages remote repositories\n\n\nbranches\ngit branch\nListing/creating/deleting branches\n\n\nbranches\ngit switch\nSwitching branches\n\n\nbranches\ngit checkout\nSwitching branches\n\n\nbranches\ngit merge\nMerging branches\n\n\nbranches\ngit rebase\nA different way of integrating changes from two branches\n\n\nstashing\ngit rebase\nDifferent way of integrating changes from two branches\n\n\nstashing\ngit stash\nStores made changes for later use\n\n\nstashing\ngit stash -m stashing message\nStashes your changes and includes a message\n\n\nstashing\ngit stash list\nShows all of your stored stashes\n\n\nstashing\ngit stash apply\nApplies your latest stash\n\n\nstashing\ngit stash apply stash@{n}\nApplies a specific stash\n\n\nstashing\ngit stash pop\nApplies your latest stash and removes it from stash list\n\n\nstashing\ngit stash pop stash@{n}\nApplies a specific stash and removes it from stash list\n\n\nstashing\ngit restore &lt;file&gt;\nReverts  back to the state of your last commit\n\n\nstashing\ngit restore .\nReverts all files in your repository back to the state of your last commit\n\n\nstashing\ngit restore --staged &lt;file&gt;\nRemoves  from your staging area\n\n\nstashing\ngit restore --staged .\nRemoves all files in your repository from your staging area\n\n\nstashing\ngit rm &lt;file&gt;\nDeletes  from your repository\n\n\nstashing\ngit rm --cached &lt;file&gt;\nRemoves  from your repository but keeps  on your system\n\n\nstashing\ngit revert &lt;commithash&gt;\nCreates a new commit which reverts your repository back to \n\n\nstashing\ngit reflog\nLogs recent branch changes\n\n\nstashing\ngit reset &lt;commithash&gt;\nResets the branch to a specified commit, keeping changes in the working directory\n\n\nstashing\ngit reset --hard &lt;commithash&gt;\nResets the branch to a specified commit\n\n\nstashing\ngit cherry-pick &lt;commithash&gt;\nApplies changes from \n\n\nstashing\ngit clean\nDeletes untracked files from your directory"
  },
  {
    "objectID": "misc/references.html",
    "href": "misc/references.html",
    "title": "References",
    "section": "",
    "text": "AI for Multiple Long-term Conditions Research Support Facility. 2023.\n“Introduction to Version Control with Git.” June 2023. https://www.youtube.com/watch?v=z9-qAGq78qE.\nLicense: CC BY\n4.0. Source: https://github.com/aim-rsf/training/tree/main/version-control.\n\n\nAllaire, J. J., Charles Teague, Yihui Xie, and Christophe Dervieux.\n2022. “Quarto.” https://doi.org/10.5281/zenodo.5960048.\nLicense: GNU GPL\nv2. https://github.com/quarto-dev/quarto-web. Website: https://quarto.org/.\n\n\nBlischak, John D., Emily R. Davenport, and Greg Wilson. 2016. “A\nQuick Introduction to Version Control with Git and GitHub.”\nEdited by Francis Ouellette. PLOS Computational Biology 12 (1):\ne1004668. https://doi.org/10.1371/journal.pcbi.1004668.\nLicense: CC BY\n4.0. Source: https://doi.org/10.1371/journal.pcbi.1004668.\n\n\nBryan, Jennifer. 2018. “Excuse Me, Do You Have a Moment to Talk\nAbout Version Control?” The American Statistician 72\n(1): 20–27. https://doi.org/10.1080/00031305.2017.1399928.\nWebsite: https://doi.org/10.1080/00031305.2017.1399928.\n\n\nBryan, Jenny. 2023. Happy Git and GitHub for the useR. Jenny\nBryan. https://happygitwithr.com. License:\nCC BY-NC\n4.0. Source: https://github.com/jennybc/happy-git-with-r. Website: https://happygitwithr.com/.\n\n\nCapes, Gerard, Bkmgit, Jacob Deppen, G. A. Devenyi, Alexander James\nBall, Piper Fowler-Wright, Alessia Visconti, et al. 2023.\nSwcarpentry/Shell-Novice: Software Carpentry: The UNIX Shell.\nZenodo. https://doi.org/10.5281/ZENODO.595899.\nLicense: CC BY\n4.0. Source: https://github.com/swcarpentry/shell-novice. Website: https://swcarpentry.github.io/shell-novice/.\n\n\nChacon, Scott, and Ben Straub. 2014. Pro Git. Apress. https://doi.org/10.1007/978-1-4842-0076-6.\nLicense: CC\nBY-NC. Source: https://github.com/progit/progit2. Website: https://git-scm.com/book/en/v2.\n\n\nGitHub. 2023. GitHub Docs. GitHub. https://docs.github.com/en.\nLicense: CC\nBY-NC 4.0. Source: https://docs.github.com/en.\n\n\nKoziar, Katherine E., Madicken Munk, Andrew Greene, Annajiat Alim Rasel,\nEd Bennett, Sarah LR Stevens, Ece Turnator, et al. 2023.\nSwcarpentry/Git-Novice: Software Carpentry: Version Control with Git\n2023-05. Zenodo. https://doi.org/10.5281/ZENODO.7908089.\nLicense: CC BY\n4.0. Source: https://github.com/swcarpentry/git-novice. Website: https://swcarpentry.github.io/git-novice/.\n\n\nLowndes, Julia Stewart, and Erin Robinson. 2022. “Openscapes\nChampions Lesson Series,” December. https://doi.org/10.5281/ZENODO.7407247.\nLicense: CC BY\n4.0. Source: https://github.com/Openscapes/series. Website: https://openscapes.github.io/series/.\n\n\nMcBain, Miles. 2019. “Git for Scientists.” https://milesmcbain.github.io/git_4_sci/.\nLicense: CC\nBY-SA 4.0. Source: https://github.com/MilesMcBain/git_4_sci/. Website: https://milesmcbain.github.io/git_4_sci/.\n\n\nMilligan, Ian, and James Baker. 2014. “Introduction to the Bash\nCommand Line.” Edited by Adam Crymble. Programming\nHistorian, no. 3 (September). https://doi.org/10.46430/phen0037.\n\n\nMillman, K. Jarrod, Matthew Brett, Ross Barnowski, and Jean-Baptiste\nPoline. 2018. “Teaching Computational Reproducibility for\nNeuroimaging.” Frontiers in Neuroscience 12 (October).\nhttps://doi.org/10.3389/fnins.2018.00727.\nLicense: CC BY\n4.0. Website: http://dx.doi.org/10.3389/fnins.2018.00727.\n\n\nPerez-Riverol, Yasset, Laurent Gatto, Rui Wang, Timo Sachsenberg, Julian\nUszkoreit, Felipe da Veiga Leprevost, Christian Fufezan, et al. 2016.\n“Ten Simple Rules for Taking Advantage of Git and GitHub.”\nEdited by Scott Markel. PLOS Computational Biology 12 (7):\ne1004947. https://doi.org/10.1371/journal.pcbi.1004947.\nLicense: CC BY\n4.0. Source: https://github.com/ypriverol/github-paper. Website: https://doi.org/10.1371/journal.pcbi.1004947.\n\n\nRam, Karthik. 2013. “Git Can Facilitate Greater Reproducibility\nand Increased Transparency in Science.” Source Code for\nBiology and Medicine 8 (1). https://doi.org/10.1186/1751-0473-8-7.\nLicense: CC BY\n2.0. Source: https://github.com/karthik/smb_git. Website: https://doi.org/10.1186/1751-0473-8-7.\n\n\nThe Turing Way Community. 2022. The Turing Way: A Handbook for\nReproducible, Ethical and Collaborative Research. Zenodo. https://doi.org/10.5281/zenodo.3233853.\nLicense: The process documents and data are made available under a CC BY 4.0\nlicense. Software are made available under an MIT license. Website: https://the-turing-way.netlify.app/."
  },
  {
    "objectID": "misc/acknowledgements.html",
    "href": "misc/acknowledgements.html",
    "title": "Acknowledgements",
    "section": "",
    "text": "Funding\nThis work is funded by the Digital and Data Literacy in Teaching Lab (DDLitLab), an initiative by the Center for Interdisciplinary Study Programs (Zentrum für Interdisziplinäre Studienangebote; ISA-Zentrum) at the University of Hamburg, Germany. The Digital and Data Literacy in Teaching Lab program is in turn funded by the Stiftung Innovation in der Hochschullehre (details about the funding program can be found here).\nOur project proposal can be found here (in German).\nSpecial thanks to Carolin Scharfenberg as well as Moritz Kreinsen and Sören-Kristian Berger for help with project coordination, administration, and the grant application process.\n\n\nCode\nThis website is made with 🖤 and Quarto. The source code of this website can be found on GitHub .\n\n\nImages\nImages are stored on Nextcloud (UHH Cloud). They can be retrieved using\n\nmake download-images\n\n\n\nClick here to view the full Makefile of this project.\n\n\n\n\nMakefile\n\n# define URL to Nextcloud where static files are stored:\nIMAGES_URL=https://cloud.uni-hamburg.de/s/aD7NTNB9f4NDorT/download\n# define a name for the .zip-archive with the cloud contents:\nIMAGES_ARCHIVE=version-control-book.zip\n# define the name of the local folder:\nIMAGES_DIR=static/\n\n# define the default targets of the make command\nall: download-images\n\n# download and extract images:\ndownload-images:\n    wget $(IMAGES_URL) -O $(IMAGES_ARCHIVE)\n    unzip -j -o $(IMAGES_ARCHIVE) -d $(IMAGES_DIR)\n    rm -f $(IMAGES_ARCHIVE)\n\n# clean downloaded images folder:\nclean:\n    rm -rf $(IMAGES_DIR)*\n\n\n\n\n\nAnalytics\nWe use Plausible for website analytics. Plausible is an “intuitive, lightweight and open source web analytics”, does not use cookies and is fully compliant with GDPR, CCPA and PECR.\n\n\nLicense\nAll contents are licensed under a Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0) license, unless indicated otherwise.\n\n\nContact\nDid you spot an error? Is there an issue with the website? Do you have feedback, questions or comments? We would love to hear from you! Please open an issue on GitHub or send an email. Thank you!"
  },
  {
    "objectID": "misc/contributing.html#overview",
    "href": "misc/contributing.html#overview",
    "title": "Contributing",
    "section": "Overview",
    "text": "Overview\nSection 2: This section explains how to use RStudio Project to work on this project.\nSection 3: This section explains how to use Quarto to work on this project.\nSection 4: This section explains how this project manages package dependencies using renv.\nSection 6: This section explains how to add code snippets.\nSection 7: This section explains how to add images.\nSection 5: This section explains how to add references.\nSection 8: This section explains how to use variables.\nSection 9: This section explains how to add icons."
  },
  {
    "objectID": "misc/contributing.html#sec-rstudio-project",
    "href": "misc/contributing.html#sec-rstudio-project",
    "title": "Contributing",
    "section": "RStudio Project",
    "text": "RStudio Project\n\n “Using RStudio Projects”\n\nWe recommend working in RStudio and open the RStudio Project.\n\n RStudio Terminal\n\n\n\nDouble-click on the project file version-control-book.Rproj within your computer’s file system (for example, macOS Finder).\n\n\n\nIn the Terminal, run:\n\nopen version-control-book.Rproj\n\nThis will open the RStudio Project in RStudio.\n\n\n\n\n\nClick here to view the full version-control-book.Rproj file of this project.\n\n\n\n\nversion-control-book.Rproj\n\nVersion: 1.0\n\nRestoreWorkspace: No\nSaveWorkspace: No\nAlwaysSaveHistory: No\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n\nBuildType: Makefile"
  },
  {
    "objectID": "misc/contributing.html#sec-quarto",
    "href": "misc/contributing.html#sec-quarto",
    "title": "Contributing",
    "section": "Quarto",
    "text": "Quarto\nThis book is made with Quarto.\n\nLocal development\n\nSetup\n\nRead the Get Started chapter of the Quarto documentation, which includes details on installation.\n\n\n\nPreparation\n\nRead this guide on how to contribute.\nFamiliarize yourself with Quarto Books.\n\n\n\nLocal preview\n\nquarto preview\n\n\n\n\nAdd a new chapter\n\nCreate a new Quarto document inside the /chapters/ folder\nAdd the new chapter to _quarto.yml. Don’t forget to specify the full path (including /chapters/)\n\n\n\n\n_quarto.yml (excerpt)\n\nchapters:\n  - index.qmd\n1  - chapters/YOUR-NEW-CHAPTER.qmd\n  - another-chapter.qmd\n\n\n\n1\n\nReplace YOUR-NEW-CHAPTER with a concise filename.\n\n\n\n\n\n\nClick here to view the full _quarto.yml file of this project.\n\n\n\n\n_quarto.yml\n\nproject:\n  # project options (https://quarto.org/docs/reference/projects/options.html):\n  type: book\n  output-dir: _book\n  execute-dir: project\n  # pre-render: make download-images\n  # preview (https://quarto.org/docs/reference/projects/options.html#preview):\n  preview: \n    port: 3333\n    host: 127.0.0.1\n    browser: true\n    watch-inputs: true\n    navigate: true\n\nbook:\n  title: \"Version Control of Code and Data\"\n  subtitle: \"An Introduction for Scientists\"\n  search: true\n  repo-url: https://github.com/lnnrtwttkhn/version-control-book/\n  repo-branch: main\n  repo-actions: [edit, issue, source]\n  downloads: [pdf, epub]\n  sharing: [twitter, facebook]\n  favicon: static/git-icon.svg\n  twitter-card: false\n  site-url: https://lennartwittkuhn.com/version-control-book\n  chapters:\n    - index.qmd\n    - contents.qmd\n    - chapters/intro-version-control.qmd\n    - chapters/command-line.qmd\n    - chapters/installation.qmd\n    - chapters/setup.qmd\n    - chapters/first-steps-git.qmd\n    - chapters/branches.qmd\n    - chapters/github-intro.qmd\n    - part: Project Management\n      chapters:\n        - chapters/project-management.qmd\n        - chapters/issues.qmd\n    - chapters/gui.qmd\n    - chapters/intermediate-commands.qmd\n    - chapters/rewriting-history.qmd\n    - misc/cheatsheet.qmd\n    - misc/references.qmd\n    - misc/acknowledgements.qmd\n    - misc/contributing.qmd\n    - misc/style-guide.qmd\n  page-navigation: true\n  back-to-top-navigation: true\n  # side navigation (https://quarto.org/docs/websites/website-navigation.html#side-navigation):\n  sidebar:\n    id: sidebar\n    title: \"Version Control of Code and Data\"\n    subtitle: \"An Introduction for Scientists\"\n    logo: static/git-icon.svg\n    search: true\n    tools:\n      - icon: globe\n        href: https://lennartwittkuhn.com/version-control-book\n      - icon: bug\n        href: https://github.com/lnnrtwttkhn/version-control-book/issues\n    style: docked\n    type: light\n    background: light\n    border: false\n    alignment: center\n    collapse-level: 2\n    pinned: true\n  page-footer:\n    left: |\n      &copy; {{&lt; var years &gt;}} The Version Control Book Team\n    center:\n      - text: \"Funded by the Digital and Data Literacy in Teaching Lab\"\n        href: misc/acknowledgements.qmd\n    right: |\n      License: [CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/)\n    border: false\n    background: light\n\nformat:\n  html:\n    theme: cosmo\n    from: markdown+emoji\n    # fontcolor: black\n    # linkcolor: black\n    link-external-newwindow: true\n    toc: true\n    toc-depth: 3\n    toc-title: \"On this page\"\n    number-sections: true\n    anchor-sections: true\n    # layout (https://quarto.org/docs/reference/formats/html.html#layout):\n    fig-cap-location: margin\n    page-layout: full\n    # title-block-style: default\n    # code (https://quarto.org/docs/reference/formats/html.html#code):\n    code-fold: false\n    code-overflow: wrap\n    code-line-numbers: false\n    code-copy: true\n    code-link: false\n    code-annotations: hover\n    code-tools: false\n    highlight-style: monokai\n    # references:\n    bibliography: references.bib\n    csl: chicago-author-date-note.csl\n    citations-hover: true\n    citation-location: document\n    citeproc: true\n    # footnotes:\n    footnotes-hover: true\n    # includes:\n    include-after-body: plausible.html\n\nmetadata-files:\n  - _authors.yml\n  - _affiliations.yml\n  - _metadata.yml"
  },
  {
    "objectID": "misc/contributing.html#sec-dependency-management",
    "href": "misc/contributing.html#sec-dependency-management",
    "title": "Contributing",
    "section": "Dependency Management",
    "text": "Dependency Management\nWe use renv for project-local  dependency management. For details on renv, see the renv documentation.\n\nUsing renv for the first time\nAfter you open the Rstudio Project, you will (hopefully) see a similar output in the RStudio console:\n\n# Bootstrapping renv 0.17.3 --------------------------------------------------\n* Downloading renv 0.17.3 ... OK (downloaded binary)\n* Installing renv 0.17.3 ... Done!\n* Successfully installed and loaded renv 0.17.3.\n* Project '~/version-control-book' loaded. [renv 0.17.3]\n* This project contains a lockfile, but none of the recorded packages are installed.\n* Use `renv::restore()` to restore the project library.\n\nThis output tells you that (1) renv was automatically installed and loaded, (2) the renv environment for the project was loaded, and (3) that none of packages recorded in the renv lockfile are installed.\nThe renv lockfile captures the state of the package library of the project at some point in time. It is defining the version of renv used when generating the lockfile, the version of  used in that project, the R repositories that were active when the lockfile was created and the package records defining each  package, their version, and their installation source. For details on the anatomy of renv.lock, see this section in the renv documentation.\n\n\nClick here to view the full renv.lock file of this project.\n\n\n\n\nrenv.lock\n\n{\n  \"R\": {\n    \"Version\": \"4.3.1\",\n    \"Repositories\": [\n      {\n        \"Name\": \"CRAN\",\n        \"URL\": \"https://cran.rstudio.com\"\n      }\n    ]\n  },\n  \"Packages\": {\n    \"R6\": {\n      \"Package\": \"R6\",\n      \"Version\": \"2.5.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"470851b6d5d0ac559e9d01bb352b4021\"\n    },\n    \"Rcpp\": {\n      \"Package\": \"Rcpp\",\n      \"Version\": \"1.0.10\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"methods\",\n        \"utils\"\n      ],\n      \"Hash\": \"e749cae40fa9ef469b6050959517453c\"\n    },\n    \"askpass\": {\n      \"Package\": \"askpass\",\n      \"Version\": \"1.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"sys\"\n      ],\n      \"Hash\": \"e8a22846fff485f0be3770c2da758713\"\n    },\n    \"base64enc\": {\n      \"Package\": \"base64enc\",\n      \"Version\": \"0.1-3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"543776ae6848fde2f48ff3816d0628bc\"\n    },\n    \"bib2df\": {\n      \"Package\": \"bib2df\",\n      \"Version\": \"1.1.2.0\",\n      \"Source\": \"GitHub\",\n      \"RemoteType\": \"github\",\n      \"RemoteHost\": \"api.github.com\",\n      \"RemoteUsername\": \"ropensci\",\n      \"RemoteRepo\": \"bib2df\",\n      \"RemoteRef\": \"main\",\n      \"RemoteSha\": \"136ac64ea6a6ab89b90a39eed0345fc8af6e4fac\",\n      \"Requirements\": [\n        \"dplyr\",\n        \"httr\",\n        \"humaniformat\",\n        \"stringr\"\n      ],\n      \"Hash\": \"76eca4bfece4d94b7cf69145c89523e9\"\n    },\n    \"bslib\": {\n      \"Package\": \"bslib\",\n      \"Version\": \"0.5.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"base64enc\",\n        \"cachem\",\n        \"grDevices\",\n        \"htmltools\",\n        \"jquerylib\",\n        \"jsonlite\",\n        \"memoise\",\n        \"mime\",\n        \"rlang\",\n        \"sass\"\n      ],\n      \"Hash\": \"1b117970533deb6d4e992c1b34e9d905\"\n    },\n    \"cachem\": {\n      \"Package\": \"cachem\",\n      \"Version\": \"1.0.8\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"fastmap\",\n        \"rlang\"\n      ],\n      \"Hash\": \"c35768291560ce302c0a6589f92e837d\"\n    },\n    \"cli\": {\n      \"Package\": \"cli\",\n      \"Version\": \"3.6.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"utils\"\n      ],\n      \"Hash\": \"89e6d8219950eac806ae0c489052048a\"\n    },\n    \"cpp11\": {\n      \"Package\": \"cpp11\",\n      \"Version\": \"0.4.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Hash\": \"ed588261931ee3be2c700d22e94a29ab\"\n    },\n    \"curl\": {\n      \"Package\": \"curl\",\n      \"Version\": \"5.0.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"e4f97056611e8e6b8b852d13b7400cf1\"\n    },\n    \"data.table\": {\n      \"Package\": \"data.table\",\n      \"Version\": \"1.14.8\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\"\n      ],\n      \"Hash\": \"b4c06e554f33344e044ccd7fdca750a9\"\n    },\n    \"digest\": {\n      \"Package\": \"digest\",\n      \"Version\": \"0.6.31\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"utils\"\n      ],\n      \"Hash\": \"8b708f296afd9ae69f450f9640be8990\"\n    },\n    \"dplyr\": {\n      \"Package\": \"dplyr\",\n      \"Version\": \"1.1.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"R6\",\n        \"cli\",\n        \"generics\",\n        \"glue\",\n        \"lifecycle\",\n        \"magrittr\",\n        \"methods\",\n        \"pillar\",\n        \"rlang\",\n        \"tibble\",\n        \"tidyselect\",\n        \"utils\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"dea6970ff715ca541c387de363ff405e\"\n    },\n    \"ellipsis\": {\n      \"Package\": \"ellipsis\",\n      \"Version\": \"0.3.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"rlang\"\n      ],\n      \"Hash\": \"bb0eec2fe32e88d9e2836c2f73ea2077\"\n    },\n    \"evaluate\": {\n      \"Package\": \"evaluate\",\n      \"Version\": \"0.21\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\"\n      ],\n      \"Hash\": \"d59f3b464e8da1aef82dc04b588b8dfb\"\n    },\n    \"fansi\": {\n      \"Package\": \"fansi\",\n      \"Version\": \"1.0.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"grDevices\",\n        \"utils\"\n      ],\n      \"Hash\": \"1d9e7ad3c8312a192dea7d3db0274fde\"\n    },\n    \"fastmap\": {\n      \"Package\": \"fastmap\",\n      \"Version\": \"1.1.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Hash\": \"f7736a18de97dea803bde0a2daaafb27\"\n    },\n    \"fontawesome\": {\n      \"Package\": \"fontawesome\",\n      \"Version\": \"0.5.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"htmltools\",\n        \"rlang\"\n      ],\n      \"Hash\": \"1e22b8cabbad1eae951a75e9f8b52378\"\n    },\n    \"fs\": {\n      \"Package\": \"fs\",\n      \"Version\": \"1.6.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\"\n      ],\n      \"Hash\": \"94af08e0aa9675a16fadbb3aaaa90d2a\"\n    },\n    \"generics\": {\n      \"Package\": \"generics\",\n      \"Version\": \"0.1.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\"\n      ],\n      \"Hash\": \"15e9634c0fcd294799e9b2e929ed1b86\"\n    },\n    \"glue\": {\n      \"Package\": \"glue\",\n      \"Version\": \"1.6.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\"\n      ],\n      \"Hash\": \"4f2596dfb05dac67b9dc558e5c6fba2e\"\n    },\n    \"here\": {\n      \"Package\": \"here\",\n      \"Version\": \"1.0.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"rprojroot\"\n      ],\n      \"Hash\": \"24b224366f9c2e7534d2344d10d59211\"\n    },\n    \"highr\": {\n      \"Package\": \"highr\",\n      \"Version\": \"0.10\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"xfun\"\n      ],\n      \"Hash\": \"06230136b2d2b9ba5805e1963fa6e890\"\n    },\n    \"htmltools\": {\n      \"Package\": \"htmltools\",\n      \"Version\": \"0.5.5\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"base64enc\",\n        \"digest\",\n        \"ellipsis\",\n        \"fastmap\",\n        \"grDevices\",\n        \"rlang\",\n        \"utils\"\n      ],\n      \"Hash\": \"ba0240784ad50a62165058a27459304a\"\n    },\n    \"httr\": {\n      \"Package\": \"httr\",\n      \"Version\": \"1.4.5\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"R6\",\n        \"curl\",\n        \"jsonlite\",\n        \"mime\",\n        \"openssl\"\n      ],\n      \"Hash\": \"f6844033201269bec3ca0097bc6c97b3\"\n    },\n    \"humaniformat\": {\n      \"Package\": \"humaniformat\",\n      \"Version\": \"0.6.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"Rcpp\",\n        \"methods\"\n      ],\n      \"Hash\": \"d521cf9db39ca79250a00029661fb7cd\"\n    },\n    \"jquerylib\": {\n      \"Package\": \"jquerylib\",\n      \"Version\": \"0.1.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"htmltools\"\n      ],\n      \"Hash\": \"5aab57a3bd297eee1c1d862735972182\"\n    },\n    \"jsonlite\": {\n      \"Package\": \"jsonlite\",\n      \"Version\": \"1.8.5\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"methods\"\n      ],\n      \"Hash\": \"3ee4d9899e4db3e976fc82b98d24a31a\"\n    },\n    \"knitr\": {\n      \"Package\": \"knitr\",\n      \"Version\": \"1.43\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"evaluate\",\n        \"highr\",\n        \"methods\",\n        \"tools\",\n        \"xfun\",\n        \"yaml\"\n      ],\n      \"Hash\": \"9775eb076713f627c07ce41d8199d8f6\"\n    },\n    \"lifecycle\": {\n      \"Package\": \"lifecycle\",\n      \"Version\": \"1.0.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"glue\",\n        \"rlang\"\n      ],\n      \"Hash\": \"001cecbeac1cff9301bdc3775ee46a86\"\n    },\n    \"magrittr\": {\n      \"Package\": \"magrittr\",\n      \"Version\": \"2.0.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"7ce2733a9826b3aeb1775d56fd305472\"\n    },\n    \"memoise\": {\n      \"Package\": \"memoise\",\n      \"Version\": \"2.0.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"cachem\",\n        \"rlang\"\n      ],\n      \"Hash\": \"e2817ccf4a065c5d9d7f2cfbe7c1d78c\"\n    },\n    \"mime\": {\n      \"Package\": \"mime\",\n      \"Version\": \"0.12\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"tools\"\n      ],\n      \"Hash\": \"18e9c28c1d3ca1560ce30658b22ce104\"\n    },\n    \"openssl\": {\n      \"Package\": \"openssl\",\n      \"Version\": \"2.0.6\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"askpass\"\n      ],\n      \"Hash\": \"0f7cd2962e3044bb940cca4f4b5cecbe\"\n    },\n    \"pillar\": {\n      \"Package\": \"pillar\",\n      \"Version\": \"1.9.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"cli\",\n        \"fansi\",\n        \"glue\",\n        \"lifecycle\",\n        \"rlang\",\n        \"utf8\",\n        \"utils\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"15da5a8412f317beeee6175fbc76f4bb\"\n    },\n    \"pkgconfig\": {\n      \"Package\": \"pkgconfig\",\n      \"Version\": \"2.0.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"utils\"\n      ],\n      \"Hash\": \"01f28d4278f15c76cddbea05899c5d6f\"\n    },\n    \"purrr\": {\n      \"Package\": \"purrr\",\n      \"Version\": \"1.0.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"lifecycle\",\n        \"magrittr\",\n        \"rlang\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"d71c815267c640f17ddbf7f16144b4bb\"\n    },\n    \"rappdirs\": {\n      \"Package\": \"rappdirs\",\n      \"Version\": \"0.3.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"5e3c5dc0b071b21fa128676560dbe94d\"\n    },\n    \"renv\": {\n      \"Package\": \"renv\",\n      \"Version\": \"1.0.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"utils\"\n      ],\n      \"Hash\": \"c321cd99d56443dbffd1c9e673c0c1a2\"\n    },\n    \"rlang\": {\n      \"Package\": \"rlang\",\n      \"Version\": \"1.1.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"utils\"\n      ],\n      \"Hash\": \"a85c767b55f0bf9b7ad16c6d7baee5bb\"\n    },\n    \"rmarkdown\": {\n      \"Package\": \"rmarkdown\",\n      \"Version\": \"2.22\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"bslib\",\n        \"evaluate\",\n        \"fontawesome\",\n        \"htmltools\",\n        \"jquerylib\",\n        \"jsonlite\",\n        \"knitr\",\n        \"methods\",\n        \"stringr\",\n        \"tinytex\",\n        \"tools\",\n        \"utils\",\n        \"xfun\",\n        \"yaml\"\n      ],\n      \"Hash\": \"75a01be060d800ceb14e32c666cacac9\"\n    },\n    \"rprojroot\": {\n      \"Package\": \"rprojroot\",\n      \"Version\": \"2.0.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"1de7ab598047a87bba48434ba35d497d\"\n    },\n    \"sass\": {\n      \"Package\": \"sass\",\n      \"Version\": \"0.4.6\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R6\",\n        \"fs\",\n        \"htmltools\",\n        \"rappdirs\",\n        \"rlang\"\n      ],\n      \"Hash\": \"cc3ec7dd33982ef56570229b62d6388e\"\n    },\n    \"stringi\": {\n      \"Package\": \"stringi\",\n      \"Version\": \"1.7.12\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"stats\",\n        \"tools\",\n        \"utils\"\n      ],\n      \"Hash\": \"ca8bd84263c77310739d2cf64d84d7c9\"\n    },\n    \"stringr\": {\n      \"Package\": \"stringr\",\n      \"Version\": \"1.5.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"glue\",\n        \"lifecycle\",\n        \"magrittr\",\n        \"rlang\",\n        \"stringi\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"671a4d384ae9d32fc47a14e98bfa3dc8\"\n    },\n    \"sys\": {\n      \"Package\": \"sys\",\n      \"Version\": \"3.4.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Hash\": \"34c16f1ef796057bfa06d3f4ff818a5d\"\n    },\n    \"tibble\": {\n      \"Package\": \"tibble\",\n      \"Version\": \"3.2.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"fansi\",\n        \"lifecycle\",\n        \"magrittr\",\n        \"methods\",\n        \"pillar\",\n        \"pkgconfig\",\n        \"rlang\",\n        \"utils\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"a84e2cc86d07289b3b6f5069df7a004c\"\n    },\n    \"tidyr\": {\n      \"Package\": \"tidyr\",\n      \"Version\": \"1.3.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"cpp11\",\n        \"dplyr\",\n        \"glue\",\n        \"lifecycle\",\n        \"magrittr\",\n        \"purrr\",\n        \"rlang\",\n        \"stringr\",\n        \"tibble\",\n        \"tidyselect\",\n        \"utils\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"e47debdc7ce599b070c8e78e8ac0cfcf\"\n    },\n    \"tidyselect\": {\n      \"Package\": \"tidyselect\",\n      \"Version\": \"1.2.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"glue\",\n        \"lifecycle\",\n        \"rlang\",\n        \"vctrs\",\n        \"withr\"\n      ],\n      \"Hash\": \"79540e5fcd9e0435af547d885f184fd5\"\n    },\n    \"tinytex\": {\n      \"Package\": \"tinytex\",\n      \"Version\": \"0.45\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"xfun\"\n      ],\n      \"Hash\": \"e4e357f28c2edff493936b6cb30c3d65\"\n    },\n    \"utf8\": {\n      \"Package\": \"utf8\",\n      \"Version\": \"1.2.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"1fe17157424bb09c48a8b3b550c753bc\"\n    },\n    \"vctrs\": {\n      \"Package\": \"vctrs\",\n      \"Version\": \"0.6.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"glue\",\n        \"lifecycle\",\n        \"rlang\"\n      ],\n      \"Hash\": \"d0ef2856b83dc33ea6e255caf6229ee2\"\n    },\n    \"withr\": {\n      \"Package\": \"withr\",\n      \"Version\": \"2.5.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"grDevices\",\n        \"graphics\",\n        \"stats\"\n      ],\n      \"Hash\": \"c0e49a9760983e81e55cdd9be92e7182\"\n    },\n    \"xfun\": {\n      \"Package\": \"xfun\",\n      \"Version\": \"0.39\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"stats\",\n        \"tools\"\n      ],\n      \"Hash\": \"8f56e9acb54fb525e66464d57ab58bcb\"\n    },\n    \"yaml\": {\n      \"Package\": \"yaml\",\n      \"Version\": \"2.3.7\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Hash\": \"0d0056cc5383fbc240ccd0cb584bf436\"\n    }\n  }\n}\n\n\n\n\n\nRestoring renv\nIf renv is activated but it recognized that (not all of) the packages listed in the renv.lock file are installed, renv will suggest to restore the project library using renv::restore():\n\n* This project contains a lockfile, but none of the recorded packages are installed.\n* Use `renv::restore()` to restore the project library.\n\n\nrenv::restore()\n\nThis will generate a list of files that will be updated.\n\n\nClick here to view an example output of the renv::restore() command.\n\n\nThe following package(s) will be updated:\n\n# CRAN ===============================\n- R6            [* -&gt; 2.5.1]\n- base64enc     [* -&gt; 0.1-3]\n- bslib         [* -&gt; 0.5.0]\n- cachem        [* -&gt; 1.0.8]\n- cli           [* -&gt; 3.6.1]\n- data.table    [* -&gt; 1.14.8]\n- digest        [* -&gt; 0.6.31]\n- ellipsis      [* -&gt; 0.3.2]\n- evaluate      [* -&gt; 0.21]\n- fastmap       [* -&gt; 1.1.1]\n- fontawesome   [* -&gt; 0.5.1]\n- fs            [* -&gt; 1.6.2]\n- glue          [* -&gt; 1.6.2]\n- here          [* -&gt; 1.0.1]\n- highr         [* -&gt; 0.10]\n- htmltools     [* -&gt; 0.5.5]\n- jquerylib     [* -&gt; 0.1.4]\n- jsonlite      [* -&gt; 1.8.5]\n- knitr         [* -&gt; 1.43]\n- lifecycle     [* -&gt; 1.0.3]\n- magrittr      [* -&gt; 2.0.3]\n- memoise       [* -&gt; 2.0.1]\n- mime          [* -&gt; 0.12]\n- rappdirs      [* -&gt; 0.3.3]\n- rlang         [* -&gt; 1.1.1]\n- rmarkdown     [* -&gt; 2.22]\n- rprojroot     [* -&gt; 2.0.3]\n- sass          [* -&gt; 0.4.6]\n- stringi       [* -&gt; 1.7.12]\n- stringr       [* -&gt; 1.5.0]\n- tinytex       [* -&gt; 0.45]\n- vctrs         [* -&gt; 0.6.3]\n- xfun          [* -&gt; 0.39]\n- yaml          [* -&gt; 2.3.7]\n\nDo you want to proceed? [y/N]: \n\n\nIf you want to proceed with the update, type y and hit enter.\n\n\nAdding / removing packages\nInstall packages:\n\n1install.packages(\"PACKAGE_NAME\")\n2renv::install(\"PACKAGE_NAME\")\n\n\n1\n\nReplace PACKAGE_NAME with the actual name of the package that you want to install.\n\n2\n\nReplace PACKAGE_NAME with the actual name of the package that you want to install.\n\n\n\n\nRemove packages:\n\n1remove.packages(\"PACKAGE_NAME\")\n2renv::remove(\"PACKAGE_NAME\")\n\n\n1\n\nReplace PACKAGE_NAME with the actual name of the package that you want to remove.\n\n2\n\nReplace PACKAGE_NAME with the actual name of the package that you want to remove.\n\n\n\n\nCall renv::snapshot() to save the new state of the project library to the renv.lock:\n\nrenv::snapshot()\n\n\n\nCommit your changes\nThe renv.lock is checked into version control, so after you updated it, make a new commit:\n\ngit add renv.lock\n1git commit -m \"add package PACKAGE_NAME to renv\"\n\n\n1\n\nReplace PACKAGE_NAME with the actual name of the package that you installed. Adapt the commit message as needed."
  },
  {
    "objectID": "misc/contributing.html#sec-references",
    "href": "misc/contributing.html#sec-references",
    "title": "Contributing",
    "section": "References",
    "text": "References\n\n “Citations & Footnotes” in the Quarto documentation.\n HTML options for references.\n\n\nCite a reference\nReferences are stored in references.bib.\n\n\nClick here to view the full references.bib file of this project.\n\n\n\n\nreferences.bib\n\n@book{community2022,\n    title = {The Turing Way: A handbook for reproducible, ethical and collaborative research},\n    author = {{The Turing Way Community}},\n    year = {2022},\n    month = {07},\n    date = {2022-07-27},\n    publisher = {Zenodo},\n    doi = {10.5281/zenodo.3233853},\n    url = {https://zenodo.org/record/3233853},\n    note = {License: The process documents and data are made available under a \\href{https://creativecommons.org/licenses/by/4.0/}{CC BY 4.0 license}. Software are made available under an \\href{https://opensource.org/license/mit/}{MIT license}. Website: \\url{https://the-turing-way.netlify.app/}}\n}\n\n@book{chacon2014,\n    title = {Pro Git},\n    author = {Chacon, Scott and Straub, Ben},\n    year = {2014},\n    date = {2014},\n    publisher = {Apress},\n    doi = {10.1007/978-1-4842-0076-6},\n    url = {http://dx.doi.org/10.1007/978-1-4842-0076-6},\n    note = {License: \\href{https://creativecommons.org/licenses/by-nc/4.0/}{CC BY-NC}. Source: \\url{https://github.com/progit/progit2}. Website: \\url{https://git-scm.com/book/en/v2}}\n}\n\n@software{allaire2022,\n    title = {Quarto},\n    author = {Allaire, J.J. and Teague, Charles and Xie, Yihui and Dervieux, Christophe},\n    year = {2022},\n    month = {01},\n    date = {2022-01-10},\n    doi = {10.5281/zenodo.5960048},\n    url = {https://github.com/quarto-dev/quarto-cli},\n    version = {1.2},\n    note = {License: \\href{https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html}{GNU GPL v2}. \\url{https://github.com/quarto-dev/quarto-web}. Website: \\url{https://quarto.org/}}\n}\n\n@article{millman2018,\n    title = {Teaching Computational Reproducibility for Neuroimaging},\n    author = {Millman, K. Jarrod and Brett, Matthew and Barnowski, Ross and Poline, Jean-Baptiste},\n    year = {2018},\n    month = {10},\n    date = {2018-10-22},\n    journal = {Frontiers in Neuroscience},\n    volume = {12},\n    doi = {10.3389/fnins.2018.00727},\n    url = {https://dx.doi.org/10.3389/fnins.2018.00727},\n    note = {License: \\href{https://creativecommons.org/licenses/by/4.0/}{CC BY 4.0}. Website: \\url{http://dx.doi.org/10.3389/fnins.2018.00727}}\n}\n\n@article{milligan2014,\n    title = {Introduction to the Bash Command Line},\n    author = {Milligan, Ian and Baker, James},\n    editor = {Crymble, Adam},\n    year = {2014},\n    month = {09},\n    date = {2014-09-20},\n    journal = {Programming Historian},\n    number = {3},\n    doi = {10.46430/phen0037},\n    url = {https://dx.doi.org/10.46430/phen0037},\n    langid = {en}\n}\n\n@misc{mcbain2019,\n  author = {McBain, Miles},\n  title = {Git for Scientists},\n  year = {2019},\n  url = {https://milesmcbain.github.io/git_4_sci/},\n  note = {License: \\href{http://creativecommons.org/licenses/by-sa/4.0/}{CC BY-SA 4.0}. Source: \\url{https://github.com/MilesMcBain/git_4_sci/}. Website: \\url{https://milesmcbain.github.io/git_4_sci/}}\n}\n\n\n@book{capes2023,\n    title = {swcarpentry/shell-novice: Software Carpentry: the UNIX shell},\n    author = {Capes, Gerard and {Bkmgit} and Deppen, Jacob and Devenyi, G. A. and Ball, Alexander James and Fowler-Wright, Piper and Visconti, Alessia and Dusenberry, Jeff and Vera, Jessica and Harrison, Randal Sean and Bilke, Andreas and Welch, Jessica Nicole and Thorp, Kelly and Hernandez, Alfredo and {Ashkan Mirzaee} and Winjum, Benjamin and Daley, Chris and Wright, Clay and {Colinmorris} and George, Dave and {Ephantus2017} and Myklebust, Erik and {Löffler}, Frank and {HariEpuri} and Wolff, Holger and {Kairsten Fay} and Reyes, Luna Luisa Sanchez and Politze, Marius and Belkin, Maxim and Porter, Nathaniel and {, Nkicg6} and Ziegner, Norman and Stevens, Sarah LR and McCartney, Sean and Njambi, Serah and {Ramisetti} and Borrego, Stacey and Brown, Andrew Christopher and Cryan, Ashley and {Mehrdadbn9} and {Md Intekhabul Hafiz} and {Niketagrawal} and Benson, Noah and McDivitt, Aaron and Budd, Aidan and Stahlke, Amanda and {Andra{\\v{s}} T{\\v{s}}it{\\v{s}}kan} and Stewart, Andrew and Smith, Becky and Martlin, Catherine and {Knüpfer}, Christian and McKain, David and Wilby, David and Salmanidou, Dimitra and Turner, Dave and Scriven, Edan and Wallace, Edward and McAulay, Elizabeth and Roesch, Etienne and Solinsky, Frank and Lipari, Giordano and Starling, Hamish and Barrass, Iain and {Isil Poyraz Bilgin} and {JSheffield159} and Acris, James and Bradley, Jonathan and Juvonen, Matti and Napier, Kathryn and Ross, Kenton and Ernst, Kevin and Trombach, Lukas and Chorley, Martin and {, Melissa} and Lake, Mike and Renfro, Mike and Renfro, Mike and {NJ} and {, Natali} and McKinlay, Nathan and Soranzo, Nicola and {Rodríguez-Sánchez}, Pablo and Wiringa, Peter and Viktorin, Petr and Rigby, Richard and {, Rkm} and Elliott, Ryan S. and {Lelièvre}, Samuel and Lacalle, Santiago and Kumar, Sujai and Liang, Tong and Gatua, Winfred and Sun, Yi and {Cgmerrick} and {Daking4} and Patel, Deep and {Erich333} and {Karl-Holten} and {Kathymd} and {Laporpe} and {Naveendangeti} and {Nbehrnd} and {, Sophie} and {Tbert} and Couch, Tom and Shrestha, Ram Krishna and {Zzhang60} and {{\"}Eli}},\n    year = {2023},\n    month = {05},\n    date = {2023-05-02},\n    publisher = {Zenodo},\n    doi = {10.5281/ZENODO.595899},\n    url = {https://zenodo.org/record/595899},\n    note = {License: \\href{https://creativecommons.org/licenses/by/4.0/}{CC BY 4.0}. Source: \\url{https://github.com/swcarpentry/shell-novice}. Website: \\url{https://swcarpentry.github.io/shell-novice/}}\n}\n\n@book{koziar2023,\n    title = {swcarpentry/git-novice: Software Carpentry: Version Control with Git 2023-05},\n    author = {Koziar, Katherine E. and {Madicken Munk} and Greene, Andrew and Rasel, Annajiat Alim and Bennett, Ed and Stevens, Sarah LR and Turnator, Ece and {Gorroño}, Jon Haitz Legarreta and Leinweber, Katrin and Nederbragt, Lex and {Lelièvre}, Samuel and {Vyas Ramasubramani} and Gitter, Anthony and Cassol, Daniela and Zhu, Judy and Soranzo, Nicola and Hejazi, Nima S and Deconinck, Wouter and {Laurentheirendt} and Clarke, Alison and Bressan, Camilla and Guan, Charles and Urizar, Cristina and Horsfall, Dave and {, David} and {, Deborah} and Lowther, Ed and {Fwoerister} and Bissey, {François} and {HaoZeke} and Kent, James and Holmes, Jessica and Huddleston, John and Lehtonen, Juho and Word, Karen and Lieret, Kilian and Modenese, Luca and Foscato, Marco and {Bjørnstad}, Marius and Matney, Mark and Juvonen, Matti and Belkin, Maxim and {Mingrui Yang} and Silantyeva, Olga and McCann, Patrick and Lanfear, Riley and Bartholomew, Sadie L. and Cox, Sam and Gruber, Scott and Jamieson, Stewart Christopher and Arabas, Sylwester and Russell, Tom and Koskela, Tuomas and {, Will} and Wolff, Benjamin and {, Catherinef37} and {Huijun ZHU} and {Kerimoff}},\n    year = {2023},\n    month = {05},\n    date = {2023-05-08},\n    publisher = {Zenodo},\n    doi = {10.5281/ZENODO.7908089},\n    url = {https://zenodo.org/record/7908089},\n    note = {License: \\href{https://creativecommons.org/licenses/by/4.0/}{CC BY 4.0}. Source: \\url{https://github.com/swcarpentry/git-novice}. Website: \\url{https://swcarpentry.github.io/git-novice/}.}\n}\n\n@article{bryan2018,\n    title = {Excuse Me, Do You Have a Moment to Talk About Version Control?},\n    author = {Bryan, Jennifer},\n    year = {2018},\n    month = {01},\n    date = {2018-01-02},\n    journal = {The American Statistician},\n    pages = {20--27},\n    volume = {72},\n    number = {1},\n    doi = {10.1080/00031305.2017.1399928},\n    url = {http://dx.doi.org/10.1080/00031305.2017.1399928},\n    langid = {en},\n    note = {Website: \\url{https://doi.org/10.1080/00031305.2017.1399928}.}\n}\n\n@article{ram2013,\n    title = {Git can facilitate greater reproducibility and increased transparency in science},\n    author = {Ram, Karthik},\n    year = {2013},\n    month = {02},\n    date = {2013-02-28},\n    journal = {Source Code for Biology and Medicine},\n    volume = {8},\n    number = {1},\n    doi = {10.1186/1751-0473-8-7},\n    url = {http://dx.doi.org/10.1186/1751-0473-8-7},\n    langid = {en},\n    note = {License: \\href{https://creativecommons.org/licenses/by/2.0/}{CC BY 2.0}. Source: \\url{https://github.com/karthik/smb_git}. Website: \\url{https://doi.org/10.1186/1751-0473-8-7}}\n}\n\n@article{perez-riverol2016,\n    title = {Ten Simple Rules for Taking Advantage of Git and GitHub},\n    author = {Perez-Riverol, Yasset and Gatto, Laurent and Wang, Rui and Sachsenberg, Timo and Uszkoreit, Julian and Leprevost, Felipe da Veiga and Fufezan, Christian and Ternent, Tobias and Eglen, Stephen J. and Katz, Daniel S. and Pollard, Tom J. and Konovalov, Alexander and Flight, Robert M. and Blin, Kai and {Vizcaíno}, Juan Antonio},\n    editor = {Markel, Scott},\n    year = {2016},\n    month = {07},\n    date = {2016-07-14},\n    journal = {PLOS Computational Biology},\n    pages = {e1004947},\n    volume = {12},\n    number = {7},\n    doi = {10.1371/journal.pcbi.1004947},\n    url = {http://dx.doi.org/10.1371/journal.pcbi.1004947},\n    langid = {en},\n    note = {License: \\href{https://creativecommons.org/licenses/by/4.0/}{CC BY 4.0}. Source: \\url{https://github.com/ypriverol/github-paper}. Website: \\url{https://doi.org/10.1371/journal.pcbi.1004947}}\n}\n\n@book{bryan2023,\n  author = {Bryan, Jenny},\n  title = {Happy Git and GitHub for the useR},\n  year = {2023},\n  publisher = {Jenny Bryan},\n  url = {https://happygitwithr.com},\n  note = {License: \\href{https://creativecommons.org/licenses/by-nc/4.0/}{CC BY-NC 4.0}. Source: \\url{https://github.com/jennybc/happy-git-with-r}. Website: \\url{https://happygitwithr.com/}}\n}\n\n@article{lowndes2022,\n    title = {Openscapes Champions Lesson Series},\n    author = {Lowndes, Julia Stewart and Robinson, Erin},\n    year = {2022},\n    month = {12},\n    date = {2022-12-06},\n    doi = {10.5281/ZENODO.7407247},\n    url = {https://zenodo.org/record/7407247},\n    langid = {en},\n    note = {License: \\href{https://creativecommons.org/licenses/by/4.0/}{CC BY 4.0}. Source: \\url{https://github.com/Openscapes/series}. Website: \\url{https://openscapes.github.io/series/}}\n}\n\n@book{GitHub2023,\n  author = {GitHub},\n  title = {GitHub Docs},\n  year = {2023},\n  publisher = {GitHub},\n  url = {https://docs.github.com/en},\n  note = {License: \\href{https://creativecommons.org/licenses/by-nc/4.0/}{CC BY-NC 4.0}. Source: \\href{https://docs.github.com/en}{https://docs.github.com/en}}\n}\n\n@article{blischak2016,\n    title = {A Quick Introduction to Version Control with Git and GitHub},\n    author = {Blischak, John D. and Davenport, Emily R. and Wilson, Greg},\n    editor = {Ouellette, Francis},\n    year = {2016},\n    month = {01},\n    date = {2016-01-19},\n    journal = {PLOS Computational Biology},\n    pages = {e1004668},\n    volume = {12},\n    number = {1},\n    doi = {10.1371/journal.pcbi.1004668},\n    url = {http://dx.doi.org/10.1371/journal.pcbi.1004668},\n    langid = {en},\n    note = {License: \\href{https://creativecommons.org/licenses/by/4.0/}{CC BY 4.0}. Source: \\href{https://doi.org/10.1371/journal.pcbi.1004668}{https://doi.org/10.1371/journal.pcbi.1004668}}\n}\n\n@online{aimrsf2023,\n  author = {{AI for Multiple Long-term Conditions Research Support Facility}},\n  title = {Introduction to version control with git},\n  year = {2023},\n  month = {06},\n  url = {https://www.youtube.com/watch?v=z9-qAGq78qE},\n  note = {License: \\href{https://creativecommons.org/licenses/by/4.0/}{CC BY 4.0}. Source: \\url{https://github.com/aim-rsf/training/tree/main/version-control}.}\n}\n\n\n\nUse the citation handle of the .bib-entry that you want to cite. For example use @chacon2014 to cite Chacon and Straub (2014). For details, see the chapter on “Citations & Footnotes” in the Quarto documentation. Add the specific references that you used to the bottom of the document. If the reference consists of multiple chapters and pages, try to specify the exact chapter or page.\n\n\nAdd a new reference\n\nOpen references.qmd\nSwitch to the Visual Quarto editor.\nMove the cursor into any place in the document.\nClick on Insert and select @ Citation ...\nIf the reference has a DOI:\nSelect From DOI\nPaste the DOI\nSelect Insert\nThis should add the new reference to references.bib.\nMove the citation key to the correct place\n\n\n\nAdd license information\nWe want to keep track of license information. If you add a new reference, please add the license information manually.\n\nGo to references.bib and find the reference.\nInside the .bib-entry for the reference add a new field called note that includes the license information.\n\n\n@book{\n  note = {License: CC BY-NC}\n}\n\nFor example, this is the references for Chacon and Straub (2014):\n\n@book{chacon2014,\n    title = {Pro Git},\n    author = {Chacon, Scott and Straub, Ben},\n    year = {2014},\n    date = {2014},\n    publisher = {Apress},\n    doi = {10.1007/978-1-4842-0076-6},\n    url = {http://dx.doi.org/10.1007/978-1-4842-0076-6},\n    note = {License: CC BY-NC}\n}"
  },
  {
    "objectID": "misc/contributing.html#sec-code",
    "href": "misc/contributing.html#sec-code",
    "title": "Contributing",
    "section": "Code",
    "text": "Code\n\n “HTML Code Blocks” in the Quarto documentation\n\n\nAdd code snippets\nAdd code snippets to a Quarto document like this:\n```{bash}\ngit status\n```\n\n\n\n\n\n\nDisable code execution in all Quarto documents by default!\n\n\n\nPlace the following code in the YAML header of each Quarto document:\n\nengine: knitr\nexecute:\n  eval: false\n\n\n\nExample: Click here for the YAML header of the current document.\n\n\n\n\nmisc/contributing.qmd\n\n---\nauthor: \"\"\n---\n\n# Contributing {.unnumbered}\n\n\n\n\n\nClick here to learn more.\n\nQuarto enables the inclusion of executable code blocks in Markdown. This empowers users to create reproducible documents and reports, as the code needed for generating the output is embedded within the document and automatically executed during rendering.\nHowever, in this guide, we usually only want to display code but not execute it! We therefore need to disable code execution in the YAML header of each Quarto document.\nThe YAML header in a Quarto document is used to specify important metadata and settings for the document. It is typically placed at the top of the document enclosed between three dashes (---) to separate it from the main content. The YAML header provides instructions to the Quarto rendering engine on how to process and present the document.\n\n\n\n\n\nReference external code\nYou can reference external code. For example, the following code block will:\n\n\n\n\n\n\n\n\n\n\n\n\n\ndescription\ncode\n\n\n\n\n1\nreference the _quarto.yml file\n#&#124; file: _quarto.yml\n\n\n2\ndisplay the first five lines of code\necho=c(1:5)\n\n\n3\nadd code line numbers\n#&#124; code-line-numbers: true\n\n\n4\nadd a filename to the code block\nfilename=\"_quarto.yml\"\n\n\n\n\n```{bash, filename=\"_quarto.yml\", echo=c(1:5)}\n#| file: _quarto.yml\n#| code-line-numbers: true\n```\n\n\nClick here for the output of this example.\n\n\n\n\n_quarto.yml\n\nproject:\n  # project options (https://quarto.org/docs/reference/projects/options.html):\n  type: book\n  output-dir: _book\n  execute-dir: project\n\n\n\n\n\nAdd code annotations\n\n “Code Annotation” in the Quarto documentation\n\n\nCode blocks and executable code cells in Quarto can include line-based annotations. Line-based annotations provide a way to attach explanation to lines of code much like footnotes.\n\nFor example, this is a code annotation for the git status command:\n```{bash}\ngit status # &lt;1&gt;\n```\n1. `git status` displays the state of the working directory and the staging area."
  },
  {
    "objectID": "misc/contributing.html#sec-images",
    "href": "misc/contributing.html#sec-images",
    "title": "Contributing",
    "section": "Images",
    "text": "Images\n\nBackground\nImages are stored in a NextCloud folder. They are downloaded into the /static folder using the command specified in the Makefile.\n\n\nInstallation\nYou need to install the following packages:\n\nGNU Wget\nGNU Make\n\n\n\n\n\n\nPrerequisite: Install Homebrew\n\n\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n\nAfter you installed Homebrew, install GNU Wget\n\n\nbrew install wget\n\nGNU Make should already be installed. Try by entering the following command into the Terminal:\n\nmake --version\n\n\n\nTBA\n\n\nTBA\n\n\n\n\n\nRetrieve images\nAfter you installed all the required software, run this command:\n\nmake download-images\n\n\n\n\n\n\n\nWhat’s a Makefile and what does it do?\n\n\n\n\n\n\n\n\nMakefile\n\n# define URL to Nextcloud where static files are stored:\nIMAGES_URL=https://cloud.uni-hamburg.de/s/aD7NTNB9f4NDorT/download\n# define a name for the .zip-archive with the cloud contents:\nIMAGES_ARCHIVE=version-control-book.zip\n# define the name of the local folder:\nIMAGES_DIR=static/\n\n# define the default targets of the make command\nall: download-images\n\n# download and extract images:\ndownload-images:\n    wget $(IMAGES_URL) -O $(IMAGES_ARCHIVE)\n    unzip -j -o $(IMAGES_ARCHIVE) -d $(IMAGES_DIR)\n    rm -f $(IMAGES_ARCHIVE)\n\n# clean downloaded images folder:\nclean:\n    rm -rf $(IMAGES_DIR)*\n\n\n\n\n\n\n\nAdd a new image\n\nBecome a collaborator on the UHH Cloud folder.\nGo to the UHH Cloud folder.\nPlace the new image inside the folder. Please use - to separate word in the filename.\nReference the image in the Quarto document relative to the root of the project directory:\n\n\n![](static/NEW-IMAGE.png)\n\n\n\nDownload images in pre-render command\nIt’s also possible to include the make download-images as a project script in the pre-render script. This would re-execute make download-images before every render. For the moment, we disabled this option, but it can be enabled in _quarto.yml."
  },
  {
    "objectID": "misc/contributing.html#sec-variables",
    "href": "misc/contributing.html#sec-variables",
    "title": "Contributing",
    "section": "Variables",
    "text": "Variables\n\n “Variables” in the Quarto documentation\n\nQuarto offers a number of ways to include dynamic variables within documents. Dynamic variables are useful for externalizing content that varies depending on context, or as an alternative to repeating a value in multiple places.\nIn this project, we use a project-level _variables.yml file to define variables. Variables can be either simple values or can include arbitrary Markdown content.\n\n\n\n_variables.yml (excerpt)\n\nlinks:\n  email: mailto:lennart.wittkuhn@uni-hamburg.de\n\n\n\n\nClick here to view the full _variables.yml file of this project.\n\n\n\n\n_variables.yml\n\n# https://quarto.org/docs/authoring/variables.html\nlinks:\n  email: mailto:lennart.wittkuhn@uni-hamburg.de\n  github: https://github.com/lnnrtwttkhn/version-control-book\n  issues: https://github.com/lnnrtwttkhn/version-control-book/issues\n  site: https://lennartwittkuhn.com/version-control-book\n  proposal: https://lennartwittkuhn.com/ddlitlab-proposal\n  nextcloud: https://cloud.uni-hamburg.de/s/aD7NTNB9f4NDorT\n  new_issues: https://github.com/lnnrtwttkhn/version-control-book/issues/new\nyears: \"2023 -- 2024\"\nlanguage:\n  dont:\n    yes: \"don't\"\n    no: \"do not\"\n  folder:\n    yes: \"folder\"\n    no: \"directory\"\n  documentation:\n    yes: \"documentation\"\n    no: \"docs\"\n\n\n\nThe var shortcode then allows to include references to those variables within any document in this project. For example, to include the link to the Nextcloud folder that stores static contents (images etc.) as a variable in a document, use {{&lt; var links.nextcloud &gt;}}.\nFor more details on variables, read the chapter on Variables in the Quarto documentation."
  },
  {
    "objectID": "misc/contributing.html#sec-icons",
    "href": "misc/contributing.html#sec-icons",
    "title": "Contributing",
    "section": "Fontawesome Icons",
    "text": "Fontawesome Icons\n\n Font Awesome Extension for Quarto\n Free Font Awesome icons\n\nWe use the Font Awesome Extension for Quarto to include Font Awesome icons.\n\nThis extension provides support including free icons provided by Font Awesome. Icons can be used in both HTML (via Font Awesome 6 Free) and PDF (via the fontawesome5 LaTeX package).\n\nThis extension includes support for only free Font Awesome icons.\nTo embed an icon, use the {{&lt; fa &gt;}} shortcode. For example, {{&lt; fa thumbs-up &gt;}} will result in . For details, see the project documentation on GitHub."
  },
  {
    "objectID": "misc/contributing.html#sec-acknowledgements",
    "href": "misc/contributing.html#sec-acknowledgements",
    "title": "Contributing",
    "section": "Acknowledgements & Attribution",
    "text": "Acknowledgements & Attribution\n\nThe Quarto documentation (Allaire et al. 2022), in particular the chapters on Variables, Quarto Extensions, “Code Annotation” (License: GNU GPL v2)\n(Blischak, Davenport, and Wilson 2016)\nThe Font Awesome Extension for Quarto (License: MIT)\n\n\n\n\n\nAllaire, J. J., Charles Teague, Yihui Xie, and Christophe Dervieux. 2022. “Quarto.” https://doi.org/10.5281/zenodo.5960048. License: GNU GPL v2. https://github.com/quarto-dev/quarto-web. Website: https://quarto.org/.\n\n\nBlischak, John D., Emily R. Davenport, and Greg Wilson. 2016. “A Quick Introduction to Version Control with Git and GitHub.” Edited by Francis Ouellette. PLOS Computational Biology 12 (1): e1004668. https://doi.org/10.1371/journal.pcbi.1004668. License: CC BY 4.0. Source: https://doi.org/10.1371/journal.pcbi.1004668.\n\n\nChacon, Scott, and Ben Straub. 2014. Pro Git. Apress. https://doi.org/10.1007/978-1-4842-0076-6. License: CC BY-NC. Source: https://github.com/progit/progit2. Website: https://git-scm.com/book/en/v2."
  },
  {
    "objectID": "misc/style-guide.html#summary",
    "href": "misc/style-guide.html#summary",
    "title": "Style Guide",
    "section": "Summary",
    "text": "Summary\n\nWrite one sentence per line\nUse consistent language"
  },
  {
    "objectID": "misc/style-guide.html#write-one-sentence-per-line",
    "href": "misc/style-guide.html#write-one-sentence-per-line",
    "title": "Style Guide",
    "section": "Write one sentence per line",
    "text": "Write one sentence per line\nPlease write each sentence on a new line. Having each sentence on a new line will make no difference to how the text is displayed, there will still be paragraphs, but it will mean that any pull requests will be easier to check; the changes will be on a single line instead of somewhere in a paragraph. Consider the example below.\nToday you are you, that is truer than true. There is no one alive who is youer than you. - Dr Seuss\nA pull request on this correcting it to have a ‘.’ after Dr would show as a change to the whole paragraph. Contrast this with the next example which will be displayed online in the exact same way, but would see a change to a single line.\nToday you are you, that is truer than true.\nThere is no one alive who is youer than you.\n- Dr Seuss"
  },
  {
    "objectID": "misc/style-guide.html#use-consistent-language",
    "href": "misc/style-guide.html#use-consistent-language",
    "title": "Style Guide",
    "section": "Use consistent language",
    "text": "Use consistent language\nWe try to use consistent language:\n\n\n\n\n\n\n\nTRUE\nFALSE\n\n\n\n\ndon’t\ndo not\n\n\nfolder\ndirectory\n\n\ndocumentation\ndocs"
  },
  {
    "objectID": "misc/style-guide.html#acknowledgements-attribution",
    "href": "misc/style-guide.html#acknowledgements-attribution",
    "title": "Style Guide",
    "section": "Acknowledgements & Attribution",
    "text": "Acknowledgements & Attribution\n\nThe Turing Way Community (2022): Style Guide\n\n\n\n\n\nThe Turing Way Community. 2022. The Turing Way: A Handbook for Reproducible, Ethical and Collaborative Research. Zenodo. https://doi.org/10.5281/zenodo.3233853. License: The process documents and data are made available under a CC BY 4.0 license. Software are made available under an MIT license. Website: https://the-turing-way.netlify.app/."
  }
]