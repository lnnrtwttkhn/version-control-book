[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Version Control of Code and Data for Scientists",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "contents.html",
    "href": "contents.html",
    "title": "1  Contents",
    "section": "",
    "text": "The estimate of the reading time for each chapter is computed by counting the words in the chapter and assuming a reading speed of 200 words per minute.\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Modified - Oldest\n        \n         \n          Modified - Newest\n        \n         \n          Reading Time (Low to High)\n        \n         \n          Reading Time (High to Low)\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nIntroduction\n\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\nJuly 13, 2023\n\n\n\n\n\n\n  \n\n\n\n\nIntroduction to Version Control\n\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\nJuly 13, 2023\n\n\n\n\n\n\n  \n\n\n\n\nCommand Line\n\n\n\n\n\n\n\n\n\n\n\n\n10 min\n\n\nJuly 13, 2023\n\n\n\n\n\n\n  \n\n\n\n\nInstallation\n\n\n\n\n\n\n\n\n\n\n\n\n3 min\n\n\nJuly 13, 2023\n\n\n\n\n\n\n  \n\n\n\n\nSetting up Git\n\n\n\n\n\n\n\n\n\n\n\n\n4 min\n\n\nJuly 13, 2023\n\n\n\n\n\n\n  \n\n\n\n\nFirst Steps with Git\n\n\n\n\n\n\n\n\n\n\n\n\n8 min\n\n\nJuly 13, 2023\n\n\n\n\n\n\n  \n\n\n\n\nGithub Intro\n\n\n\n\n\n\n\n\n\n\n\n\n7 min\n\n\nJuly 13, 2023\n\n\n\n\n\n\n  \n\n\n\n\nRewriting history\n\n\n\n\n\n\n\n\n\n\n\n\n7 min\n\n\nJuly 13, 2023\n\n\n\n\n\n\n  \n\n\n\n\nDataLad Nextcloud\n\n\n\n\n\n\n\n\n\n\n\n\n9 min\n\n\nJuly 13, 2023\n\n\n\n\n\n\n  \n\n\n\n\nSummary\n\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\nJuly 13, 2023\n\n\n\n\n\n\n  \n\n\n\n\nContributing\n\n\n\n\n\n\n\n\n\n\n\n\n11 min\n\n\nJuly 13, 2023\n\n\n\n\n\n\n  \n\n\n\n\nStyle Guide\n\n\n\n\n\n\n\n\n\n\n\n\n2 min\n\n\nJuly 13, 2023\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "chapters/intro.html",
    "href": "chapters/intro.html",
    "title": "2  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee (knuth84?) for additional discussion of literate programming."
  },
  {
    "objectID": "chapters/intro-version-control.html#learning-objetives",
    "href": "chapters/intro-version-control.html#learning-objetives",
    "title": "3  Introduction to Version Control",
    "section": "3.1 Learning Objetives",
    "text": "3.1 Learning Objetives\n\nWhat is version control?\nWhy is version control important for research?\nWhat is the difference between git and GitHub?"
  },
  {
    "objectID": "chapters/intro-version-control.html#benefits-of-version-control",
    "href": "chapters/intro-version-control.html#benefits-of-version-control",
    "title": "3  Introduction to Version Control",
    "section": "3.2 Benefits of version control",
    "text": "3.2 Benefits of version control\n\nGo back to previous versions\nStore history of changes\nCollaborate with others"
  },
  {
    "objectID": "chapters/command-line.html#introduction",
    "href": "chapters/command-line.html#introduction",
    "title": "4  Command Line",
    "section": "4.1 Introduction",
    "text": "4.1 Introduction\n\n4.1.1 Why using Git from the command line\ngit is fundamentally a command line tool. This is why comfort with the command line is essential for learning git.\n\nGUIs usually do not contain the full set of features available on the command line\nIf you search for help with git online (e.g., on Stack Overflow), you will invariably stumble across help in the form of command line instructions\n\n4.3 Shell, command line, cli, terminal\nAll these words in the title above are used interchangeably to mean the same thing: a sparse window, usually with a dark backgroud and light text, featuring a prompt followed by a cursor. In the movies hacking computers often involves people typing really fast into this window.\nThe command line interface (cli), is a text-based interface to a computer program. Pretty much everyone primarily uses a Graphical User Interface (GUI) to interact with their programs, but historically this is only recent. Most of the time we’ve had with computers has been using text-based interfaces and often the GUI can only access a subset of functionality available on the cli. There are many important programs that only have a cli (e.g. pandoc).\n‘Terminal’ is short for ‘terminal emulator’ which is to say it is a program which emulates a physical input and display device called a terminal, that used to connect to a mainframe computer in the early days of computing. It is the program that draws the dark background, light text, and cursor.\nA ‘shell’ is a program that provides a cli to your operating system. Think of the functionality your operating system provides: manipulating your file system, running and stopping programs, changing system settings etc. All of this can be done via text with a shell. When you ‘open a terminal’ the program that the terminal is talking to initially is a shell. For a given operating system you often have a choice of many shells. The most popular shell is the ‘Bourne Again Shell’ or ‘bash’. 4.4 File system navigation 4.4.1 Listing files and folders\nWe’re jumping in! Windows users, run the gitbash program now. MacOS and Linux users open a fresh terminal.\nFirst lets consider what we can see. Usually your terminal will greet you with a prompt that looks like this\n\nmiles@miles-macbook:~$\n\nOn Windows it will contain the same elements but look like this:\nmiles@miles-pc MINGW64 ~ $\nFollowed by a cursor. Type the command pwd, for ‘print working directory’, and hit enter. This will show us the folder in your file system the shell is currently looking. It should return text to the terminal like so:\nmiles@miles-macbook:~$ pwd /home/miles miles@miles-macbook:~$\nThe output can be interpreted like so:\n/ – # Root of directory structure | home – # Home folder | miles # user’s individual home folder - working directory\nNow here’s a new command: ls will list the contents of the working directory. Run that command and you will see the contents of your home folder.\nBut ls is much more versatile than this. We can use things called ‘flags’ and ‘arguments’ to interface with ls’s additional features. For example we can list the contents of our Documents folder like so:\nmiles@miles-macbook:~$ ls Documents acp_3d-1.png _cert.png parchemnt_pix2.xcf rock_opera.png the_log.txt uluru.jpg miles@miles-macbook:~$\n‘Documents’ is an argument to the ls command. We pass commands arguments by typing them after the command name.\nWe can view hidden files using the flag -a for ‘all’. Do that for the working directory like so:\nmiles@miles-macbook:~$ ls -a\nAre there more hidden files and folders than you expected? What do you notice about their file names?\nA flag distinct from an argument in that a flag is a constant not a variable. If a flag is present it ‘switches on’ certain behaviour. There are two forms: ‘–word’ and ‘-a’.\nMultiple single letter flags can be combined after a single dash. We can instruct ls to ‘list all in a long format, readable for humans’ with:\nmiles@miles-macbook:~$ ls -alh total 428K drwxr-xr-x 36 miles miles 4.0K Oct 18 15:01 . drwxr-xr-x 3 root root 4.0K Jul 30 21:14 .. -rw——- 1 miles miles 19K Oct 18 01:29 .bash_history -rw-r–r– 1 miles miles 220 Jul 30 21:14 .bash_logout -rw-r–r– 1 miles miles 3.6K Oct 17 21:37 .bashrc -rw-r–r– 1 miles miles 16K Oct 17 21:34 .bashrc.swp drwxr-xr-x 2 miles miles 4.0K Oct 16 19:49 bin drwxr-xr-x 12 miles miles 4.0K Oct 17 21:46 .cache drwxr-xr-x 4 miles miles 4.0K Aug 31 22:31 code drwx—— 23 miles miles 4.0K Oct 18 00:30 .config drwxr-xr-x 2 miles miles 4.0K Jul 30 21:16 Desktop\n4.4.1.1 Combining arguments and flags\nIn this exercise you will figure out how to use arguments and flags together.\nUsing the flags you’ve seen so far, experiment to determine what order the flags have to be in.\nCreate a command that lists all the contents of your ‘Documents’ folder in long format.\n4.4.1.2 One flag to rule them all\nMost commands can give you useage information about what kinds of flags and arguments they support if you call them with the flag –help, sometimes -h will work also.\nAnswer the following:\nObtain the usage information for ls. What is a flag that you can use to arrange the output according to date modified?\nBy convention flags that are full words use a double dash -- and flags are a single letter have a singe dash. Why must this be the case?\n4.4.2 Moving between folders\nThe command cd changes the working directory. To use it type cd followed by an argument which is the path of the folder to change to. The path can be either ‘absolute’ or ‘relative’. For example, assuming the current working directory is the user’s home (/home/miles), to change directory to their Downloads we could do either of these:\nmiles@miles-macbook:~$ cd Downloads miles@miles-macbook:~/Downloads$\nmiles@miles-macbook:~$ cd /home/miles/Downloads miles@miles-macbook:~/Downloads$\nA path that starts with / is assumed to be absolute. Paths that do not are assumed to be relative to the current working directory.\nNotice how the prompt has changed to reflect the new working directory. The ~ symbol is a shorthand for the user’s home directory and we can use it to form paths. 4.4.2.1 Changing Challenges\nYou should be in your Downloads folder. Change to your Documents folder in a single command incorporating the ~ in the path.\nChange to the root folder of the system and list its contents. Change to your home folder.\n4.4.3 Pathing shortcuts\nApart from ~ there are two other symbols with special meanings in paths:\n. is shorthand for ‘the current working directory’. So this won’t change anywhere:\nmiles@miles-macbook:~$ cd .\nand these are equivalent:\nmiles@miles-macbook:~$ cd ./Downloads\nmiles@miles-macbook:~$ cd Downloads\n.. is shorthand for ‘the parent of the current working directory’. It can be used multiple times so, cd .. would move up one folder and cd ../.. would move up two. It is useful for creating relative paths to other branches of a directory tree e.g.:\nmiles@miles-macbook:~$ cd ~ miles@miles-macbook:~$ cd Downloads miles@miles-macbook:~/Downloads$ cd ../Documents miles@miles-macbook:~/Documents$\nWe moved ‘sideways’ to a folder at the same level. 4.4.3.1 Do Dot Dot\nWhere does the following command place you on your system? How does it work?\ncd ~/../../..\n4.5 Manipulating the Filesystem\nThe shell provides commands to create, move, and delete folders and files. 4.5.1 Creating Folders\nLet’ create an example project folder from the command line:\nFirst we’ll use the mkdir command to make a directory. The argument to the command is the path of the directory to be created. To create a directory in the current folder we just need to use its name since and the path is assumed to be relative.\nmiles@miles-macbook:~$ mkdir eg_project\nConfirm the project folder exists using ls and change into it with cd:\nmiles@miles-macbook:~$ ls miles@miles-macbook:~$ cd eg_project\nThen we’ll create several more folders as if the project is an analysis, mkdir can create multiple directories at once, for each argument passed.\nmkdir doc data results scripts\n4.5.2 Moving Folders/Files\nUsing Atom we’ll create some empty files. To open our project use File -&gt; Open Folder… and select the ‘eg_project’ folder.\nCreate the 4 files in the eg_project folder as shown:\nThey don’t need to contain anything.\nLet’s say we want to move the .Rmd file to the scripts folder. We can use the mv command to move files or folders. mv takes two arguments, the first being files or folders to move and the second being the path to move then to. Our command would look like:\nmiles@pa00120549:~/eg_project$ mv paper.rmd scripts\nLet’s say we don’t like the name ‘scripts’ since ‘paper.Rmd’ is not really a script - it’s a source file. We can also use mv to rename files and folders, by moving them to a new place in the file system e.g.:\nmiles@pa00120549:~/eg_project$ mv scripts src\n4.5.2.1 Move a file\nMove ‘output.csv’ into the results folder of ‘eg_project’ using the mv command. 4.5.2.2 Rename a file\nComplete the command below to rename the ‘paper.Rmd’ file to ‘methods.Rmd’ using mv:\nmiles@pa00120549:~/eg_project$ mv src/paper.Rmd …\nBe sure to check your result using ls. 4.5.3 Wildcards and Manipulations\nNow we’re going to see how we can use wildcards to perform actions on many files or folders at once. A wildcard is the the * symbol, and it can be used to provide file system arguments that match patterns.\nFor example, lets say we want to list all the data files in the current folder:\nmiles@pa00120549:~/eg_project$ ls -alh *csv\nThis lists all files that end in ‘csv’. We could also use it a the end of a path to match all items that start with a prefix, e.g. also folders starting with ‘d’:\nmiles@pa00120549:~/eg_project$ ls -alh d*\nWe can use this with all types of file manipulations! 4.5.3.1 Move a group\nUsing a single mv command, move the csv files with ‘table’ in the name to the ‘data’ folder.\n4.5.4 File Removal\nThe rm command can be used to remove files and folders. It takes the path of the files or folders as its argument. It requires the -r (recursive) flag to remove folders.\nTo remove the ‘doc’ folder we’d do:\nmiles@pa00120549:~/eg_project$ rm -r doc\n4.5.4.1 Wildcard extermination\nCombine the rm command with two wildcards to remove all .csv files in our project with a single command.\nHint: You can use a wildcard in the path for both the folder and file name portion. 4.6 Summary\nIn this lesson we’ve:\nDemystified some of the jargon associated with the command line.\nLearned the anatomy of cli commands: paths, arguments, and flags.\nLearned about relative and absolute paths, including useful short hands (~, .., .)\nSeen wildcards in action.\nLearned a handful of shell commands.\nThis is but a tiny fraction of what is available using the shell. The main objective here was to communicate some ideas that come in handy with git. You might like to see: http://swcarpentry.github.io/shell-novice/ for a more complete introduction.`"
  },
  {
    "objectID": "chapters/installation.html#learning-objectives",
    "href": "chapters/installation.html#learning-objectives",
    "title": "5  Installation",
    "section": "5.1 Learning objectives",
    "text": "5.1 Learning objectives\nThe task here is to get you setup 3 main components:\n\ngit - the version control software we will be studying\nGitHub Account - access to the famed online git hosting service.\nText Editor - a text editor with good integration with the command line"
  },
  {
    "objectID": "chapters/installation.html#fa-brands-git-alt-git",
    "href": "chapters/installation.html#fa-brands-git-alt-git",
    "title": "5  Installation",
    "section": "5.2  Git",
    "text": "5.2  Git\n\n5.2.1  macOS\n\n5.2.1.1 Option 1\n\n\n\n\n\n\nQuestion: Where is the Terminal?\n\n\n\n\n\nThe Terminal can be found at /Applications/Utilities/Terminal.app or by searching the Spotlight for “Terminal”. You may want to keep Terminal in your dock to find it more easily.\n\n\n\nOpen the terminal and type:\n\ngit --version\n\nIf git is not installed you will get a prompt asking you if you wish to install it along with Xcode command line tools. You may be asked for your administrator password.\n\n\n5.2.1.2 Option 2\nDownload and run the installer from: https://git-scm.com/download/mac. Hit ‘Continue’ through the prompts without modifying the installation destination or other settings. You may be asked for your administrator password.\n\n\n\n5.2.2  Linux\nCheck if you have git installed by opening your terminal and running:\n\ngit --version\n\nIf git is not installed, install it using your package manager, e.g., by running the following command in the terminal:\n\n sudo apt-get install git \n\n\n\n5.2.3  Windows\nDownload the Git for Windows installer. Hit ‘Next’ through the prompts without modifying the installation destination or other settings Click here for a video tutorial.\n\n\n\n\n\n\nIf your “HOME” environment variable is not set (or you don’t know what this is)\n\n\n\n\n\nOpen command prompt (Open Start Menu then type cmd and press [Enter]) Type the following line into the command prompt window exactly as shown:\n\nsetx HOME \"%USERPROFILE%\"\n\nPress [Enter], you should see SUCCESS: Specified value was saved. Quit command prompt by typing exit then pressing [Enter]"
  },
  {
    "objectID": "chapters/installation.html#fa-brands-github-github",
    "href": "chapters/installation.html#fa-brands-github-github",
    "title": "5  Installation",
    "section": "5.3  GitHub",
    "text": "5.3  GitHub\n\nOpen https://github.com in your browser\nClick the Sign up button\nEnter the required personal details for step 1\nIn step 2 select the free plan.\n\n\n\n\n\n\n\nChoosing a Github Name\n\n\n\n\n\nHere are some tips for choosing a GitHub username:\nIncorporate your name.\nAdapt your username from other platforms.\nChoose a professional username for your future boss.\nOpt for a shorter username.\nBe unique and concise.\nAvoid references to specific institutions.\nUse all lowercase and hyphens for word separation."
  },
  {
    "objectID": "chapters/installation.html#fa-align-left-text-editor",
    "href": "chapters/installation.html#fa-align-left-text-editor",
    "title": "5  Installation",
    "section": "5.4  Text Editor",
    "text": "5.4  Text Editor\nSometimes, Git might ask you to write a commit message, and it can be annoying if you end up in an editor you don’t like or don’t know how to use. The standard text editor is called Vim, which is widely known for being difficult to use. Therefore, it might be a smart move to consider switching to a different text editor. You can find more information about the challenges of using Vim (and some funny memes) here.\nHow to connect the text editor to git will be covered in a later chapter, but you can already download one.\nOur Recommendation is Nano, which runs in the Terminal and is fairly easy to use. However there are a lot of alternatives."
  },
  {
    "objectID": "chapters/installation.html#fa-planet-ringed-jupyterhub",
    "href": "chapters/installation.html#fa-planet-ringed-jupyterhub",
    "title": "5  Installation",
    "section": "5.5  JupyterHub",
    "text": "5.5  JupyterHub\nIn case the Installation process did not work on your device, you can access a remote environment using JupyterHub.\nhttps://code.min.uni-hamburg.de/"
  },
  {
    "objectID": "chapters/installation.html#sources",
    "href": "chapters/installation.html#sources",
    "title": "5  Installation",
    "section": "5.6 Sources",
    "text": "5.6 Sources\nhttps://happygitwithr.com/ https://swcarpentry.github.io/git-novice/https://git-scm.com/book/en/v2/Getting-Started-Installing-Git https://www.youtube.com/watch?v =-Bfx-v5mIDo"
  },
  {
    "objectID": "chapters/Setting Up Git.html",
    "href": "chapters/Setting Up Git.html",
    "title": "6  Setting up Git",
    "section": "",
    "text": "7 Learning objectives\nIn this chapter the goal is to setup your installed programms. This means to:\nThe git config command is used to get and set configuration. It allows you to customize Git according to your preferences and requirements. To look at all the different Configuration commands you can use\ngit config\nThis chapter will only deal with the most important/necessary ones.\nThe –help option in Git is a command that provides you with access to the built-in Git documentation and help resources. When you run a Git command followed by –help, Git displays information about that command, including its usage, available options, and a brief description of its functionality.\nFor example\ngit config --help\nwill open up a browser in the terminal containing information about the config command. To quit the browser use q.\nWhile the command provides extensive documentation and information about Git commands, it is not the most beginner-friendly resource."
  },
  {
    "objectID": "chapters/Setting Up Git.html#identify-yourself-fa-person",
    "href": "chapters/Setting Up Git.html#identify-yourself-fa-person",
    "title": "6  Setting up Git",
    "section": "8.1 Identify yourself ",
    "text": "8.1 Identify yourself \nBefore you start using Git, it’s important to set your username and email address. This information is crucial because Git uses it to identify the author of each change you make. By associating your commits/changes with your username and email, it allows others to see who made the changes and facilitates collaboration within a project.\nSetting your username and email is a one-time setup process, but you can always update them later if needed. To perform this configuration, you can use the Terminal. It makes sense to use your Github account details.\n\n\ngit config --global user.name \"Example\"\ngit config --global user.email beispiel@example.com"
  },
  {
    "objectID": "chapters/Setting Up Git.html#set-git-editor-fa-pen",
    "href": "chapters/Setting Up Git.html#set-git-editor-fa-pen",
    "title": "6  Setting up Git",
    "section": "8.2 Set Git editor ",
    "text": "8.2 Set Git editor \nAs mentioned in the installation chapter, you may come across various scenarios where you need to interact with text-based files, such as commit messages or merge conflict resolutions. Git relies on a text editor to allow you to make changes to these files within the Git workflow. To set your preferred text editor in Git, you can use the git config command\n\n\ngit config --global core.editor \"editor name\"\n\nFrom now on, when Git requires you to interact with a text editor, it will use the one you have set. If you ever want to change your Git editor in the future, you can repeat the above steps and specify the new editor command or path.\n\n\n\n\n\n\nWhat Editor should I use?\n\n\n\n\n\nWIP"
  },
  {
    "objectID": "chapters/Setting Up Git.html#configure-the-default-name-for-an-initial-branch-fa-code-branch",
    "href": "chapters/Setting Up Git.html#configure-the-default-name-for-an-initial-branch-fa-code-branch",
    "title": "6  Setting up Git",
    "section": "8.3 Configure the default name for an initial branch ",
    "text": "8.3 Configure the default name for an initial branch \nBy default, Git uses the name “master” for the initial branch when creating a new repository. However, there has been a growing movement to transition to using “main” as the default branch name instead. One of the main motivations behind this change is to promote inclusivity and remove potentially offensive terminology from the default Git workflow. To configure the default branch name to “main” in Git, you can use the following command\n\n\ngit config --global init.defaultBranch main"
  },
  {
    "objectID": "chapters/Setting Up Git.html#check-your-settings-fa-gear",
    "href": "chapters/Setting Up Git.html#check-your-settings-fa-gear",
    "title": "6  Setting up Git",
    "section": "8.4 Check your Settings ",
    "text": "8.4 Check your Settings \nYou can check if your configurations worked using\n\n\ngit config --list\n\nThis should create an output similiar to this.\n\n\nuser.name=Example\nuser.email=beispiel@example.com\ninit.defaultbranch=main\ncore.editor=nano\n\nNow that your Git environment is customized to your preferences, you are ready to utilize Git."
  },
  {
    "objectID": "chapters/Setting Up Git.html#sources",
    "href": "chapters/Setting Up Git.html#sources",
    "title": "6  Setting up Git",
    "section": "9.1 Sources",
    "text": "9.1 Sources\nhttps://happygitwithr.com/"
  },
  {
    "objectID": "chapters/First-Steps-Git.html",
    "href": "chapters/First-Steps-Git.html",
    "title": "7  First Steps with Git",
    "section": "",
    "text": "8 Learning objectives\nIn this Chapter your will learn basic Git operations for local version control including:\nTo create your first Git repository, you need to initialize a folder. You can create an empty folder using the command line as explained in the chapter Command Line Basics. Alternatively, you can create a folder in the usual way. Navigate, using the Terminal, to the folder which you want to initialze as a Git repository. You can use the cd command to change directories. Once you are in the desired directory, run the git init command to initialize the folder as a Git repository.\ngit init\nYou should see the following output:\nInitialized empty Git repository in /Users/.../\nCongratulations on successfully initializing your first Git repository!\nGit is now able to track your changes in this Folder. You only need to use git init once per folder.\nIn Git, there are two important components: the staging area and commits. The staging area is like a waiting area where you gather and prepare your changes before saving them. You can choose which changes to include in the snapshot by adding them to the staging area using git git add. Once you’re satisfied with the changes in the staging area, you make a commit. A commit is like taking a snapshot of your project at a specific moment. It captures all the changes in the staging area and saves them as a new version. Commits are like milestones that help you track the progress of your project and easily go back to a previous version if needed.\nhttps://happygitwithr.com/\nhttps://the-turing-way.netlify.app/reproducible-research/vcs/vcs-git.html https://milesmcbain.github.io/git_4_sci/using-a-git-repository.html"
  },
  {
    "objectID": "chapters/First-Steps-Git.html#status",
    "href": "chapters/First-Steps-Git.html#status",
    "title": "7  First Steps with Git",
    "section": "10.1 Status",
    "text": "10.1 Status\nAfter initializing a folder, Git is now able to record the changes of your file, but it will not do so automatically.\nYou can use git status to visualize the current status.\n\ngit status\n\nYou should see output similar to the following:\n\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n    example.txt\n\nAs you see Git is not yet tracking your file.\n\n\n\n\n\n\nCommon git status flags\n\n\n\n\n\n-s: Provides a more compact and simplified output, showing only the file status in a short format.\n-b: Includes information about the branch you are currently on along with the status.\n-u: Shows untracked files in the output.\n-uno: Suppresses the display of untracked files.\n-v Provides more detailed information, including additional status information about ignored files.\nYou can use these flags in combination. For example, git status -s -b will display a short and concise output along with the branch information."
  },
  {
    "objectID": "chapters/First-Steps-Git.html#staging",
    "href": "chapters/First-Steps-Git.html#staging",
    "title": "7  First Steps with Git",
    "section": "10.2 Staging",
    "text": "10.2 Staging\nYou can use git add to put new/changed files in the “staging area”. The staging area serves as a space where you can gather changes that you intend to commit soon. To organize and group these changes into meaningful commits, you can place the relevant files in the staging area. The staging area acts as a bridge between your modified files and the next commit.\n\ngit add example.txt\n\nIf you use git status again, your file(s) should now show up under “changes to be commited”.\n\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n    new file:   example.txt\n\nThis means your change in this folder, in this case adding a file, is now staged.\n\n\n\n\n\n\nCommon git add flags\n\n\n\n\n\n-a: Adds all changes, including modifications, deletions, and new files, in the entire working tree.\n-u: Adds modifications and deletions, but not new files.\n: Specifies the specific files or directories to add. For example, git add myfile.txt adds a single file, while git\n–ignore-errors: Ignores errors when adding files, allowing the command to continue even if some files cannot be added."
  },
  {
    "objectID": "chapters/First-Steps-Git.html#committing",
    "href": "chapters/First-Steps-Git.html#committing",
    "title": "7  First Steps with Git",
    "section": "10.3 Committing",
    "text": "10.3 Committing\nNow that your changes are staged, you are ready to create a commit. To create a commit, use the git commit command followed by the flag -m and a commit message in qoutes that describes the changes you made. The commit message should be short yet informative, providing enough detail to understand the purpose of the commit. If you just use git commit without adding a commit massage, the editor of your choosing, opens up and lets you type in a commit message.\n\ngit commit -m \"Add example.txt file\"\n\nYou should see output similar to the following:\n\n[main (root-commit) e9ea807] adding txt file\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 example.txt\n\nCongratulations! You have successfully created your first commit in the Git repository. Commits are the core elements of version control, they allow you to track the history of your project and easily revert changes if needed.\nYou can use the same workflow of git add and git commit for every file you add or make changes in.\n\n\n\n\n\n\nCommon git commit flags\n\n\n\n\n\n-m : Specifies the commit message inline. For example, git commit -m “Fix typo” allows you to provide a short commit message directly in the command.\n-a or –all: Automatically stages all modified and deleted files before committing. This skips the separate git add step.\n-v or –verbose: Provides a detailed output, showing the diff of the changes being committed.\n-e or –edit: Opens the commit message editor, allowing you to edit the commit message before finalizing the commit.\n–amend: Modifies the previous commit. It allows you to add new changes to the previous commit or modify its commit message.\n\n\n\n\n10.3.1 Logging Commits\nTo look at your past commits you can use the git log command.\n\ngit log\n\nYou should see output similar to the following:\n\ncommit e9ea80781ceed7cc3d6bff0c7bfa71f320ec1f60 (HEAD -&gt; main)\nAuthor: Example &lt;beispiel@example.de&gt;\nDate:   Thu Jun 29 12:23:53 2023 +0200\n\n    adding txt file\n\ngit log is useful because it provides a clear and organized view of a repository’s commit history. It allows you to track the evolution of a project over time by displaying detailed information about each commit, including changes made, authors, and timestamps. The command can help identifying the source of bugs or issues by pinpointing the commit that introduced them.\n\n\n\n\n\n\nCommon git log flags\n\n\n\n\n\n–oneline: Provides a condensed output with each commit displayed on a single line, showing the abbreviated commit hash and commit message.\n-n  or –max-count=: Limits the number of commits shown to the specified . For example, git log -n 5 will display the latest 5 commits.\n–since=: Shows commits made after the specified . You can use various date formats, such as specific dates or relative expressions like “2 weeks ago” or “yesterday”.\n–until=: Shows commits made before the specified .\n–author=: Filters commits by the author’s name or email using a specified .\n\n\n\n\n\n10.3.2 Comparing Versions\nAnother very handy feature is the git diff command. It allows you to compare two different versions of your file. By default it shows you any uncommited changes since the last commit. You can explore this by pasting this text in your .txt file\nLorem ipsum dolor sit amet, consectetur adipisici elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua. \nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquid ex ea commodi consequat. \nQuis aute iure reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \nExcepteur sint obcaecat cupiditat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\nYou can then look at the changes using:\n\ngit diff\n\nYou should see output similar to the following:\n\n+++ b/example.txt\n@@ -0,0 +1 @@\n+Lorem ipsum dolor sit amet, consectetur adipisici elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquid ex ea commodi consequat. Quis aute iure reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat cupiditat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\\ No newline at end of file\n\n\n\n\n\n\n\nCommon git diff flags\n\n\n\n\n\n–cached or –staged: Shows the changes that are staged (added) but not yet committed.\n: Displays the difference between the current working directory and a specific commit. For example, git diff abc123 shows the changes compared to commit “abc123”.\n..: Shows the difference between two specific commits. For example, git diff abc123..def456 displays the changes between commit “abc123” and commit “def456”.\n–name-only: Outputs only the names of the files that have differences, without showing the actual changes.\n–name-status: Displays the names of files along with a status identifier that indicates if a file was added, modified, or deleted.\n–color-words: Highlights the differences at the word level, providing more granular detail."
  },
  {
    "objectID": "chapters/Github-intro.html",
    "href": "chapters/Github-intro.html",
    "title": "8  Github Intro",
    "section": "",
    "text": "9 What is GitHub?\nGitHub is a web-based platform that hosts Git repositories. You can use it in your browser without any downloads. It’s a collaborative environment for software development, allowing developers to work together, manage code, and track changes. You don’t have to be a coder to use it. GitHub also offers project management and code review tools, making it great for open-source development and team collaboration. It’s a popular hub for sharing and discovering code.\nhttps://the-turing-way.netlify.app/collaboration/github-novice/github-novice-features.html"
  },
  {
    "objectID": "chapters/Github-intro.html#learning-objective",
    "href": "chapters/Github-intro.html#learning-objective",
    "title": "8  Github Intro",
    "section": "8.1 Learning objective",
    "text": "8.1 Learning objective\n\nConnect Git and Github\nSet up a GitHub Repo in multiple ways\nPull and push changes to/from Github repo"
  },
  {
    "objectID": "chapters/Github-intro.html#setting-account-details",
    "href": "chapters/Github-intro.html#setting-account-details",
    "title": "8  Github Intro",
    "section": "10.1 Setting Account details",
    "text": "10.1 Setting Account details\nTo be able to integrate Github in your workflow, you´ll need to authenticate your GitHub account. In the the [setup chapter] it is explained how to set a Username and Email for Git to use on your Computer.\n\n\ngit config --global user.name \"Example\"\ngit config --global user.email beispiel@example.com\n\nIn the installation chapter it is explained how to create an account on Github.com.. If you did not use your GitHub account details for the setup you should change that now."
  },
  {
    "objectID": "chapters/Github-intro.html#authentication",
    "href": "chapters/Github-intro.html#authentication",
    "title": "8  Github Intro",
    "section": "10.2 Authentication",
    "text": "10.2 Authentication\nThere a different ways to authenticate yourself. Each way with different pros and cons that we will not look at in depth.\n\n10.2.1 HTTPS Personal Access Token\nTBA\n\n\n10.2.2 SSH Key\nTBA"
  },
  {
    "objectID": "chapters/Github-intro.html#creating-a-repository",
    "href": "chapters/Github-intro.html#creating-a-repository",
    "title": "8  Github Intro",
    "section": "11.1 Creating a Repository",
    "text": "11.1 Creating a Repository\n\n11.1.1 Starting from Scratch\nCreating a new GitHub repository is a simple process. To create a new repository, click on the “+” sign in the top-right corner of the GitHub page. From the dropdown menu, select “New repository.” On the new repository page, enter a name for your repository and make sure the “Public” option is selected if you want it to be accessible to everyone. You should also choose to create a README file by checking the corresponding box. Finally, click the green “Create repository” button at the bottom of the page to complete the creation process. Once you have created the repository, you will find the README.md file in your repository. You can edit this file to provide information and details about your project. Whatever you write in the README.md file will be displayed on the front page of your project.\nTo add more files to your repository, click on the “Add file” button and choose whether to upload existing files or create a new file directly on GitHub. Remember to provide a descriptive commit message each time you add a new file or make changes. The commit message helps you keep track of the changes you’ve made and serves as a brief summary of the modifications made to the repository.\n\n\n\n\n\n\nWriting a README file\n\n\n\n\n\nKeep it simple! When you’re working in any field, whether it’s coding or studying stars, you’ll likely use specialized terms that might confuse others. So, use plain language and explain any unfamiliar words you use. Share your project! Describe what you’re doing now and what you plan to do in the future. This helps people understand your work and goals. Introduce yourself! Tell people who you are and how they can reach you. It’s great for networking and collaboration. If you’re not sure how to start, take a look at other people’s README.md files for inspiration.\n\n\n\n\n\n11.1.2 Uploading an existing folder\nTo initialize an existing folder as a GitHub repository, you first need to create a new repository, like explained above. You´ll then need to initialize the folder as a Git repository using git init.\nIf you have already done this, you can of course skip this. To add your folder as a remote repository use the git remotecommand.\n\ngit remote add origin https://github.com/username/repository.git\n\nNow you are able to push your files to the remote repo using git push.\n\ngit push -u origin main\n\nThis pushes the local branch named “main” to a remote repository called “origin” while setting it as the upstream branch. -uis used to set the upstream branch. It tells Git to remember the remote branch to which your local branch should be pushed in the future."
  },
  {
    "objectID": "chapters/Github-intro.html#forking-a-repository-fa-code-fork",
    "href": "chapters/Github-intro.html#forking-a-repository-fa-code-fork",
    "title": "8  Github Intro",
    "section": "11.2 Forking a Repository ",
    "text": "11.2 Forking a Repository \nForking a repository on GitHub allows you to create a personal copy of the project under your GitHub account. This separate copy includes all files, commit history, and branches. Forking is commonly used when you want to contribute to a project without directly modifying the original repository. It enables you to make changes independently, create new branches, and push modifications to your forked repository. You can also submit changes to the original repository through pull requests. By clicking the “Fork” button on the repository page, you create an identical copy in your GitHub account. Once the forking process is complete, you can clone the repository to your local machine using the git clone command."
  },
  {
    "objectID": "chapters/Github-intro.html#cloning-a-repository-fa-clone",
    "href": "chapters/Github-intro.html#cloning-a-repository-fa-clone",
    "title": "8  Github Intro",
    "section": "11.3 Cloning a Repository ",
    "text": "11.3 Cloning a Repository \nCloning refers to creating a local copy of a repository from GitHub onto your own computer. When you clone a repository, you download all of its files, commit history, and branches to your local machine. Cloning allows you to work with the repository locally, make changes, and push those changes back to the original repository if you have write access. It is commonly used when you want to contribute to a project or work on it independently. To clone a repository, you need the repository’s URL from GitHub. You can find the repository’s HHPS URL on the repository page, if you click on the green code button. Then use the terminal to navigate to the directory, to where you want to clone the repository. Then use the git clone command followed with the URL of the repository.\n\ngit clone https://github.com/username/repository.git\n\nOnce the cloning process is complete, you will have a local copy of the Git repository in the directory you specified. You can now work with the files in the repository, make changes, and commit your modifications locally. Remember to use the appropriate Git commands like git add, git commit, and git push to manage your changes and synchronize them with the remote repository as needed."
  },
  {
    "objectID": "chapters/Github-intro.html#pulling-fa-code-pull-request",
    "href": "chapters/Github-intro.html#pulling-fa-code-pull-request",
    "title": "8  Github Intro",
    "section": "11.4 Pulling ",
    "text": "11.4 Pulling \nThe git pull command is used to fetch the latest changes from a remote repository and merge them into your local branch. You can test this function by editing a file in your repo on GitHub and then use git pull to update your local file with the change made on GitHub. To edit a file first click on it, in the repository. In the top-right corner of the file view, click on the pencil icon (Edit this file) to start editing. Make the necessary changes to the file in the in-browser editor. You can add, modify, or delete content as needed. As you make changes, GitHub automatically tracks your modifications in the editor, displaying them as “changes not staged for commit”. Provide a brief description of the changes in the “Commit changes” section at the bottom of the page.\nIn the relevant directory use the git pullcommand to update your local file with the change made on GitHub.\n\ngit pull\n\n\n\n\n\n\n\ngit pull command flags\n\n\n\n\n\nTBA"
  },
  {
    "objectID": "chapters/Github-intro.html#pushing-fa-code-pull-request",
    "href": "chapters/Github-intro.html#pushing-fa-code-pull-request",
    "title": "8  Github Intro",
    "section": "11.5 Pushing ",
    "text": "11.5 Pushing \nThegit push command is like a reversed git pull, it is used to upload your local commits to the remote repository. When you run “git push”, Git examines your local branch and its commits, and then pushes those commits to the corresponding branch on the remote repository. Git will verify if your local branch is up to date with the remote branch. If there are new commits on the remote branch that you don’t have locally, Git may reject the push and ask you to first pull the latest changes and merge them into your local branch to prevent overwriting or conflicts. It’s important to note that you need appropriate access and permissions to push to a remote repository. If you don’t have write access, you won’t be able to push your changes. If you don`t specify a branch, Git will push the one you are on in the moment.\n\n\n\n\n\n\ngit push command flags\n\n\n\n\n\nTBA\n\n\n\n\ngit push origin main"
  },
  {
    "objectID": "chapters/rewriting-history.html#how-to-avoid-accidental-commits",
    "href": "chapters/rewriting-history.html#how-to-avoid-accidental-commits",
    "title": "9  Rewriting history",
    "section": "9.1 How to avoid accidental commits",
    "text": "9.1 How to avoid accidental commits\nThere are a few simple tricks to avoid committing things you don’t want committed:\n\nUse a visual program like GitHub Desktop or gitk to commit changes. Visual programs generally make it easier to see exactly which files will be added, deleted, and modified with each commit.\nAvoid the catch-all commands git add . and git commit -a on the command line—use git add filename and git rm filename to individually stage files, instead.\nUse git add --interactive to individually review and stage changes within each file.\nUse git diff --cached to review the changes that you have staged for commit. This is the exact diff that git commit will produce as long as you don’t use the -a flag.\n\nYou accidentally added a large file to a previous commit.\nNow you want to remove the file but keep all commits that came afterwards."
  },
  {
    "objectID": "chapters/rewriting-history.html#purging-a-file-from-your-repositorys-history",
    "href": "chapters/rewriting-history.html#purging-a-file-from-your-repositorys-history",
    "title": "9  Rewriting history",
    "section": "9.2 Purging a file from your repository’s history",
    "text": "9.2 Purging a file from your repository’s history\n\n\n\n\n\n\nNote\n\n\n\nIf sensitive data is located in a file that’s identified as a binary file, you’ll need to remove the file from the history, as you can’t modify it to remove or replace the data.\n\n\n\n9.2.1 Using the BFG\nTODO: TBA\n\n\n9.2.2 Using git filter-repo\n\n\n\n\n\n\nWarning\n\n\n\nWarning: If you run git filter-repo after stashing changes, you won’t be able to retrieve your changes with other stash commands. Before running git filter-repo, we recommend unstashing any changes you’ve made. To unstash the last set of changes you’ve stashed, run git stash show -p | git apply -R. For more information, see Git Tools - Stashing and Cleaning.\n\n\nTo illustrate how git filter-repo works, we’ll show you how to remove your file with sensitive data from the history of your repository and add it to .gitignore to ensure that it is not accidentally re-committed.\n\n\n\n\n\n\nInstall git filter-repo\n\n\n\n\n\nInstall the latest release of the git filter-repo tool. You can install git-filter-repo manually or by using a package manager. For example, to install the tool with HomeBrew on macOS, use the brew install command.\n\nbrew install git-filter-repo\n\nFor more information, see INSTALL.md in the newren/git-filter-repo repository.\n\n\n\n\n\n9.2.3 Clone the repository\nIf you don’t already have a local copy of your repository with sensitive data in its history, clone the repository to your local computer.\n\n112git clone https://github.com/YOUR-USERNAME&gt;/YOUR-REPOSITORY\n\n\n1\n\nReplace YOUR-USERNAME with your GitHub username and YOUR-REPOSITORY with the name of your GitHub repository.\n\n\n\n\n\n\n9.2.4 Navigate into the repository’s working directory\nNavigate into the repository’s working directory.\n\n1cd YOUR-REPOSITORY\n# TODO: add reference to command line chapter\n\n\n1\n\nReplace YOUR-REPOSITORY with the name of your GitHub repository. For details on the cd command, see the chapter on command line.\n\n\n\n\n\n\n9.2.5 Run git filter-repo command\nRun the following command, replacing PATH-TO-FILE-YOU-WANT-TO-REMOVE with the path to the file you want to remove, not just its file name. These arguments will:\n\nForce Git to process, but not check out, the entire history of every branch and tag\nRemove the specified file, as well as any empty commits generated as a result\nRemove some configurations, such as the remote URL, stored in the .git/config file. You may want to back up this file in advance for restoration later.\nOverwrite your existing tags\n\n\n1git filter-repo --invert-paths --path PATH-TO-FILE-YOU-WANT-TO-REMOVE\n\n\n1\n\nReplace PATH-TO-FILE-YOU-WANT-TO-REMOVE with the path to the file you want to remove, not just its file name.\n\n\n\n\n\n\n\n\n\n\nI did not clone a fresh copy of the repository. Is this a problem?\n\n\n\n\n\nIf you did not clone a fresh copy of your repository, you may see this message after running the git filter-repo command:\n\nAborting: Refusing to destructively overwrite repo history since\nthis does not look like a fresh clone.\n  (expected freshly packed repo)\nPlease operate on a fresh clone instead.  If you want to proceed\nanyway, use --force.\n\nAs described in the message, you have two options:\n\nClone a fresh copy of your repository and execute the command there.\nAdd --force to proceed with the existing repository.\n\n\n\n\n\n9.2.5.1 Add your file to .gitignore\nAdd your file to .gitignore to ensure that you don’t accidentally commit it again. You can edit .gitignore in your favorite text editor\n\n1echo \"PATH-TO-FILE-YOU-WANT-TO-REMOVE\" &gt;&gt; .gitignore\ngit add .gitignore\ngit commit -m \"Add YOUR-FILE-WITH-SENSITIVE-DATA to .gitignore\"\n\n\n1\n\nThis command writes PATH-TO-FILE-YOU-WANT-TO-REMOVE inside the .gitignore file. &gt;&gt; makes sure that this is written to a new line inside the .gitignore file.\n\n\n\n\nThis will create the following output:\n\n[main 64dda05] Add YOUR-FILE-WITH-SENSITIVE-DATA to .gitignore\n 1 files changed, 1 insertions(+), 0 deletions(-)\n\n\n\n\n9.2.6 Double-check the state of your repository\nDouble-check that you’ve removed everything you wanted to from your repository’s history, and that all of your branches are checked out.\n\n\n9.2.7 Force-push your local changes to GitHub\nIf you are happy with the state of your repository, force-push your local changes to overwrite your repository on github.com/, as well as all the branches you’ve pushed up. A force push is required to remove sensitive data from your commit history.\n\ngit push origin --force --all\n\n\n\nOutput\n\n\nCounting objects: 1074, done.\nDelta compression using 2 threads.\nCompressing objects: 100% (677/677), done.\nWriting objects: 100% (1058/1058), 148.85 KiB, done.\nTotal 1058 (delta 590), reused 602 (delta 378)\nTo https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git\n  + 48dc599...64dda05 main -&gt; main (forced update)\n\n\n\n\n\n\n\n\nfatal: ‘origin’ does not appear to be a git repository\n\n\n\n\n\nDid you receive this error message?\n\nfatal: 'origin' does not appear to be a git repository\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n\nAs described above, this could mean that origin was removed from your repo. Configure origin again:\n\nSSHHTTPS\n\n\n\ngit remote add origin https://github.com/YOUR-USERNAME/YOUR-REPOSITORY\n\n\n1\n\nReplace YOUR-USERNAME with your GitHub username and YOUR-REPOSITORY with the name of your GitHub repository.\n\n\n\n\n\n\n\ngit remote add origin git@github.com:YOUR-USERNAME/YOUR-REPOSITORY.git\n\n\n2\n\nReplace &lt;YOUR-USERNAME&gt; with your GitHub username and &lt;YOUR-REPOSITORY&gt; with the name of your GitHub repository.\n\n\n\n\n\n\n\n\n\n\nIn order to remove the sensitive file from your tagged releases, you’ll also need to force-push against your Git tags:\n\ngit push origin --force --tags\n\n\n\nOutput\n\n\nCounting objects: 321, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (166/166), done.\nWriting objects: 100% (321/321), 331.74 KiB | 0 bytes/s, done.\nTotal 321 (delta 124), reused 269 (delta 108)\nTo https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git\n + 48dc599...051452f main -&gt; main (forced update)"
  },
  {
    "objectID": "chapters/rewriting-history.html#fully-removing-the-data-from-github",
    "href": "chapters/rewriting-history.html#fully-removing-the-data-from-github",
    "title": "9  Rewriting history",
    "section": "9.3 Fully removing the data from GitHub",
    "text": "9.3 Fully removing the data from GitHub\nAfter using either the BFG tool or git filter-repo to remove the sensitive data and pushing your changes to GitHub, you must take a few more steps to fully remove the data from GitHub.\n\nContact GitHub Support, asking them to remove cached views and references to the sensitive data in pull requests on GitHub. Please provide the name of the repository and/or a link to the commit you need removed.\nTell your collaborators to rebase, not merge, any branches they created off of your old (tainted) repository history. One merge commit could reintroduce some or all of the tainted history that you just went to the trouble of purging.\nAfter some time has passed and you’re confident that the BFG tool / git filter-repo had no unintended side effects, you can force all objects in your local repository to be dereferenced and garbage collected with the following commands (using Git 1.8.5 or newer)\n\n\n$ git for-each-ref --format=\"delete %(refname)\" refs/original | git update-ref --stdin\n$ git reflog expire --expire=now --all\n$ git gc --prune=now\n&gt; Counting objects: 2437, done.\n&gt; Delta compression using up to 4 threads.\n&gt; Compressing objects: 100% (1378/1378), done.\n&gt; Writing objects: 100% (2437/2437), done.\n&gt; Total 2437 (delta 1461), reused 1802 (delta 1048)\n\nNote: You can also achieve this by pushing your filtered history to a new or empty repository and then making a fresh clone from GitHub."
  },
  {
    "objectID": "chapters/rewriting-history.html#references",
    "href": "chapters/rewriting-history.html#references",
    "title": "9  Rewriting history",
    "section": "9.4 References",
    "text": "9.4 References\n\nhttps://docs.github.com/en/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository"
  },
  {
    "objectID": "chapters/datalad-nextcloud.html#preparation",
    "href": "chapters/datalad-nextcloud.html#preparation",
    "title": "10  DataLad Nextcloud",
    "section": "10.1 Preparation",
    "text": "10.1 Preparation\n\n10.1.1 Create an example dataset\nFirst, we create an example dataset. The steps below will download a small public neuroimaging dataset, and transform it into a DataLad dataset. We will use the MoAEpilot dataset containing anatomical and functional images from a single participant, as well as some metadata. This procedure is copied from the chapter “Walk-through: Amazon S3 as a special remote” in the DataLad Handbook.\n\n\n\n\n\n\n\nDetails about the MoAEpilot dataset\n\n\n\n\n\nThe following text has been copied from the MoAEpilot website:\n\nThis experiment was conducted by Geraint Rees under the direction of Karl Friston and the FIL methods group. The purpose was to explore equipment and techniques in the early days of our fMRI experience. As such it has not been formally written up, and is freely available for personal education and evaluation purposes.\n\n\n96 acquisitions were made (RT=7s), in blocks of 6, giving 16 42s blocks. The condition for successive blocks alternated between rest and auditory stimulation, starting with rest. Auditory stimulation was with bi-syllabic words presented binaurally at a rate of 60 per minute. The functional data starts at acquisiton 4, image fM00223_004. Due to T1 effects it is advisable to discard the first few scans (there were no “dummy” lead-in scans).\n\n\nThese whole brain BOLD/EPI images were acquired on a modified 2T Siemens MAGNETOM Vision system. Each acquisition consisted of 64 contiguous slices (64x64x64 3mm x 3mm x 3mm voxels). Acquisition took 6.05s, with the scan to scan repeat time (RT) set arbitrarily to 7s.\n\n\n\nFirst, move to the directory on your computer where you want to create the dataset.\n\ncd &lt;wherever-you-want-to-create-the-dataset&gt;\n\nNext, we create a new directory called mydataset, we download and extract the data, and then we move the extracted contents into our new directory.\n1mkdir mydataset\n2wget https://www.fil.ion.ucl.ac.uk/spm/download/data/MoAEpilot/MoAEpilot.bids.zip -O mydataset.zip\n3unzip mydataset.zip -d mydataset\n4rm mydataset.zip\n5cd mydataset\n6mv MoAEpilot/* .\n7rm -R MoAEpilot\n\n1\n\nCreate a new directory (mkdir) for the datatset called mydataset\n\n2\n\nDownload the dataset using wget and save the .zip file\n\n3\n\nUnzip the dataset and extract the contents into the mydataset directory\n\n4\n\nRemove the .zip file\n\n5\n\ncd into the folder of the dataset\n\n6\n\nMove (mv) the contents of the MoAEpilot into the root of the directory\n\n7\n\nRemove the (now empty) MoAEpilot folder\n\n\nNow we can view the directory tree to see the dataset content:\n\ntree\n.\n├── CHANGES\n├── README\n├── dataset_description.json\n├── sub-01\n│   ├── anat\n│   │   └── sub-01_T1w.nii\n│   └── func\n│       ├── sub-01_task-auditory_bold.nii\n│       └── sub-01_task-auditory_events.tsv\n└── task-auditory_bold.json\n\n4 directories, 7 files\n\nWe can turn our neuro-data-s3 directory into a DataLad dataset with the datalad create --force command. After that, we save the dataset with datalad save:\n\ndatalad create --force --description \"neuro data to host via webdav\"\ndatalad save -m \"Add public data\"\n\n\n\n10.1.2 Install DataLad NEXT\nDataLad NEXT is a DataLad extension that “can be thought of as a staging area for additional functionality, or for improved performance and user experience.”\n\nInstall DataLad NEXT from PyPi or GitHub.\n\n\n\n\n\n\n\nTip: Use a virtual environment to install DataLad Next\n\n\n\n\n\n\n# create and enter a new virtual environment (optional)\nvirtualenv --python=python3 ~/env/dl-next\n. ~/env/dl-next/bin/activate\n\n\n\n\n\npython -m pip install datalad-next\n\n\nEnable the extension for autoloading:\n\n\ngit config --global --add datalad.extensions.load next"
  },
  {
    "objectID": "chapters/datalad-nextcloud.html#walkthrough-hosting-datalad-datasets-on-nextcloud",
    "href": "chapters/datalad-nextcloud.html#walkthrough-hosting-datalad-datasets-on-nextcloud",
    "title": "10  DataLad Nextcloud",
    "section": "10.2 Walkthrough: Hosting DataLad datasets on Nextcloud",
    "text": "10.2 Walkthrough: Hosting DataLad datasets on Nextcloud\nThis walktrough demonstrates how to collaborate on DataLad datasets using the WebDAV-enabled cloud storage Nextcloud. As an example, we use UHH-Cloud at University of Hamburg, which is based on Nextcloud.\n\nNextcloud Hub is the industry-leading, fully open-source, on-premises content collaboration platform. Teams access, share and edit their documents, chat and participate in video calls and manage their mail and calendar and projects across mobile, desktop and web interfaces. – https://nextcloud.com/about/\n\n\n“Students have a storage quota of 100 gigabytes each, while all other users have a storage quota of 5 terabytes each.” – translated from §2 (2) of the terms of use for the UHH-Cloud service (in German)\n\n\n10.2.1 Get the WebDAV address\n\nClick on  Files settings (bottom left)\nCopy the WebDAV address, for example: https://cloud.uni-hamburg.de/remote.php/dav/files/BBC5706%40uni-hamburg.de/\n\n\n\n10.2.2 Create the WebDAV DataLad sibling\n\ndatalad create-sibling-webdav \\\n  --dataset . \\\n  --name uhhcloud \\\n  --mode filetree \\\n  'https://cloud.uni-hamburg.de/remote.php/dav/files/BBC5706%40uni-hamburg.de/neuro-data-s3'\n\nYou will be asked for a user name and a password:\n\nUser name and password are required for WebDAV access at https://cloud.uni-hamburg.de/remote.php/dav/files/BBC5706%40uni-hamburg.de/neuro-data-s3\n\n\n\n10.2.3 Create a new app password\n\nGo to the  UHH-Cloud security settings\nSelect an app name (e.g., “DataLad”) and click “Create new app passsword”.\nSave the username (e.g., BBC5706@uni-hamburg.de) and password securely (e.g., in a password manager). You will need them repeatedly.\n\nEnter the Nextcloud app username and password created in the previous step:\n\nuser: &lt;your_username&gt; # insert your username, e.g., BBC5706@uni-hamburg.de\npassword: # enter the app password\npassword (repeat): # enter the app password again\n\nThe following output confirms that the configuration of the Nextcloud DataLad sibling was successful:\n\ncreate_sibling_webdav.storage(ok): . [uhhcloud-storage: https://cloud.uni-hamburg.de/remote.php/dav/files/BBC5706%40uni-hamburg.de/neuro-data-s3]\n[INFO   ] Configure additional publication dependency on \"uhhcloud-storage\" \ncreate_sibling_webdav(ok): . [uhhcloud: datalad-annex::?type=webdav&encryption=none&exporttree=yes&url=https%3A//cloud.uni-hamburg.de/remote.php/dav/files/BBC5706%2540uni-hamburg.de/neuro-data-s3]\n[WARNING] The entered credential will not be stored, a credential with the default name 'webdav-BBC5706@uni-hamburg.de-https://cloud.uni-hamburg.de/UHH-Cloud' already exists. Specify a credential name via the `credential` parameter  and/or configure a credential with the datalad-credentials command with a `realm=https://cloud.uni-hamburg.de/UHH-Cloud` property \n\n\n\n10.2.4 Push the dataset to Nextcloud\n\ndatalad push --to uhhcloud\n\nThe following output confirms that the DataLad dataset has been successfully pushed to Nextcloud:\n\ncopy(ok): .datalad/.gitattributes (dataset)\ncopy(ok): .datalad/config (dataset)\ncopy(ok): .gitattributes (dataset)\ncopy(ok): CHANGES (dataset)\ncopy(ok): README (dataset)\ncopy(ok): dataset_description.json (dataset)\ncopy(ok): sub-01/anat/sub-01_T1w.nii (dataset)\ncopy(ok): sub-01/func/sub-01_task-auditory_bold.nii (dataset)\ncopy(ok): sub-01/func/sub-01_task-auditory_events.tsv (dataset)\ncopy(ok): task-auditory_bold.json (dataset)\npublish(ok): . (dataset) [refs/heads/main-&gt;uhhcloud:refs/heads/main [new branch]]\npublish(ok): . (dataset) [refs/heads/git-annex-&gt;uhhcloud:refs/heads/git-annex [new branch]]\naction summary:\n  copy (ok: 10)\n  publish (ok: 2)\n\nWe can now view the files on UHH-Cloud and inspect them through the web browser.\n Note that on the cloud storage portal, the dataset content looks like any other upload but it remains a complete datatset that can be cloned as if it would be hosted on GitLab or GitHub (for details, see the next chapter).\n\n\n10.2.5 Clone dataset\n\n1cd ..\ndatalad clone \\\n  'webdavs://cloud.uni-hamburg.de/remote.php/dav/files/BBC5706%40uni-hamburg.de/neuro-data-s3' \\\n2  neuro-data-s3-clone\n\n\n1\n\ncd out of the current dataset. You can also chose any other target directory on your system.\n\n2\n\nMake sure to replace https with webdavs!\n\n\n\n\nNote one important aspect of this step: We again use the WebDAV address to clone the dataset but replace https with webdavs.\nTo complete cloning the dataset, we need to provide the access credentials again:\n\nA credential is required for access\n1user:\npassword:\npassword (repeat):\n\n\n1\n\nEnter your app password user address (e.g., BBC5706@uni-hamburg.de)\n\n\n\n\n\n[INFO   ] Remote origin uses a protocol not supported by git-annex; setting annex-ignore\n[INFO   ] access to 1 dataset sibling uhhcloud-storage not auto-enabled, enable with:\n|       datalad siblings -d \"/tmp/neuro-data-s3-clone\" enable -s uhhcloud-storage\ninstall(ok): /tmp/neuro-data-s3-clone (dataset)\n\nWe use the suggested command\n\ndatalad siblings -d \"/tmp/neuro-data-s3-clone\" enable -s uhhcloud-storage\n\n\nCommandError: 'git -c diff.ignoreSubmodules=none annex enableremote uhhcloud-storage -c annex.dotfiles=true' failed with exitcode 1 under /tmp/neuro-data-s3-clone\nenableremote uhhcloud-storage \n\nfailed\n  Set both WEBDAV_USERNAME and WEBDAV_PASSWORD to use webdav\ngit-annex: Need to configure webdav username and password.\nCallStack (from HasCallStack):\n  error, called at ./Remote/WebDAV.hs:324:21 in main:Remote.WebDAV\n\nSet WEBDAV_USERNAME and WEBDAV_PASSWORD\n\n1DATALAD_CREDENTIAL_WEBDAV_USERNAME=BBC5706@uni-hamburg.de\n2DATALAD_CREDENTIAL_WEBDAV_PASSWORD=gUdrc-ZX8sT-PqJLf-YRmS4-hKMPW\n\n\n1\n\nEnter your app user address (e.g., BBC5706@uni-hamburg.de)\n\n2\n\nEnter your app user password (e.g., gUdrc-ZX8sT-PqJLf-YRmS4-hKMPW)\n\n\n\n\n\ncd tmp\nWEBDAV_USERNAME=BBC5706@uni-hamburg.de \\\n  WEBDAV_PASSWORD=gUdrc-ZX8sT-PqJLf-YRmS4-hKMPW \\\n  git annex enableremote uhhcloud-storage\n\nThe output confirms that initializing the uhhcloud-storage remote was successful:\n\nenableremote uhhcloud-storage (testing WebDAV server...) ok\n(recording state in git...)\n\nWe can now run datalad get . to retrieve all contents of the dataset:\n\ndatalad get . \n\nThe output confirms that all contents were successfully retrieved from the uhhcloud-storage sibling:\n\nget(ok): CHANGES (file) [from uhhcloud-storage...]\nget(ok): README (file) [from uhhcloud-storage...]\nget(ok): dataset_description.json (file) [from uhhcloud-storage...]\nget(ok): sub-01/anat/sub-01_T1w.nii (file) [from uhhcloud-storage...]\nget(ok): sub-01/func/sub-01_task-auditory_bold.nii (file) [from uhhcloud-storage...]\nget(ok): sub-01/func/sub-01_task-auditory_events.tsv (file) [from uhhcloud-storage...]\nget(ok): task-auditory_bold.json (file) [from uhhcloud-storage...]\naction summary:\n  get (ok: 7)\n\nNow the dataset is fully ready for local use and complete with its entire history.\n\n\n10.2.6 Link sharing\nNextcloud allows to create a public and private links that can be used to share the dataset.\n\n:sparkles: Multiple links: Use of multiple share links with varying permissions and individual labels\n:sparkles: Custom permissions: Flexibly combine read, upload, edit or delete permissions\n:sparkles: Options: Hide download, password protect, set expiration date, note to recipient\n\n\n\n10.2.7 Links\n\nYouTube video: “Deposit and retrieve DataLad datasets with WebDAV services”\nUHH-Cloud at the University of Hamburg, Germany\nDetails on UHH-Cloud (in German)\n“Accessing Nextcloud files using WebDAV” - Nextcloud user manual\nDataLad NEXT extension\ndatalad create-sibling-webdav documentation\nWebDAV git annex"
  },
  {
    "objectID": "chapters/datalad-nextcloud.html#walkthough-hosting-datalad-datasets-on-owncloud",
    "href": "chapters/datalad-nextcloud.html#walkthough-hosting-datalad-datasets-on-owncloud",
    "title": "10  DataLad Nextcloud",
    "section": "10.3 Walkthough: Hosting DataLad datasets on ownCloud",
    "text": "10.3 Walkthough: Hosting DataLad datasets on ownCloud\n\n50 GByte default storage space per user; flexible increase possible upon request\n\n\n10.3.1 Get the WebDAV address\n\nClick on  Settings (bottom left)\nCopy the WebDAV address, for example: https://owncloud.gwdg.de/remote.php/nonshib-webdav/\n\n\ndatalad create-sibling-webdav \\\n  --dataset . \\\n  --name owncloud-gwdg \\\n  --mode filetree \\\n  'https://owncloud.gwdg.de/remote.php/nonshib-webdav/&lt;dataset-name&gt;'\n\nReplace &lt;dataset-name&gt; with the name of your dataset, i.e., the name of your dataset folder. In this example, we replace &lt;dataset-name&gt; with neuro-data-s3. The complete command for your example hence looks like this:\n\ndatalad create-sibling-webdav \\\n  --dataset . \\\n  --name owncloud-gwdg \\\n  --mode filetree \\\n  'https://owncloud.gwdg.de/remote.php/nonshib-webdav/neuro-data-s3'\n\nYou will be asked to provide your ownCloud account credentials:\n\n1user:\n2password:\n3password (repeat):\n\n\n1\n\nEnter the email address of your ownCloud account.\n\n2\n\nEnter the password of your ownCloud account.\n\n3\n\nRepeat the password of your ownCloud account.\n\n\n\n\n\ncreate_sibling_webdav.storage(ok): . [owncloud-gwdg-storage: https://owncloud.gwdg.de/remote.php/nonshib-webdav/neuro-data-s3]\n[INFO   ] Configure additional publication dependency on \"owncloud-gwdg-storage\" \ncreate_sibling_webdav(ok): . [owncloud-gwdg: datalad-annex::?type=webdav&encryption=none&exporttree=yes&url=https%3A//owncloud.gwdg.de/remote.php/nonshib-webdav/neuro-data-s3]\n[WARNING] The entered credential will not be stored, a credential with the default name 'webdav-wittkuhn@mpib-berlin.mpg.de-https://owncloud.gwdg.de/ownCloud' already exists. Specify a credential name via the `credential` parameter  and/or configure a credential with the datalad-credentials command with a `realm=https://owncloud.gwdg.de/ownCloud` property \n\nFinally, we can push the dataset to ownCloud:\n\n1datalad push --to owncloud-gwdg\n\n\n1\n\nUse datalad push to push the dataset contents to ownCloud. For details on datalad push, see the command line reference and this chapter in the DataLad Handbook.\n\n\n\n\nWe can now view the files on ownCloud and inspect them through the web browser:\n\n\n\n10.3.2 Public sharing\nCreate a public share link.\n\n\n10.3.3 Interacting with non datalad users.\n\n\n10.3.4 References\n\nhttps://www.gwdg.de/storage-services/gwdg-owncloud"
  },
  {
    "objectID": "chapters/summary.html",
    "href": "chapters/summary.html",
    "title": "11  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "12  References",
    "section": "",
    "text": "Allaire, J. J., Charles Teague, Yihui Xie, and Christophe Dervieux.\n2022. “Quarto.” https://doi.org/10.5281/zenodo.5960048.\nLicense: GNU GPL\nv2.\n\n\nChacon, Scott, and Ben Straub. 2014. Pro Git. Apress. https://doi.org/10.1007/978-1-4842-0076-6.\nLicense: CC BY-NC.\n\n\nThe Turing Way Community. 2022. The Turing Way: A Handbook for\nReproducible, Ethical and Collaborative Research. Zenodo. https://doi.org/10.5281/zenodo.3233853.\nLicense: The process documents and data are made available under a CC BY 4.0\nlicense. Software are made available under an MIT license."
  },
  {
    "objectID": "chapters/contributing.html#overview",
    "href": "chapters/contributing.html#overview",
    "title": "13  Contributing",
    "section": "13.1 Overview",
    "text": "13.1 Overview\nSection 13.2: This section explains how to use RStudio Project to work on this project.\nSection 13.3: This section explains how to use Quarto to work on this project.\nSection 13.4: This section explains how this project manages package dependencies using renv.\nSection 13.6: This section explains how to add code snippets.\nSection 13.7: This section explains how to add images.\nSection 13.5: This section explains how to add references.\nSection 13.8: This section explains how to use variables.\nSection 13.9: This section explains how to add icons."
  },
  {
    "objectID": "chapters/contributing.html#sec-rstudio-project",
    "href": "chapters/contributing.html#sec-rstudio-project",
    "title": "13  Contributing",
    "section": "13.2 RStudio Project",
    "text": "13.2 RStudio Project\n\n “Using RStudio Projects”\n\nWe recommend working in RStudio and open the RStudio Project.\n\n RStudio Terminal\n\n\n\nDouble-click on the project file version-control-book.Rproj within your computer’s file system (for example, macOS Finder).\n\n\n\nIn the Terminal, run:\n\nopen version-control-book.Rproj\n\nThis will open the RStudio Project in RStudio.\n\n\n\n\n\nClick here to view the full version-control-book.Rproj file of this project.\n\n\n\n\nversion-control-book.Rproj\n\nVersion: 1.0\n\nRestoreWorkspace: No\nSaveWorkspace: No\nAlwaysSaveHistory: No\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n\nBuildType: Makefile"
  },
  {
    "objectID": "chapters/contributing.html#sec-quarto",
    "href": "chapters/contributing.html#sec-quarto",
    "title": "13  Contributing",
    "section": "13.3 Quarto",
    "text": "13.3 Quarto\nThis book is made with Quarto.\n\n13.3.1 Local development\n\n13.3.1.1 Setup\n\nRead the Get Started chapter of the Quarto documentation, which includes details on installation.\n\n\n\n13.3.1.2 Preparation\n\nRead this guide on how to contribute.\nFamiliarize yourself with Quarto Books.\n\n\n\n13.3.1.3 Local preview\n\nquarto preview\n\n\n\n\n13.3.2 Add a new chapter\n\nCreate a new Quarto document inside the /chapters/ folder\nAdd the new chapter to _quarto.yml. Don’t forget to specify the full path (including /chapters/)\n\n\n\n\n_quarto.yml (excerpt)\n\nchapters:\n  - index.qmd\n1  - chapters/YOUR-NEW-CHAPTER.qmd\n  - another-chapter.qmd\n\n\n\n1\n\nReplace YOUR-NEW-CHAPTER with a concise filename.\n\n\n\n\n\n\nClick here to view the full _quarto.yml file of this project.\n\n\n\n\n_quarto.yml\n\nproject:\n  # project options (https://quarto.org/docs/reference/projects/options.html):\n  type: book\n  output-dir: _book\n  execute-dir: project\n  # pre-render: make download-images\n  # preview (https://quarto.org/docs/reference/projects/options.html#preview):\n  preview: \n    port: 3333\n    host: 127.0.0.1\n    browser: true\n    watch-inputs: true\n    navigate: true\n\nbook:\n  title: \"Version Control of Code and Data for Scientists\"\n  search: true\n  repo-url: https://github.com/lnnrtwttkhn/version-control-book/\n  repo-branch: main\n  repo-actions: [issue, source]\n  downloads: [pdf, epub]\n  sharing: [twitter, facebook]\n  favicon: static/git-icon.svg\n  twitter-card: false\n  site-url: https://lennartwittkuhn.com/version-control-book\n#  date: \"6/3/2023\"\n  chapters:\n    - index.qmd\n    - contents.qmd\n    - chapters/intro.qmd\n    - chapters/intro-version-control.qmd\n    - chapters/command-line.qmd\n    - chapters/installation.qmd\n    - chapters/Setting Up Git.qmd\n    - chapters/First-Steps-Git.qmd\n    - chapters/Github-intro.qmd\n    - chapters/rewriting-history.qmd\n    - chapters/datalad-nextcloud.qmd\n    - chapters/summary.qmd\n    - references.qmd\n    - part: Contributing to this book\n      chapters:\n        - chapters/contributing.qmd\n        - chapters/style-guide.qmd\n  page-navigation: true\n\nformat:\n  html:\n    theme: cosmo\n    # fontcolor: black\n    # linkcolor: black\n    link-external-newwindow: true\n    toc: true\n    toc-depth: 3\n    toc-title: \"On this page\"\n    number-sections: true\n    anchor-sections: true\n    # layout (https://quarto.org/docs/reference/formats/html.html#layout):\n    fig-cap-location: margin\n    page-layout: full\n    title-block-style: default\n    # code (https://quarto.org/docs/reference/formats/html.html#code):\n    code-fold: false\n    code-overflow: wrap\n    code-line-numbers: false\n    code-copy: true\n    code-link: false\n    code-annotations: hover\n    code-tools: false\n    highlight-style: monokai\n    # references:\n    bibliography: references.bib\n    csl: chicago-author-date-note.csl\n    citations-hover: true\n    citation-location: document\n    citeproc: true\n    # footnotes:\n    footnotes-hover: true\n    # includes:\n    include-after-body: plausible.html\n\nmetadata-files:\n  - _authors.yml\n  - _affiliations.yml"
  },
  {
    "objectID": "chapters/contributing.html#sec-dependency-management",
    "href": "chapters/contributing.html#sec-dependency-management",
    "title": "13  Contributing",
    "section": "13.4 Dependency Management",
    "text": "13.4 Dependency Management\nWe use renv for project-local  dependency management. For details on renv, see the renv documentation.\n\n13.4.1 Using renv for the first time\nAfter you open the Rstudio Project, you will (hopefully) see a similar output in the RStudio console:\n\n# Bootstrapping renv 0.17.3 --------------------------------------------------\n* Downloading renv 0.17.3 ... OK (downloaded binary)\n* Installing renv 0.17.3 ... Done!\n* Successfully installed and loaded renv 0.17.3.\n* Project '~/version-control-book' loaded. [renv 0.17.3]\n* This project contains a lockfile, but none of the recorded packages are installed.\n* Use `renv::restore()` to restore the project library.\n\nThis output tells you that (1) renv was automatically installed and loaded, (2) the renv environment for the project was loaded, and (3) that none of packages recorded in the renv lockfile are installed.\nThe renv lockfile captures the state of the package library of the project at some point in time. It is defining the version of renv used when generating the lockfile, the version of  used in that project, the R repositories that were active when the lockfile was created and the package records defining each  package, their version, and their installation source. For details on the anatomy of renv.lock, see this section in the renv documentation.\n\n\nClick here to view the full renv.lock file of this project.\n\n\n\n\nrenv.lock\n\n{\n  \"R\": {\n    \"Version\": \"4.3.0\",\n    \"Repositories\": [\n      {\n        \"Name\": \"CRAN\",\n        \"URL\": \"https://cran.rstudio.com\"\n      }\n    ]\n  },\n  \"Packages\": {\n    \"R6\": {\n      \"Package\": \"R6\",\n      \"Version\": \"2.5.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"470851b6d5d0ac559e9d01bb352b4021\"\n    },\n    \"base64enc\": {\n      \"Package\": \"base64enc\",\n      \"Version\": \"0.1-3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"543776ae6848fde2f48ff3816d0628bc\"\n    },\n    \"bslib\": {\n      \"Package\": \"bslib\",\n      \"Version\": \"0.5.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"base64enc\",\n        \"cachem\",\n        \"grDevices\",\n        \"htmltools\",\n        \"jquerylib\",\n        \"jsonlite\",\n        \"memoise\",\n        \"mime\",\n        \"rlang\",\n        \"sass\"\n      ],\n      \"Hash\": \"1b117970533deb6d4e992c1b34e9d905\"\n    },\n    \"cachem\": {\n      \"Package\": \"cachem\",\n      \"Version\": \"1.0.8\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"fastmap\",\n        \"rlang\"\n      ],\n      \"Hash\": \"c35768291560ce302c0a6589f92e837d\"\n    },\n    \"cli\": {\n      \"Package\": \"cli\",\n      \"Version\": \"3.6.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"utils\"\n      ],\n      \"Hash\": \"89e6d8219950eac806ae0c489052048a\"\n    },\n    \"data.table\": {\n      \"Package\": \"data.table\",\n      \"Version\": \"1.14.8\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\"\n      ],\n      \"Hash\": \"b4c06e554f33344e044ccd7fdca750a9\"\n    },\n    \"digest\": {\n      \"Package\": \"digest\",\n      \"Version\": \"0.6.31\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"utils\"\n      ],\n      \"Hash\": \"8b708f296afd9ae69f450f9640be8990\"\n    },\n    \"ellipsis\": {\n      \"Package\": \"ellipsis\",\n      \"Version\": \"0.3.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"rlang\"\n      ],\n      \"Hash\": \"bb0eec2fe32e88d9e2836c2f73ea2077\"\n    },\n    \"evaluate\": {\n      \"Package\": \"evaluate\",\n      \"Version\": \"0.21\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\"\n      ],\n      \"Hash\": \"d59f3b464e8da1aef82dc04b588b8dfb\"\n    },\n    \"fastmap\": {\n      \"Package\": \"fastmap\",\n      \"Version\": \"1.1.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Hash\": \"f7736a18de97dea803bde0a2daaafb27\"\n    },\n    \"fontawesome\": {\n      \"Package\": \"fontawesome\",\n      \"Version\": \"0.5.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"htmltools\",\n        \"rlang\"\n      ],\n      \"Hash\": \"1e22b8cabbad1eae951a75e9f8b52378\"\n    },\n    \"fs\": {\n      \"Package\": \"fs\",\n      \"Version\": \"1.6.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\"\n      ],\n      \"Hash\": \"94af08e0aa9675a16fadbb3aaaa90d2a\"\n    },\n    \"glue\": {\n      \"Package\": \"glue\",\n      \"Version\": \"1.6.2\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"methods\"\n      ],\n      \"Hash\": \"4f2596dfb05dac67b9dc558e5c6fba2e\"\n    },\n    \"here\": {\n      \"Package\": \"here\",\n      \"Version\": \"1.0.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"rprojroot\"\n      ],\n      \"Hash\": \"24b224366f9c2e7534d2344d10d59211\"\n    },\n    \"highr\": {\n      \"Package\": \"highr\",\n      \"Version\": \"0.10\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"xfun\"\n      ],\n      \"Hash\": \"06230136b2d2b9ba5805e1963fa6e890\"\n    },\n    \"htmltools\": {\n      \"Package\": \"htmltools\",\n      \"Version\": \"0.5.5\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"base64enc\",\n        \"digest\",\n        \"ellipsis\",\n        \"fastmap\",\n        \"grDevices\",\n        \"rlang\",\n        \"utils\"\n      ],\n      \"Hash\": \"ba0240784ad50a62165058a27459304a\"\n    },\n    \"jquerylib\": {\n      \"Package\": \"jquerylib\",\n      \"Version\": \"0.1.4\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"htmltools\"\n      ],\n      \"Hash\": \"5aab57a3bd297eee1c1d862735972182\"\n    },\n    \"jsonlite\": {\n      \"Package\": \"jsonlite\",\n      \"Version\": \"1.8.5\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"methods\"\n      ],\n      \"Hash\": \"3ee4d9899e4db3e976fc82b98d24a31a\"\n    },\n    \"knitr\": {\n      \"Package\": \"knitr\",\n      \"Version\": \"1.43\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"evaluate\",\n        \"highr\",\n        \"methods\",\n        \"tools\",\n        \"xfun\",\n        \"yaml\"\n      ],\n      \"Hash\": \"9775eb076713f627c07ce41d8199d8f6\"\n    },\n    \"lifecycle\": {\n      \"Package\": \"lifecycle\",\n      \"Version\": \"1.0.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"glue\",\n        \"rlang\"\n      ],\n      \"Hash\": \"001cecbeac1cff9301bdc3775ee46a86\"\n    },\n    \"magrittr\": {\n      \"Package\": \"magrittr\",\n      \"Version\": \"2.0.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"7ce2733a9826b3aeb1775d56fd305472\"\n    },\n    \"memoise\": {\n      \"Package\": \"memoise\",\n      \"Version\": \"2.0.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"cachem\",\n        \"rlang\"\n      ],\n      \"Hash\": \"e2817ccf4a065c5d9d7f2cfbe7c1d78c\"\n    },\n    \"mime\": {\n      \"Package\": \"mime\",\n      \"Version\": \"0.12\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"tools\"\n      ],\n      \"Hash\": \"18e9c28c1d3ca1560ce30658b22ce104\"\n    },\n    \"rappdirs\": {\n      \"Package\": \"rappdirs\",\n      \"Version\": \"0.3.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"5e3c5dc0b071b21fa128676560dbe94d\"\n    },\n    \"renv\": {\n      \"Package\": \"renv\",\n      \"Version\": \"1.0.0\",\n      \"OS_type\": null,\n      \"Repository\": \"CRAN\",\n      \"Source\": \"Repository\"\n    },\n    \"rlang\": {\n      \"Package\": \"rlang\",\n      \"Version\": \"1.1.1\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"utils\"\n      ],\n      \"Hash\": \"a85c767b55f0bf9b7ad16c6d7baee5bb\"\n    },\n    \"rmarkdown\": {\n      \"Package\": \"rmarkdown\",\n      \"Version\": \"2.22\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"bslib\",\n        \"evaluate\",\n        \"fontawesome\",\n        \"htmltools\",\n        \"jquerylib\",\n        \"jsonlite\",\n        \"knitr\",\n        \"methods\",\n        \"stringr\",\n        \"tinytex\",\n        \"tools\",\n        \"utils\",\n        \"xfun\",\n        \"yaml\"\n      ],\n      \"Hash\": \"75a01be060d800ceb14e32c666cacac9\"\n    },\n    \"rprojroot\": {\n      \"Package\": \"rprojroot\",\n      \"Version\": \"2.0.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\"\n      ],\n      \"Hash\": \"1de7ab598047a87bba48434ba35d497d\"\n    },\n    \"sass\": {\n      \"Package\": \"sass\",\n      \"Version\": \"0.4.6\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R6\",\n        \"fs\",\n        \"htmltools\",\n        \"rappdirs\",\n        \"rlang\"\n      ],\n      \"Hash\": \"cc3ec7dd33982ef56570229b62d6388e\"\n    },\n    \"stringi\": {\n      \"Package\": \"stringi\",\n      \"Version\": \"1.7.12\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"stats\",\n        \"tools\",\n        \"utils\"\n      ],\n      \"Hash\": \"ca8bd84263c77310739d2cf64d84d7c9\"\n    },\n    \"stringr\": {\n      \"Package\": \"stringr\",\n      \"Version\": \"1.5.0\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"glue\",\n        \"lifecycle\",\n        \"magrittr\",\n        \"rlang\",\n        \"stringi\",\n        \"vctrs\"\n      ],\n      \"Hash\": \"671a4d384ae9d32fc47a14e98bfa3dc8\"\n    },\n    \"tinytex\": {\n      \"Package\": \"tinytex\",\n      \"Version\": \"0.45\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"xfun\"\n      ],\n      \"Hash\": \"e4e357f28c2edff493936b6cb30c3d65\"\n    },\n    \"vctrs\": {\n      \"Package\": \"vctrs\",\n      \"Version\": \"0.6.3\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"R\",\n        \"cli\",\n        \"glue\",\n        \"lifecycle\",\n        \"rlang\"\n      ],\n      \"Hash\": \"d0ef2856b83dc33ea6e255caf6229ee2\"\n    },\n    \"xfun\": {\n      \"Package\": \"xfun\",\n      \"Version\": \"0.39\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Requirements\": [\n        \"stats\",\n        \"tools\"\n      ],\n      \"Hash\": \"8f56e9acb54fb525e66464d57ab58bcb\"\n    },\n    \"yaml\": {\n      \"Package\": \"yaml\",\n      \"Version\": \"2.3.7\",\n      \"Source\": \"Repository\",\n      \"Repository\": \"CRAN\",\n      \"Hash\": \"0d0056cc5383fbc240ccd0cb584bf436\"\n    }\n  }\n}\n\n\n\n\n\n13.4.2 Restoring renv\nIf renv is activated but it recognized that (not all of) the packages listed in the renv.lock file are installed, renv will suggest to restore the project library using renv::restore():\n\n* This project contains a lockfile, but none of the recorded packages are installed.\n* Use `renv::restore()` to restore the project library.\n\n\nrenv::restore()\n\nThis will generate a list of files that will be updated.\n\n\nClick here to view an example output of the renv::restore() command.\n\n\nThe following package(s) will be updated:\n\n# CRAN ===============================\n- R6            [* -&gt; 2.5.1]\n- base64enc     [* -&gt; 0.1-3]\n- bslib         [* -&gt; 0.5.0]\n- cachem        [* -&gt; 1.0.8]\n- cli           [* -&gt; 3.6.1]\n- data.table    [* -&gt; 1.14.8]\n- digest        [* -&gt; 0.6.31]\n- ellipsis      [* -&gt; 0.3.2]\n- evaluate      [* -&gt; 0.21]\n- fastmap       [* -&gt; 1.1.1]\n- fontawesome   [* -&gt; 0.5.1]\n- fs            [* -&gt; 1.6.2]\n- glue          [* -&gt; 1.6.2]\n- here          [* -&gt; 1.0.1]\n- highr         [* -&gt; 0.10]\n- htmltools     [* -&gt; 0.5.5]\n- jquerylib     [* -&gt; 0.1.4]\n- jsonlite      [* -&gt; 1.8.5]\n- knitr         [* -&gt; 1.43]\n- lifecycle     [* -&gt; 1.0.3]\n- magrittr      [* -&gt; 2.0.3]\n- memoise       [* -&gt; 2.0.1]\n- mime          [* -&gt; 0.12]\n- rappdirs      [* -&gt; 0.3.3]\n- rlang         [* -&gt; 1.1.1]\n- rmarkdown     [* -&gt; 2.22]\n- rprojroot     [* -&gt; 2.0.3]\n- sass          [* -&gt; 0.4.6]\n- stringi       [* -&gt; 1.7.12]\n- stringr       [* -&gt; 1.5.0]\n- tinytex       [* -&gt; 0.45]\n- vctrs         [* -&gt; 0.6.3]\n- xfun          [* -&gt; 0.39]\n- yaml          [* -&gt; 2.3.7]\n\nDo you want to proceed? [y/N]: \n\n\nIf you want to proceed with the update, type y and hit enter.\n\n\n13.4.3 Adding / removing packages\nInstall packages:\n\n1install.packages(\"PACKAGE_NAME\")\n2renv::install(\"PACKAGE_NAME\")\n\n\n1\n\nReplace PACKAGE_NAME with the actual name of the package that you want to install.\n\n2\n\nReplace PACKAGE_NAME with the actual name of the package that you want to install.\n\n\n\n\nRemove packages:\n\n1remove.packages(\"PACKAGE_NAME\")\n2renv::remove(\"PACKAGE_NAME\")\n\n\n1\n\nReplace PACKAGE_NAME with the actual name of the package that you want to remove.\n\n2\n\nReplace PACKAGE_NAME with the actual name of the package that you want to remove.\n\n\n\n\nCall renv::snapshot() to save the new state of the project library to the renv.lock:\n\nrenv::snapshot()\n\n\n\n13.4.4 Commit your changes\nThe renv.lock is checked into version control, so after you updated it, make a new commit:\n\ngit add renv.lock\n1git commit -m \"add package PACKAGE_NAME to renv\"\n\n\n1\n\nReplace PACKAGE_NAME with the actual name of the package that you installed. Adapt the commit message as needed."
  },
  {
    "objectID": "chapters/contributing.html#sec-references",
    "href": "chapters/contributing.html#sec-references",
    "title": "13  Contributing",
    "section": "13.5 References",
    "text": "13.5 References\n\n “Citations & Footnotes” in the Quarto documentation.\n HTML options for references.\n\n\n13.5.1 Cite a reference\nReferences are stored in references.bib.\n\n\nClick here to view the full references.bib file of this project.\n\n\n\n\nreferences.bib\n\n@book{community2022,\n    title = {The Turing Way: A handbook for reproducible, ethical and collaborative research},\n    author = {{The Turing Way Community}},\n    year = {2022},\n    month = {07},\n    date = {2022-07-27},\n    publisher = {Zenodo},\n    doi = {10.5281/zenodo.3233853},\n    url = {https://zenodo.org/record/3233853},\n    note = {License: The process documents and data are made available under a \\href{https://creativecommons.org/licenses/by/4.0/}{CC BY 4.0 license}. Software are made available under an \\href{https://opensource.org/license/mit/}{MIT license}.}\n}\n\n@book{chacon2014,\n    title = {Pro Git},\n    author = {Chacon, Scott and Straub, Ben},\n    year = {2014},\n    date = {2014},\n    publisher = {Apress},\n    doi = {10.1007/978-1-4842-0076-6},\n    url = {http://dx.doi.org/10.1007/978-1-4842-0076-6},\n    note = {License: CC BY-NC}\n}\n\n@software{allaire2022,\n    title = {Quarto},\n    author = {Allaire, J.J. and Teague, Charles and Xie, Yihui and Dervieux, Christophe},\n    year = {2022},\n    month = {01},\n    date = {2022-01-10},\n    doi = {10.5281/zenodo.5960048},\n    url = {https://github.com/quarto-dev/quarto-cli},\n    version = {1.2},\n    note = {License: \\href{https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html}{GNU GPL v2}}\n}\n\n@article{millman2018,\n    title = {Teaching Computational Reproducibility for Neuroimaging},\n    author = {Millman, K. Jarrod and Brett, Matthew and Barnowski, Ross and Poline, Jean-Baptiste},\n    year = {2018},\n    month = {10},\n    date = {2018-10-22},\n    journal = {Frontiers in Neuroscience},\n    volume = {12},\n    doi = {10.3389/fnins.2018.00727},\n    url = {http://dx.doi.org/10.3389/fnins.2018.00727},\n    note = {License: \\href{https://creativecommons.org/licenses/by/4.0/}{CC BY 4.0}}\n}\n\n@article{milligan2014,\n    title = {Introduction to the Bash Command Line},\n    author = {Milligan, Ian and Baker, James},\n    editor = {Crymble, Adam},\n    year = {2014},\n    month = {09},\n    date = {2014-09-20},\n    journal = {Programming Historian},\n    number = {3},\n    doi = {10.46430/phen0037},\n    url = {http://dx.doi.org/10.46430/phen0037},\n    langid = {en}\n}\n\n@misc{mcbain2019,\n  author = {McBain, Miles},\n  title = {Git for Scientists},\n  year = {2019},\n  url = {https://milesmcbain.github.io/git_4_sci/},\n  note = {License: \\href{http://creativecommons.org/licenses/by-sa/4.0/}{CC BY-SA 4.0}. Source: \\href{https://github.com/MilesMcBain/git_4_sci/}{https://github.com/MilesMcBain/git_4_sci/}}\n}\n\n\n\nUse the citation handle of the .bib-entry that you want to cite. For example use @chacon2014 to cite Chacon and Straub (2014). For details, see teh chapter on “Citations & Footnotes” in the Quarto documentation. Add the specific references that you used to the bottom of the document. If the reference consists of multiple chapters and pages, try to specify the exact chapter or page.\n\n\n13.5.2 Add a new reference\n\nOpen references.qmd\nSwitch to the Visual Quarto editor.\nMove the cursor into any place in the document.\nClick on Insert and select @ Citation ...\nIf the reference has a DOI:\nSelect From DOI\nPaste the DOI\nSelect Insert\nThis should add the new reference to references.bib.\nMove the citation key to the correct place\n\n\n\n13.5.3 Add license information\nWe want to keep track of license information. If you add a new reference, please add the license information manually.\n\nGo to references.bib and find the reference.\nInside the .bib-entry for the reference add a new field called note that includes the license information.\n\n\n@book{\n  note = {License: CC BY-NC}\n}\n\nFor example, this is the references for Chacon and Straub (2014):\n\n@book{chacon2014,\n    title = {Pro Git},\n    author = {Chacon, Scott and Straub, Ben},\n    year = {2014},\n    date = {2014},\n    publisher = {Apress},\n    doi = {10.1007/978-1-4842-0076-6},\n    url = {http://dx.doi.org/10.1007/978-1-4842-0076-6},\n    note = {License: CC BY-NC}\n}"
  },
  {
    "objectID": "chapters/contributing.html#sec-code",
    "href": "chapters/contributing.html#sec-code",
    "title": "13  Contributing",
    "section": "13.6 Code",
    "text": "13.6 Code\n\n “HTML Code Blocks” in the Quarto documentation\n\n\n13.6.1 Add code snippets\nAdd code snippets to a Quarto document like this:\n```{bash}\ngit status\n```\n\n\n\n\n\n\nDisable code execution in all Quarto documents by default!\n\n\n\nPlace the following code in the YAML header of each Quarto document:\n\nengine: knitr\nexecute:\n  eval: false\n\n\n\nExample: Click here for the YAML header of the current document.\n\n\n\n\nchapters/contributing.qmd\n\n---\ntitle: \"Contributing\"\nengine: knitr\nexecute:\n  eval: false\ntitle-block-style: none\n\n\n\n\n\nClick here to learn more.\n\nQuarto enables the inclusion of executable code blocks in Markdown. This empowers users to create reproducible documents and reports, as the code needed for generating the output is embedded within the document and automatically executed during rendering.\nHowever, in this guide, we usually only want to display code but not execute it! We therefore need to disable code execution in the YAML header of each Quarto document.\nThe YAML header in a Quarto document is used to specify important metadata and settings for the document. It is typically placed at the top of the document enclosed between three dashes (---) to separate it from the main content. The YAML header provides instructions to the Quarto rendering engine on how to process and present the document.\n\n\n\n\n\n13.6.2 Reference external code\nYou can reference external code. For example, the following code block will:\n\n\n\n\n\n\n\n\n\n\n\n\n\ndescription\ncode\n\n\n\n\n1\nreference the _quarto.yml file\n#&#124; file: _quarto.yml\n\n\n2\ndisplay the first five lines of code\necho=c(1:5)\n\n\n3\nadd code line numbers\n#&#124; code-line-numbers: true\n\n\n4\nadd a filename to the code block\nfilename=\"_quarto.yml\"\n\n\n\n\n```{bash, filename=\"_quarto.yml\", echo=c(1:5)}\n#| file: _quarto.yml\n#| code-line-numbers: true\n```\n\n\nClick here for the output of this example.\n\n\n\n\n_quarto.yml\n\nproject:\n  # project options (https://quarto.org/docs/reference/projects/options.html):\n  type: book\n  output-dir: _book\n  execute-dir: project\n\n\n\n\n\n13.6.3 Add code annotations\n\n “Code Annotation” in the Quarto documentation\n\n\nCode blocks and executable code cells in Quarto can include line-based annotations. Line-based annotations provide a way to attach explanation to lines of code much like footnotes.\n\nFor example, this is a code annotation for the git status command:\n```{bash}\ngit status # &lt;1&gt;\n```\n1. `git status` displays the state of the working directory and the staging area."
  },
  {
    "objectID": "chapters/contributing.html#sec-images",
    "href": "chapters/contributing.html#sec-images",
    "title": "13  Contributing",
    "section": "13.7 Images",
    "text": "13.7 Images\n\n13.7.1 Background\nImages are stored in a NextCloud folder. They are downloaded into the /static folder using the command specified in the Makefile.\n\n\n13.7.2 Installation\nYou need to install the following packages:\n\nGNU Wget\nGNU Make\n\n\n\n\n\n\nPrerequisite: Install Homebrew\n\n\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n\nAfter you installed Homebrew, install GNU Wget\n\n\nbrew install wget\n\nGNU Make should already be installed. Try by entering the following command into the Terminal:\n\nmake --version\n\n\n\nTBA\n\n\nTBA\n\n\n\n\n\n13.7.3 Retrieve images\nAfter you installed all the required software, run this command:\n\nmake download-images\n\n\n\n\n\n\n\nWhat’s a Makefile and what does it do?\n\n\n\n\n\n\n\n\nMakefile\n\n# define URL to Nextcloud where static files are stored:\nIMAGES_URL=https://cloud.uni-hamburg.de/s/aD7NTNB9f4NDorT/download\n# define a name for the .zip-archive with the cloud contents:\nIMAGES_ARCHIVE=version-control-book.zip\n# define the name of the local folder:\nIMAGES_DIR=static/\n\n# define the default targets of the make command\nall: download-images\n\n# download and extract images:\ndownload-images:\n    wget $(IMAGES_URL) -O $(IMAGES_ARCHIVE)\n    unzip -j -o $(IMAGES_ARCHIVE) -d $(IMAGES_DIR)\n    rm -f $(IMAGES_ARCHIVE)\n\n# clean downloaded images folder:\nclean:\n    rm -rf $(IMAGES_DIR)*\n\n\n\n\n\n\n\n13.7.4 Add a new image\n\nBecome a collaborator on the UHH Cloud folder.\nGo to the UHH Cloud folder.\nPlace the new image inside the folder. Please use - to separate word in the filename.\nReference the image in the Quarto document relative to the root of the project directory:\n\n\n![](static/NEW-IMAGE.png)\n\n\n\n13.7.5 Download images in pre-render command\nIt’s also possible to include the make download-images as a project script in the pre-render script. This would re-execute make download-images before every render. For the moment, we disabled this option, but it can be enabled in _quarto.yml."
  },
  {
    "objectID": "chapters/contributing.html#sec-variables",
    "href": "chapters/contributing.html#sec-variables",
    "title": "13  Contributing",
    "section": "13.8 Variables",
    "text": "13.8 Variables\n\n “Variables” in the Quarto documentation\n\nQuarto offers a number of ways to include dynamic variables within documents. Dynamic variables are useful for externalizing content that varies depending on context, or as an alternative to repeating a value in multiple places.\nIn this project, we use a project-level _variables.yml file to define variables. Variables can be either simple values or can include arbitrary Markdown content.\n\n\n\n_variables.yml (excerpt)\n\nlinks:\n  nextcloud: https://cloud.uni-hamburg.de/s/aD7NTNB9f4NDorT\n\n\n\n\nClick here to view the full _variables.yml file of this project.\n\n\n\n\n_variables.yml\n\n# https://quarto.org/docs/authoring/variables.html\nlinks:\n  nextcloud: https://cloud.uni-hamburg.de/s/aD7NTNB9f4NDorT\n\nlanguage:\n  dont:\n    yes: \"don't\"\n    no: \"do not\"\n  folder:\n    yes: \"folder\"\n    no: \"directory\"\n  documentation:\n    yes: \"documentation\"\n    no: \"docs\"\n\n\n\nThe var shortcode then allows to include references to those variables within any document in this project. For example, to include the link to the Nextcloud folder that stores static contents (images etc.) as a variable in a document, use {{&lt; var links.nextcloud &gt;}}.\nFor more details on variables, read the chapter on Variables in the Quarto documentation."
  },
  {
    "objectID": "chapters/contributing.html#sec-icons",
    "href": "chapters/contributing.html#sec-icons",
    "title": "13  Contributing",
    "section": "13.9 Fontawesome Icons",
    "text": "13.9 Fontawesome Icons\n\n Font Awesome Extension for Quarto\n Free Font Awesome icons\n\nWe use the Font Awesome Extension for Quarto to include Font Awesome icons.\n\nThis extension provides support including free icons provided by Font Awesome. Icons can be used in both HTML (via Font Awesome 6 Free) and PDF (via the fontawesome5 LaTeX package).\n\nThis extension includes support for only free Font Awesome icons.\nTo embed an icon, use the {{&lt; fa &gt;}} shortcode. For example, {{&lt; fa thumbs-up &gt;}} will result in . For details, see the project documentation on GitHub."
  },
  {
    "objectID": "chapters/contributing.html#sec-acknowledgements",
    "href": "chapters/contributing.html#sec-acknowledgements",
    "title": "13  Contributing",
    "section": "13.10 Acknowledgements & Attribution",
    "text": "13.10 Acknowledgements & Attribution\n\nThe Quarto documentation (Allaire et al. 2022), in particular the chapters on Variables, Quarto Extensions, “Code Annotation” (License: GNU GPL v2)\n(blischak2016?)\nThe Font Awesome Extension for Quarto (License: MIT)\n\n\n\n\n\nAllaire, J. J., Charles Teague, Yihui Xie, and Christophe Dervieux. 2022. “Quarto.” https://doi.org/10.5281/zenodo.5960048. License: GNU GPL v2.\n\n\nChacon, Scott, and Ben Straub. 2014. Pro Git. Apress. https://doi.org/10.1007/978-1-4842-0076-6. License: CC BY-NC."
  },
  {
    "objectID": "chapters/style-guide.html#summary",
    "href": "chapters/style-guide.html#summary",
    "title": "14  Style Guide",
    "section": "14.1 Summary",
    "text": "14.1 Summary\n\nWrite one sentence per line\nUse consistent language"
  },
  {
    "objectID": "chapters/style-guide.html#write-one-sentence-per-line",
    "href": "chapters/style-guide.html#write-one-sentence-per-line",
    "title": "14  Style Guide",
    "section": "14.2 Write one sentence per line",
    "text": "14.2 Write one sentence per line\nPlease write each sentence on a new line. Having each sentence on a new line will make no difference to how the text is displayed, there will still be paragraphs, but it will mean that any pull requests will be easier to check; the changes will be on a single line instead of somewhere in a paragraph. Consider the example below.\nToday you are you, that is truer than true. There is no one alive who is youer than you. - Dr Seuss\nA pull request on this correcting it to have a ‘.’ after Dr would show as a change to the whole paragraph. Contrast this with the next example which will be displayed online in the exact same way, but would see a change to a single line.\nToday you are you, that is truer than true.\nThere is no one alive who is youer than you.\n- Dr Seuss"
  },
  {
    "objectID": "chapters/style-guide.html#use-consistent-language",
    "href": "chapters/style-guide.html#use-consistent-language",
    "title": "14  Style Guide",
    "section": "14.3 Use consistent language",
    "text": "14.3 Use consistent language\nWe try to use consistent language:\n\n\n\n\n\n\n\nTRUE\nFALSE\n\n\n\n\ndon’t\ndo not\n\n\nfolder\ndirectory\n\n\ndocumentation\ndocs"
  },
  {
    "objectID": "chapters/style-guide.html#acknowledgements-attribution",
    "href": "chapters/style-guide.html#acknowledgements-attribution",
    "title": "14  Style Guide",
    "section": "14.4 Acknowledgements & Attribution",
    "text": "14.4 Acknowledgements & Attribution\n\nThe Turing Way Community (2022): Style Guide\n\n\n\n\n\nThe Turing Way Community. 2022. The Turing Way: A Handbook for Reproducible, Ethical and Collaborative Research. Zenodo. https://doi.org/10.5281/zenodo.3233853. License: The process documents and data are made available under a CC BY 4.0 license. Software are made available under an MIT license."
  }
]