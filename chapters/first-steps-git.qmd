---
title: "First Steps with Git"
engine: knitr
execute:
  eval: false
title-block-style: none
author: ""
categories: [beginner, basics]
abstract: |
  Exploring the most important basic commands you will need. 
abstract-title: "Overview"
---

## Introduction

### Prerequisites
To follow this chapter, you should have:

- [Familiarity with the command line](command-line.qmd)

- [Installed Git](installation.qmd)

- [Set up Git](setup.qmd)

### Learning Objectives

Learning basic Git operations including:

-   Initializing a Git Repository

-   Staging and Committing Changes

-   Exploring the commit history

-   Comparing Versions

-   (Creating a .gitignore file)

### Exercise

To learn Git effectively, it makes sense to practice version control on your own small project.
For our purpose we will start off small and text based:

-   Create a folder called "recipes" and initialize it as a git repository.

-   Create a textfile called "favourites.txt", in this folder.

-   Add a favourite (or a crazy AI generated one) recipe of yours in this file.

-   Stage and commit your changes to the file, write a commit message

This book will continue to work with this project.

## {{< fa folder-closed >}} Initializing a Folder as a Git Repository 

To create your first Git repository, you need to initialize a folder.
You can create an empty folder using the command line like this:

```{bash}
mkdir foldername
```

Alternatively, you can create a folder in the usual way.

Navigate, using the Terminal, to the folder which you want to initialize as a Git repository.
You can use the `cd` command to change directories.
Once you are in the desired directory, run the `git init` command to initialize the folder as a Git repository.

```{bash}
git init
```

You should see the following output:

```{bash}
Initialized empty Git repository in /Users/.../
```

Congratulations on successfully initializing your first Git repository! {{< fa champagne-glasses >}}

Git is now able to track your file(s and the changes you make to them, in this Folder.
You only need to use `git init` once per folder.

::: {.callout-tip collapse="true"}
## .Git file

If you want "proof" that Git is tracking your folder, you can look for the .git file.
To do this navigate to the right folder and use `ls -a` to show hidden files.
You should see a file called .git.
You probably should not manually modify this file, since doing so can corrupt your repository.
:::


In the next step, please create an empty text file within this folder, either using the `touch` command:

```{bash}
touch filename.txt
```

or a different preferred method for creating files.

## {{< fa file-export >}} Status, Staging and committing 

### Introduction
After initializing a folder, Git is now able to record the changes of your file, but it will not do so automatically.
In Git, there are two steps for saving your changes: the staging area and the commits. 
The staging area is like a waiting area where you gather and prepare your changes before saving them. 
Check out this [Youtube video](https://youtu.be/HMqUFlu0gFc?t=228) for a detailed explanation of the staging area using a metaphor.
You can choose which changes to include in the snapshot by adding them to the staging area using `git add`. 
Once you're satisfied with the changes in the staging area, you make a **commit**, using `git commit`. 
A commit is like taking a snapshot of your project at a specific moment. 
It captures all the changes in the staging area and saves them as a new version. 
Commits are like milestones that help you track the progress of your project and easily go back to a previous version if needed.

### Status
After you initialized a folder, you can use `git status` to visualize the current file tracking status from Git.

```{bash}
git status
```

You should see output similar to the following:

```{bash}
On branch main

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	example.txt
```

As you can see `git status` gives you an overview, which files git is tracking for you. 
If you have created a file in your initialized folder, it should show up under untracked files.
`git status`  is  very useful for quickly identifying the current state of your Git repository, showing which files have been modified, staged, or are untracked.

::: {.callout-tip collapse="true"}
### Common git status flags

`-s`: 
Provides a more compact and simplified output, showing only the file status in a short format.

`-b`: 
Includes information about the branch you are currently on along with the status.

`-u`: 
Shows untracked files in the output.

`-uno`: 
Suppresses the display of untracked files.

`-v`: 
Provides more detailed information, including additional status information about ignored files.

You can use these flags in combination.
For example, `git status -s -b` will display a short and concise output along with the branch information.
:::

### Staging
You can use `git add` to put new/changed files in the "staging area". 
The staging area serves as a space where you can gather changes that you intend to commit soon.
To organize and group these changes into meaningful commits, you can place the relevant files in the staging area. 
The staging area acts as a bridge between your modified files and the next commit.

```{bash}
git add example.txt
```

If you use `git status` again, your file(s) should now show up under "changes to be committed".

```{bash}
On branch main

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	new file:   example.txt
```
Your change to the file, or the addition if it is now **staged**.
You do not have to add every file one by one, you can simply use the `-a` flag.

::: {.callout-tip collapse="true"}
## Common git add flags

`-a`: 
Adds all changes, including modifications, deletions, and new files, in the entire working tree.

`-u`: 
Adds modifications and deletions, but not new files.

`--ignore-errors`: 
Ignores errors when adding files, allowing the command to continue even if some files cannot be added.
:::

### Committing

Now that your changes are staged, you are ready to create a commit. 
To create a commit, use the `git commit` command followed by the flag `-m` and a commit message **in quotes** that describes the changes you made.
The commit message should be short yet informative, providing enough detail to understand the purpose of the commit. 
If you just use `git commit` without adding a commit massage, the editor of [your choosing](installation-setup.qmd), opens up and lets you type in a commit message.

```{bash}
git commit -m "Add example.txt file"
```

You should see output similar to the following:

```{bash}
[main (root-commit) e9ea807] adding txt file
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 example.txt
```

Congratulations! You have successfully created your first commit in the Git repository. 
Commits are the core elements of version control, they allow you to track the history of your project and easily revert changes if needed.

You can use the same workflow of `git add` and `git commit` for every file you add or make changes in.

::: {.callout-tip collapse="true"}
## Common git commit flags

`-m` <message>: 
Specifies the commit message inline. For example, git commit -m "Fix typo" allows you to provide a short commit message directly in the command.

`-a` or `--all`: 
Automatically stages all modified and deleted files before committing. This skips the separate git add step.

`-v` or `--verbose`: 
Provides a detailed output, showing the diff of the changes being committed.

`-e` or `--edit`: 
Opens the commit message editor, allowing you to edit the commit message before finalizing the commit.

`--amend`: 
Modifies the previous commit. It allows you to add new changes to the previous commit or modify its commit message.
:::

### Logging Commits

To look at your past commits you can use the `git log` command.

```{bash}
git log
```

You should see output similar to the following:

```{bash}
commit e9ea80781ceed7cc3d6bff0c7bfa71f320ec1f60 (HEAD -> main)
Author: Example <beispiel@example.de>
Date:   Thu Jun 29 12:23:53 2023 +0200

    adding txt file
```

`git log` is useful because it provides a clear and organized view of a repository's commit history. 
It allows you to track the evolution of a project over time by displaying detailed information about each commit, including changes made, authors, and timestamps. 
The command can help identifying the source of bugs or issues by pinpointing the commit that introduced them.

::: {.callout-tip collapse="true"}
## Common git log flags
`--oneline`: 
Provides a condensed output with each commit displayed on a single line, showing the abbreviated commit hash and commit message.

`-n` <number> or `--max-count=`<number>: 
Limits the number of commits shown to the specified <number>. For example, git log -n 5 will display the latest 5 commits.

`--since=`<date>: 
Shows commits made after the specified <date>. You can use various date formats, such as specific dates or relative expressions like "2 weeks ago" or "yesterday".

`--until=`<date>:
Shows commits made before the specified <date>.

`--author=`<pattern>: 
Filters commits by the author's name or email using a specified <pattern>.
:::

### Comparing Versions

Another very handy feature is the **git diff** command.
It allows you to compare two different versions of your file.
By default it shows you any uncommitted changes since the last commit. You can explore this by pasting this text in your .txt file

```         
Lorem ipsum dolor sit amet, consectetur adipisici elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua. 
Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquid ex ea commodi consequat. 
Quis aute iure reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. 
Excepteur sint obcaecat cupiditat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
```

You can then look at the changes using:

```{bash}
git diff
```

You should see output similar to the following:

```{bash}
+++ b/example.txt
@@ -0,0 +1 @@
+Lorem ipsum dolor sit amet, consectetur adipisici elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquid ex ea commodi consequat. Quis aute iure reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat cupiditat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
\ No newline at end of file
```
::: {.callout-tip collapse="true"}
## Common git diff flags
`--cached` or `--staged`: 
Shows the changes that are staged (added) but not yet committed.

<commit>: Displays the difference between the current working directory and a specific commit. For example, git diff abc123 shows the changes compared to commit "abc123".

<commit>..<commit>: Shows the difference between two specific commits. For example, git diff abc123..def456 displays the changes between commit "abc123" and commit "def456".

`--name-only`: 
Outputs only the names of the files that have differences, without showing the actual changes.

`--name-status`: 
Displays the names of files along with a status identifier that indicates if a file was added, modified, or deleted.

`--color-words`: 
Highlights the differences at the word level, providing more granular detail.
:::

## Good commits

Ideally, each commit contains an isolated, complete change.
For example, if you want to rename a variable and add a new enhancement, put the variable rename in one commit and the enhancement in another commit.
Later, if you want to keep the tests but revert the enhancement, you can revert the specific commit that contained the variable rename.
If you put the variable rename and the enhancement in the same commit or spread the variable rename across multiple commits, you would spend more effort reverting your changes.

### Commit messages etiquette

Git allows for a title with a 72 character limit and a description without such a limit.
In general you should aim to write clear and concise commit messages.
There are different conventions across projects/persons but also some general guidelines, you can stick to. 

It is standard to start the title with an imperative verb to indicate the purpose of the commit. 
It is also recommended to only write 50 characters for the title and up to 72 for the description (if such a description is even necessary.

## `.gitignore`

`.gitignore` is a special file. It is used in Git to specify files and directories that should be ignored and not tracked.
When you create a `.gitignore` file, place it inside your Git repository and specify filenames inside it, Git will exclude these files and directories from being staged or committed, e.g. when using `git add -a`. which normally stages all your files.
The `.gitignore` file is useful to prevent certain files or directories that are not essential for the project or generated during the development process from being included in the version history.
Including only essential files in version control keeps your repository clean, making it easier for collaborators to focus on the codebase without distractions from unnecessary files.
.gitignore can also help you avoid accidentally committing sensitive information like passwords, API keys, or personal data, which can lead to serious privacy breaches.
It also makes sense to include large files or temporary outputs in your `.gitignore` file.
To keep the repository size manageable, making it faster to clone, pull, and push changes.

To create a `.gitignore` file, navigate to your repo and use the `touch` command.
Alternatively, create the file in your favorite text editor.

```{bash}
touch .gitignore
```

`.gitignore` will be a hidden file, to make it show up in the terminal, you will have to use the `-a` flag in the `ls` command.
(For details on listing of files and folders, see the chapter on the [command line](command-line.qmd).

```{bash}
ls -a
```

To open it, simply use the `open` command.

```{bash}
open .gitignore
```

Now you can write a filename or folder name inside it, to stop git from tracking it.

### Global `.gitignore` file

Instead of specifying files you want Git to ignore for each folder, you can also create global .gitignore file.
To do this, you create a file named .gitignore_global (or any name you prefer) in your home directory (located at /Users/yourusername). 
Then, you configure Git to use this global file by running:

```{bash}
git config --global core.excludesfile ~/.gitignore_global
```
After this setup, you can add common files to this list, that you want to ignore.
These rules will apply across all your Git repositories.

## Common Files to Ignore in Scientific Settings:

**Temporary Files and Output:** 
Ignore files generated during analysis, like log files, temporary CSVs, or intermediate data files that are not part of the final results.

**Data Folders:** 
Exclude large datasets or data stored locally.

**Environment-specific files:** 
Exclude environment-specific files like .env files or venv folders used for local development setups.

**System-Specific Files:** 
In macOS, ignore .DS_Store files, and in Windows, ignore Thumbs.db files.

**R:** 
Ignore .Rdata files and /Rplots.pdf generated by R for plotting.

**Python:** 
Ignore .pyc (Python compiled) files and **pycache**/ folders.

**LaTeX:** 
Ignore auxiliary files like .aux, .log, .bbl, and .blg files generated during LaTeX compilation.

### Wildcards in .gitignore files

As discussed in the [command line chapter](command-line.qmd) wildcards are special characters that represent patterns of filenames or directory names.
They can be used to specify multiple files or directories that should be ignored by Git when tracking changes.
Wildcards allow you to match multiple files with a single rule, making it more convenient to exclude specific types of files or patterns.

::: {.callout-tip title="Common wildcards" collapse="true"}
`*`: 
Matches any number of characters within a filename. For example, *.txt will match all files with the extension .txt in any directory.

`?`:
Matches a single character within a filename. For example, image?.png will match files like image1.png or imageA.png.

`/`:
Matches the root directory of the repository. For example, /config will match a directory named config only in the root of the repository.

`[]` (Square Brackets):
Matches any single character within the brackets. For example, file\[123\].txt will match file1.txt, file2.txt, or file3.txt.

`!`:
Negates a pattern and includes files that would otherwise be ignored. For example, !important.txt will exclude important.txt from being ignored, even if there's a wildcard pattern that matches it.
:::

### Example .gitignore file for a R project

```{bash} 

# R-specific
*.Rproj.user/
*.Rhistory
.RData
.Rproj

# R package specific
.Rcheck/
man/*.Rd
NAMESPACE

# Temporary files
*.bak
*.csv~
*.html
*.pdf

# RMarkdown-specific
*.knit.md
*_cache/
*_files/

# R Markdown Notebook
*.nb.html

# RStudio Project Files
*.Rproj

# R Environment Variables
.Renviron

# R dcf file
DESCRIPTION.meta

# Mac-specific
.DS_Store

```

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
knitr::kable(table_cheatsheet(name = "basic"), format = "markdown")
```

## Acknowledgements

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| output: asis
bibtexkeys = c("bryan2023", "community2022", "millman2018", "mcbain2019")
knitr::kable(ref_table(bibtexkeys), format = "markdown")
```

