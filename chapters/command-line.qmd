---
engine: knitr
execute:
  eval: false
title: "Command Line"
title-block-style: none
author: ""
categories: [beginner]
---

::: {.callout-tip}

In this lesson, we will introduce the command line as a general concept and learn a few commands that are complimentary to git

{{< fa clock >}} Teaching: 30 min | Exercises: 15 min
:::

:::: {.columns}

::: {.column width="50%"}
{{< fa circle-question >}} Questions

- What is the shell, command line, or terminal?
- Why do I need to know the command line to use git?
- How do I use the command line?
- What commands do I need to know?
:::

::: {.column width="50%"}
{{< fa bullseye >}} Objectives

- Understand how to form file paths and navigate directories
- Understand how arguments and flags are used to modify command line commands
- Understand the concept of wild cards (`*`)

:::

::::

## Acknowledgements

@millman2018 @milligan2014

## Cheatsheet

```{r}
#| eval: true
#| echo: false
#| output: false
library("here")
library("magrittr")
library("rjson")
json_data <- rjson::fromJSON(file = here::here("cheatsheet.json"))
cli_data <- json_data$cli
df <- data.frame(Command = names(cli_data), Description = unlist(cli_data),
                 stringsAsFactors = FALSE, row.names = NULL)
df <- df %>%
  transform(Command = sprintf("`%s`", Command))
```

```{r}
#| eval: true
#| echo: false
#| output: asis
knitr::kable(df, format = "markdown", escape = FALSE)
```

## Exercises

- `cd` and `ls`
  - Move to different directories on your computer and list the files and folder.
- Hidden files:
  - Are there more hidden files and folders than you expected?
  - What did you notice about the names of the hidden files?
  - Are there directories with more hidden folders than others?
- Combining arguments and flags (In this exercise you will figure out how to use arguments and flags together)
  - Using the flags you’ve seen so far, experiment to determine what order the flags have to be in.
  - Create a command that lists all the contents of your ‘Documents’ folder in long format.
- using flags:
  - Obtain the usage information for ls. What is a flag that you can use to arrange the output according to date modified?
  - By convention flags that are full words use a double dash -- and flags are a single letter have a singe dash. Why must this be the case?
- Changing Challenges
  - You should be in your Downloads folder. Change to your Documents folder in a single command incorporating the ~ in the path.
  - Change to the root folder of the system and list its contents. Change to your home folder.
- moving around
  - Where does the following command place you on your system? How does it work? cd ~/../../..

## Introduction

This will only teach you enough to be able to use git from the command line.

### Why using Git from the command line

git is fundamentally a command line tool.
This is why comfort with the command line is essential for learning git.

1. GUIs usually do not contain the **full set of features** available on the command line
2. If you search for help with git online (e.g., on [Stack Overflow](https://stackoverflow.com/questions/tagged/git)), you will invariably stumble across **help in the form of command line instructions**


4.3 Shell, command line, cli, terminal

All these words in the title above are used interchangeably to mean the same thing: a sparse window, usually with a dark backgroud and light text, featuring a prompt followed by a cursor. In the movies hacking computers often involves people typing really fast into this window.

The command line interface (cli), is a text-based interface to a computer program. Pretty much everyone primarily uses a Graphical User Interface (GUI) to interact with their programs, but historically this is only recent. Most of the time we’ve had with computers has been using text-based interfaces and often the GUI can only access a subset of functionality available on the cli. There are many important programs that only have a cli (e.g. pandoc).

‘Terminal’ is short for ‘terminal emulator’ which is to say it is a program which emulates a physical input and display device called a terminal, that used to connect to a mainframe computer in the early days of computing. It is the program that draws the dark background, light text, and cursor.

A ‘shell’ is a program that provides a cli to your operating system. Think of the functionality your operating system provides: manipulating your file system, running and stopping programs, changing system settings etc. All of this can be done via text with a shell. When you ‘open a terminal’ the program that the terminal is talking to initially is a shell. For a given operating system you often have a choice of many shells. The most popular shell is the ‘Bourne Again Shell’ or ‘bash’.

## Open the command line

::: {.panel-tabset}

## {{< fa brands apple >}}

Open a fresh Terminal.
In the Finder, go to `Applications` > `Utilities` > `Terminal.app`.

## {{< fa brands microsoft >}}

Run Git BASH now.

## {{< fa brands linux >}}

Open a fresh Terminal.

:::

Typically, your terminal interface will present you with an initial message resembling the following prompt:

```{bash}
wittkuhn@lip-osx-005509:~$
```

On Windows it will contain the same elements but look like this:

```{bash}
wittkuhn@lip-osx-005509:~$
```

## Navigating the file system

### Current working directory

Enter the command `pwd` (short for "print working directory").
This will display the current directory that the shell is currently focused on in your file system.

```{bash}
pwd
```

<details>
<summary>Click here to see an example output.</summary>
```{bash}
#| eval: true
#| echo: false
#| class.output: bash
pwd
```
</details>

### Moving between folders

The `cd` command is used to change the current working directory (or "move" to a different directory).
To use it, type `cd` followed by an argument, which is the path of the folder you want to navigate to. 
The path can be either "absolute" or "relative".

For example, if your current working directory is the user's home directory (`/home/wittkuhn`), you can switch to the `Downloads` folder by using either an absolute or relative path with the `cd` command:

```{bash, filename="Absolute path"}
wittkuhn@lip-osx-005509:~$ cd /home/wittkuhn/Downloads
wittkuhn@lip-osx-005509:~/Downloads$ 
```

```{bash, filename="Relative path"}
wittkuhn@lip-osx-005509:~$ cd Downloads
wittkuhn@lip-osx-005509:~/Downloads$ 
```

You may notice that the prompt has been updated to show the new working directory.
If a path starts with a forward slash (`/`), it is considered an absolute path.
Paths that do not start with a forward slash are considered relative to the current working directory.

### Taking shortcuts

#### Tilde: `~`

The tilde symbol (`~`) provides a convenient and abbreviated way to refer to the user's home directory, enabling us to easily construct paths relative to that directory.
To quickly change the current working directory to our user's home directory anywhere on our file system, we can use `cd ~` which will transport us back to our user's home directory.

```{bash}
wittkuhn@lip-osx-005509:~/Downloads$ cd ~
wittkuhn@lip-osx-005509:~$ 
```

#### Dot: `.`

Another symbol with a special meaning in paths, aside from `~`, is the dot (`.`).
It serves as a shorthand representation for the current working directory, and using it in a path means the reference remains within the same directory.

```{bash}
wittkuhn@lip-osx-005509:~$ cd .
wittkuhn@lip-osx-005509:~$
```

In turn, the two commands are equivalent:

```{bash}
wittkuhn@lip-osx-005509:~$ cd ./Downloads
```

```{bash}
wittkuhn@lip-osx-005509:~$ cd Downloads
```

#### Dot Dot: `..`

The `..` symbol is a shorthand representation for the parent directory of the current working directory.
It can be used repeatedly, allowing `cd ..` to move up one folder and ``cd ../..` to move up two folders.
This is useful for creating relative paths to other branches within a directory tree.

For instance, by executing the following sequence of commands, we will navigate horizontally (or sideways) to a folder located at the same hierarchical level as the current working directory:


```{bash}
wittkuhn@lip-osx-005509:~$ cd ~ # <1>
wittkuhn@lip-osx-005509:~$ cd Downloads # <2>
wittkuhn@lip-osx-005509:~/Downloads$ cd ../Documents # <3>
wittkuhn@lip-osx-005509:~/Documents$ pwd # <4>
/home/wittkuhn/Documents
```
1. Move to the user's home directory using the `~` shorthand.
1. Move to the `Downloads` folder.
1. Move sideways to the `Documents` folder.
1. Display the current working directory.

## List files and folders

The `ls` command is used to list the files and folders in a specified directory or the current working directory.
If you run this command, you will see the contents of your current working directory.

```{bash}
ls
```

For example, when the current working directory is the project directory of this book, `ls` will list the contents of the project directory.

<details>
<summary>Click here to view the output.</summary>
```{bash}
#| eval: true
#| echo: false
#| class.output: bash
ls
```
</details>

However, the `ls` command provides various options, such as flags and arguments, to enhance its functionality beyond simple file listing.
To provide additional instructions to a command, we can pass flags and arguments by typing them after the command name.

### List files in a specific directory

For example, we can list the contents of the `/chapters` folder:

```{bash}
ls chapters
```

<details>
<summary>Click here to view the output.</summary>
```{bash}
#| eval: true
#| echo: false
#| class.output: bash
ls chapters
```
</details>

In this case, `chapters` is an argument to the `ls` command.

### List hidden files

To list hidden files, we can use the `-a` (for "all") flag in the `ls` command.
For example, we can list hidden files in the project directory:

```{bash}
ls -a
```

<details>
<summary>Click here to view the output.</summary>
```{bash}
#| eval: true
#| echo: false
#| class.output: bash
ls -a
```
</details>

### Interlude: What is the difference between a flag and an argument?

#### Overview

The difference between a flag and an argument is that a **flag is used to modify the behavior** of a command, while an **argument provides additional input** or information to the command.

#### What is a flag?

A flag is typically a single character or a combination of characters preceded by a hyphen (`-`) or double hyphen (`--`).
It is used to enable or disable specific options or features of a command.
Flags are optional and are used to customize the behavior of the command.

#### What is an argument?

An argument is the actual input or information that is passed to a command to perform a specific action.
It can be a value, a filename, a directory path, or any other data required by the command to complete its task.
Arguments are often positioned after the command and any flags, and they can be mandatory or optional depending on the command's requirements.

#### Multiple single-letter flags

You can combine multiple single-letter flags by using a single dash.
For example, to instruct the `ls` command to list *all* files (including hidden files) in a *long* format that is easy to read for *humans*, you can use the following combination of flags:

```{bash}
ls -alh
```

<details>
<summary>Click here to view the output.</summary>
```{bash}
#| eval: true
#| echo: false
#| class.output: bash
ls -alh
```
</details>

#### The `--help` flag

If you want to know what flags and arguments a command supports, most commands provide usage information when you use the flag `--help`.
In some cases, the flag `-h` can also be used to achieve the same result.

## Manipulating the file system

The shell provides commands to create, move, and delete folders and files.
4.5.1 Creating Folders

Let’ create an example project folder from the command line:

First we’ll use the mkdir command to make a directory. The argument to the command is the path of the directory to be created. To create a directory in the current folder we just need to use its name since and the path is assumed to be relative.

miles@miles-macbook:~$ mkdir eg_project

Confirm the project folder exists using ls and change into it with cd:

miles@miles-macbook:~$ ls
miles@miles-macbook:~$ cd eg_project

Then we’ll create several more folders as if the project is an analysis, mkdir can create multiple directories at once, for each argument passed.

mkdir doc data results scripts

4.5.2 Moving Folders/Files

Using Atom we’ll create some empty files. To open our project use File -> Open Folder… and select the ‘eg_project’ folder.

Create the 4 files in the eg_project folder as shown:

They don’t need to contain anything.

Let’s say we want to move the .Rmd file to the scripts folder. We can use the mv command to move files or folders. mv takes two arguments, the first being files or folders to move and the second being the path to move then to. Our command would look like:

miles@pa00120549:~/eg_project$ mv paper.rmd scripts

Let’s say we don’t like the name ‘scripts’ since ‘paper.Rmd’ is not really a script - it’s a source file. We can also use mv to rename files and folders, by moving them to a new place in the file system e.g.:

miles@pa00120549:~/eg_project$ mv scripts src

4.5.2.1 Move a file

Move ‘output.csv’ into the results folder of ‘eg_project’ using the mv command.
4.5.2.2 Rename a file

Complete the command below to rename the ‘paper.Rmd’ file to ‘methods.Rmd’ using mv:

miles@pa00120549:~/eg_project$ mv src/paper.Rmd ...

Be sure to check your result using ls.
4.5.3 Wildcards and Manipulations

Now we’re going to see how we can use wildcards to perform actions on many files or folders at once. A wildcard is the the * symbol, and it can be used to provide file system arguments that match patterns.

For example, lets say we want to list all the data files in the current folder:

miles@pa00120549:~/eg_project$ ls -alh *csv

This lists all files that end in ‘csv’. We could also use it a the end of a path to match all items that start with a prefix, e.g. also folders starting with ‘d’:

miles@pa00120549:~/eg_project$ ls -alh d*

We can use this with all types of file manipulations!
4.5.3.1 Move a group

    Using a single mv command, move the csv files with ‘table’ in the name to the ‘data’ folder.

4.5.4 File Removal

The rm command can be used to remove files and folders. It takes the path of the files or folders as its argument. It requires the -r (recursive) flag to remove folders.

To remove the ‘doc’ folder we’d do:

miles@pa00120549:~/eg_project$ rm -r doc

4.5.4.1 Wildcard extermination

    Combine the rm command with two wildcards to remove all .csv files in our project with a single command.

Hint: You can use a wildcard in the path for both the folder and file name portion.
4.6 Summary

In this lesson we’ve:

    Demystified some of the jargon associated with the command line.
    Learned the anatomy of cli commands: paths, arguments, and flags.
    Learned about relative and absolute paths, including useful short hands (~, .., .)
    Seen wildcards in action.
    Learned a handful of shell commands.

This is but a tiny fraction of what is available using the shell. The main objective here was to communicate some ideas that come in handy with git. You might like to see: http://swcarpentry.github.io/shell-novice/ for a more complete introduction.`
