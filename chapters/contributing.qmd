---
title: "Contributing"
engine: knitr
execute:
  eval: false
---

This book is made with [Quarto](https://quarto.org/).

### Local development

#### Setup

1. Read the [Get Started](https://quarto.org/docs/get-started/) chapter of the Quarto documentation, which includes details on installation.

#### Preparation

1. Read this guide on how to contribute.
2. Familiarize yourself with [Quarto Books](https://quarto.org/docs/books/).

#### Build the book locally

```{bash}
quarto preview
```

#### How to add a new chapter

1. Create a new Quarto document inside the `/chapters` folder
2. Add the new chapter to `_quarto.yml`.
Don't forget to specify the full path (including `/chapters/`)

```{yaml, filename="_quarto.yml (excerpt)"}
chapters:
  - index.qmd
  - chapters/YOUR-NEW-CHAPTER.qmd # <1>
  - another-chapter.qmd
```
1. Replace `YOUR-NEW-CHAPTER` with a concise filename.

<details>
<summary>Click here to view the full `_quarto.yml` file of this project.</summary>
```{bash, filename="_quarto.yml"}
#| file: _quarto.yml
#| code-line-numbers: true
```
</details>

### Adding references

References are saved in `references.bib`.

#### Resources

- ["Citations & Footnotes"](https://quarto.org/docs/authoring/footnotes-and-citations.html) in the Quarto documentation.
- [HTML options for references](https://quarto.org/docs/reference/formats/html.html#references).

## Code

- {{< fa book >}} ["HTML Code Blocks"](https://quarto.org/docs/output-formats/html-code.html) in the Quarto documentation

### Code inside the document

Add code snippets to a Quarto document like this:

````
```{{bash}}
git status
```
````

::: {.callout-warning title="Disable code execution in all Quarto documents by default!"}

Place the following code in the YAML header of **each** Quarto document:

```{yaml}
engine: knitr
execute:
  eval: false
```

<details>
<summary>Example: Click here for the YAML header of the current document.</summary>
```{yaml, filename="chapters/contributing.qmd", echo=c(1:6)}
#| file: chapters/contributing.qmd
#| code-line-numbers: true
```
</details>

<details>
<summary>Click here to learn more.</summary>
Quarto enables the inclusion of executable code blocks in Markdown.
This empowers users to create reproducible documents and reports, as the code needed for generating the output is embedded within the document and automatically executed during rendering.

However, in this guide, we usually only want to **display code but not execute it**!
We therefore need to disable code execution in the YAML header of each Quarto document.

The YAML header in a Quarto document is used to specify important metadata and settings for the document.
It is typically placed at the top of the document enclosed between three dashes (`---`) to separate it from the main content.
The YAML header provides instructions to the Quarto rendering engine on how to process and present the document.
</details>

:::

### Reference external code

You can reference external code.
For example, this code block will display the first five lines (`echo=c(1:5)`) of `_quarto.yml` (`#| file: _quarto.yml`) and add code line numbers (`#| code-line-numbers: true`) and a filename to the code block (`filename="_quarto.yml"`).

````
```{{bash, filename="_quarto.yml", echo=c(1:5)}}
#| file: _quarto.yml
#| code-line-numbers: true
```
````

### Add code annotations

- {{< fa book >}} ["Code Annotation"](https://quarto.org/docs/authoring/code-annotation.html) in the Quarto documentation

````
```{{bash}}
git status # <1>
```
1. `git status` displays the state of the working directory and the staging area.
````

## Images

### Background

Images are stored in a [NextCloud folder]({{< var links.nextcloud >}}).
They are downloaded into the `/static` folder using the command specified in the `Makefile`.

### Add new image

1. Become a collaborator on the [UHH Cloud folder]({{< var links.nextcloud >}})
1. Go to the [UHH Cloud folder]({{< var links.nextcloud >}})
1. Place the new image inside folder
1. Run `make download-images` to retrieve all files from the updated folder

::: {.callout-tip title="What's a Makefile?" collapse="false"}

```{bash, filename="Makefile"}
#| file: Makefile
#| code-line-numbers: true
```

:::

### Download images in pre-render command

It's also possible to include the `make download-images` as a project script in the `pre-render` script.
This would re-execute `make download-images` before every render.
For the moment, we disabled this option, but it can be enabled in `_quarto.yml`.

## Variables

- {{< fa book >}} ["Variables"](https://quarto.org/docs/authoring/variables.html) in the Quarto documentation

Quarto offers a number of ways to **include dynamic variables within documents**.
Dynamic variables are useful for externalizing content that varies depending on context, or as an alternative to repeating a value in multiple places.

In this project, we use a project-level `_variables.yml` file to define variables.
Variables can be either simple values or can include arbitrary Markdown content.

```{bash, filename="_variables.yml (excerpt)", echo=c(2, 3)}
#| file: _variables.yml
#| code-line-numbers: true
```

<details>
<summary>Click here to view the full `_variables.yml` file of this project.</summary>
```{bash, filename="_variables.yml"}
#| file: _variables.yml
#| code-line-numbers: true
```
</details>

The `var` shortcode then allows to include references to those variables within any document in this project.
For example, to include the link to the Nextcloud folder that stores static contents (images etc.) as a variable in a document, use `{{{< var links.nextcloud >}}}`.

For more details on variables, read the chapter on [Variables](https://quarto.org/docs/authoring/variables.html) in the Quarto documentation. 

## Fontawesome Icons

- {{< fa brands github >}} [Font Awesome Extension for Quarto](https://github.com/quarto-ext/fontawesome)
- {{< fa icons >}} [Free Font Awesome icons](https://fontawesome.com/search?m=free)

We use the Font Awesome Extension for Quarto to include [Font Awesome](https://fontawesome.com/) icons.

> This extension provides support including free icons provided by [Font Awesome](https://fontawesome.com/).
> Icons can be used in both HTML (via [Font Awesome 6 Free](https://fontawesome.com/search?m=free)) and PDF (via the [fontawesome5 LaTeX package](https://ctan.org/pkg/fontawesome5?lang=en)).

This extension includes support for **only free Font Awesome icons**.

To embed an icon, use the `{{{< fa >}}}` shortcode.
For example, `{{{< fa thumbs-up >}}}` will result in {{< fa thumbs-up >}}.
For details, see the [project documentation on GitHub](https://github.com/quarto-ext/fontawesome).

## Acknowledgements & Attribution

- The Quarto documentation [@allaire2022], in particular the chapters on [Variables](https://quarto.org/docs/authoring/variables.html), [Quarto Extensions](https://quarto.org/docs/extensions/), ["Code Annotation"](https://quarto.org/docs/authoring/code-annotation.html) (License: [GNU GPL v2](https://quarto.org/license.html))
- The [Font Awesome Extension for Quarto](https://github.com/quarto-ext/fontawesome) (License: [MIT](https://github.com/quarto-ext/fontawesome/blob/main/LICENSE))
