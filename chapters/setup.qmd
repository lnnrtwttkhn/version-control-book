---
title: "Setup"
engine: knitr
execute:
  eval: false
title-block-style: none
author: ""
categories: [beginner, basics]
abstract: |
  In this chapter, we will configure Git for your liking!
abstract-title: "Overview"
---

## Learning Objectives

- Setting up Git

## Prerequisites

- Basic familiarity with the command line.
We recommend to read the ["Command Line"](command-line.qmd) chapter.
- You need to have Git installed on your Computer.
If you need help, check out the ["Installation"](installation.qmd) chapter.

## Configuring Git

Once you installed Git, it is time to set it up. We will do this from the command line. The `git config` command is used to get and set configuration. It allows you to customize Git according to your preferences and requirements. To look at all the different configuration commands you can use

```{bash}
git config
```

This chapter will only deal with the most important/necessary ones.

::: {.callout-tip title="What are the different configuration levels?" collapse="true"}
Git configuration values can be stored at three different levels:

**System-level configuration**: This level applies configuration values to every user on the system and all their repositories. To read or write configuration values at this level, you need administrative or superuser privileges.

**User-level Configuration**: This level is specific to an individual user. Configuration values set at this level will be applied to all repositories owned by the user.

**Repository-level Configuration**: This level is specific to a particular Git repository. The configuration values set at this level override values set at the system-level and user-level configurations for that specific repository. By default, Git reads from and writes to this file when you use the `git config` command without any additional options.
:::

### {{< fa person >}} Identifying yourself

Before you start using Git, it's important to set your username and email address. This information is crucial because Git uses it to identify the author of each change you make. By associating your commits/changes with your username and email, it allows others to see who made the changes and facilitates collaboration within a project.

Setting your username and email address is a one-time setup process, but you can always update them later if needed. To perform this configuration, you can use the command line:

```{bash}
git config --global user.name "Jane Doe"
git config --global user.email jane@example.com
```

::: {.callout-tip title="What name should you use for Git?" collapse="true"}
It can be your **GitHub username**, your **real name**, or something informative about you. This name will be attached to your commits, so **choose something that makes sense** to others and yourself in the future.
:::

### {{< fa code-branch >}} Configure the default name for an initial branch

By default, Git uses the name "master" for the initial branch when creating a new repository. However, there has been a growing movement to transition to using "main" as the default branch name instead. One of the main motivations behind this change is to promote inclusivity and remove potentially offensive terminology from the default Git workflow. To configure the default branch name to "main" in Git, you can use the following command

```{bash}
git config --global init.defaultBranch main
```

## {{< fa gear >}} Check your Settings

You can check if your configurations worked using

```{bash}
git config --list
```

This should create an output similar to this:

```{bash}
user.name=Example
user.email=example@example.com
init.defaultbranch=main
core.editor=nano
```

Now that your Git environment is customized to your preferences, you are ready to use Git.

## {{< fa circle-question >}} Calling for Help

The `--help` option in Git is a command that provides you with access to the built-in Git documentation and help resources. When you run a Git command followed by `--help`, Git displays information about that command, including its usage, available options, and a brief description of its functionality.

For example

```{bash}
git config --help
```

will open up a browser in the terminal containing information about the `config`command. To quit the browser use `q`.

While the command provides extensive documentation and information about Git commands, it is not the most beginner-friendly resource.

## {{< fa pen >}} Setting your Text editor

Sometimes, Git might open up a text editor, and it can be annoying if you end up in an editor you don't like or don't know how to use. 
The standard text editor on Mac and when using **"Git for Windows"**is called **Vim**, which is widely known for being difficult to use. 
You can find more information about the challenges of using Vim (and some funny memes) [here](https://stackoverflow.blog/2017/05/23/stack-overflow-helping-one-million-developers-exit-vim/).
To check out which text editor Git is using, you can use:

```{bash}
git config --get core.editor
```

If it is indeed **Vim**, do not despair!
You can either pick up on the basics of Vim or simply change the texteditor.

*Also note that you will typically not have to use the text editor a lot*

### Vim Basics
To start Vim, open your terminal and type vim followed by the filename you want to edit.
In Vim, you have two main modes: "Insert" mode for typing and "Normal" mode for navigation and command execution.
To switch from "Normal" mode to "Insert" mode, press i for inserting text.
To save your changes and exit Vim, press Esc to enter "Normal" mode, then type :w to save, and :q to quit.
Vim's strength lies in its powerful commands for text manipulation, such as copying, pasting, and searching, which are executed in "Normal" mode. 
Practice is key to mastering Vim.

### Changing your text editor

If you want to change the standard text editor, to one you are more comfortable with, there a lot of alternatives like [Nano](https://www.nano-editor.org/docs.php), [VS Code](https://code.visualstudio.com) or [Notepad++](https://notepad-plus-plus.org/downloads/).

If you have decided to use a different text editor you use:

```{bash}
git config --global core.editor editor-name
```

From now on, when Git requires you to interact with a text editor, it will use the one you have set. If you ever want to change your Git editor in the future, you can repeat the above steps and specify the new editor command or path.

## Acknowledgements and further reading

We would like to express our gratitude to the following resources, which have been essential in shaping this chapter.
We recommend these references for further reading:

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| output: asis
bibtexkeys = c("bryan2023", "capes2023", "chacon2014", "koziar2023")
knitr::kable(ref_table(bibtexkeys), format = "markdown")
```

## Cheatsheet

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
knitr::kable(table_cheatsheet(name = "config"), format = "markdown")
```
