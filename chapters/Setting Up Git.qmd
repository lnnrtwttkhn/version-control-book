---
title: "Setting up Git" 
engine: knitr
execute:
  eval: false
  title-block-style: none
author: ""
---

::: callout-note
### Overview

{{< fa clock >}} Duration:  min
:::

# Learning objectives

In this chapter the goal is to setup your installed programms. 
This means to:

-   Configure user information
-   Set editor
-   Set initial branch name
-   Check Settings
-   Be able to call for Help

# Configuration
The git config command  is used to get and set configuration. 
It allows you to customize Git according to your preferences and requirements. 
To look at all the different Configuration commands you can use

```{bash}
git config
```
This chapter will only deal with the most important/necessary ones.

::: {.callout-tip title="What are the different configuration levels?" collapse="true"}
Git configuration values can be stored at three different levels:

**System-level Configuration**: This level applies configuration values to every user on the system and all their repositories.
To read or write configuration values at this level, you need administrative or superuser privileges.

**User-level Configuration**: This level is specific to an individual user. 
Configuration values set at this level will be applied to all repositories owned by the user.

**Repository-level Configuration**: This level is specific to a particular Git repository. 
The configuration values set at this level override values set at the system-level and user-level configurations for that specific repository. 
By default, Git reads from and writes to this file when you use the git config command without any additional options.
:::

## Identify yourself {{< fa person >}}

Before you start using Git, it's important to set your username and email address. 
This information is crucial because Git uses it to identify the author of each change you make. 
By associating your commits/changes with your username and email, it allows others to see who made the changes and facilitates collaboration within a project.

Setting your username and email is a one-time setup process, but you can always update them later if needed. 
To perform this configuration, you can use the Terminal.
It makes sense to use your Github account details. 

```{bash}

git config --global user.name "Example"
git config --global user.email beispiel@example.com

```


## Set Git editor {{< fa pen >}}

As mentioned in the [installation chapter](installation.qmd), you may come across various scenarios where you need to interact with text-based files, such as commit messages or merge conflict resolutions. 
Git relies on a text editor to allow you to make changes to these files within the Git workflow. 
To set your preferred text editor in Git, you can use the git config command

```{bash}

git config --global core.editor "editor name"

```

From now on, when Git requires you to interact with a text editor, it will use the one you have set.
If you ever want to change your Git editor in the future, you can repeat the above steps and specify the new editor command or path.

::: {.callout-tip title="What Editor should I use?" collapse="true"}
WIP
:::

## Configure the default name for an initial branch {{< fa code-branch >}}

By default, Git uses the name "master" for the initial branch when creating a new repository.
However, there has been a growing movement to transition to using "main" as the default branch name instead.
One of the main motivations behind this change is to promote inclusivity and remove potentially offensive terminology from the default Git workflow. 
To configure the default branch name to "main" in Git, you can use the following command

```{bash}

git config --global init.defaultBranch main

```

## Check your Settings {{< fa gear >}}

You can check if your configurations worked using

```{bash}

git config --list

```

This should create an output similiar to this.

```{bash}

user.name=Example
user.email=beispiel@example.com
init.defaultbranch=main
core.editor=nano

```

Now that your Git environment is customized to your preferences, you are ready to utilize Git.

# Calling for Help {{< fa circle-question >}}

The **--help** option in Git is a command that provides you with access to the built-in Git documentation and help resources.
When you run a Git command followed by --help, Git displays information about that command, including its usage, available options, and a brief description of its functionality.

For example

```{bash}

git config --help

```

will open up a browser in the terminal containing information about the **config** command. To quit the browser use **q**.

While the command provides extensive documentation and information about Git commands, it is not the most beginner-friendly resource.

## Sources
https://happygitwithr.com/ 
