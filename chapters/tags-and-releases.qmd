---
categories: [intermediate, GitHub, remote]
image: ../static/github-edit-release-pencil.png
abstract: |
  Let's dive into the world of Git tags and releases! 
  We'll cover everything from creating tags to managing versions, sharing tips for smooth collaboration and integration with Zenodo.
---

# Tags and Releases

::: {.callout-tip appearance="minimal"}
<h5>Learning Objectives</h5>
{{< include ../objectives/_objectives-tags-releases.qmd >}}
:::

## Tags

### Importance of Tags

At its core, a tag in version control systems like Git is a reference or a label associated with a **specific commit**.
Tags are used to mark particular points in a project's history, usually to signify important **milestones** or **releases**.
It acts as a more human-readable reference to a particular state of the repository.

Once created, a tag is generally immutable.
It doesn't move or change its associated commit.
Tags don't store changes themselves.
They merely point to an existing commit.
Tags should be named in a way that is meaningful and easy to understand.
Commonly used names include version numbers (for example, `v1.0`, a practice known as [semantic versioning](https://semver.org/)), release names, or other identifiers that convey the purpose of the tag.

Tags can also be beneficial for collaboration within a development team, as they provide a **common reference point** for discussing and working on specific versions of the project.
Unlike branches, which represent separate lines of development, tags are typically independent of branches.
They can be created on any commit, regardless of the branch.
Tags are stable references that don't change even if new commits are added to the repository.

There are two types of tags:
Lightweight and Annotated tags.

### Lightweight Tags

Lightweight tags in Git are simple pointers to specific commits in the version control history.
Unlike annotated tags, they carry **minimal metadata**, consisting only of the tag name and the hash of the associated commit.
Lightweight tags are created using `git tag`, followed by the tag name:

```{zsh filename="Code"}
git tag v1.0 # <1>
```
1. `v1.0` is only an example.
You can choose any other tag name.

This creates a lightweight tag named `v1.0` that points to the current commit at the time of creating the tag.
If you create a lightweight tag in this way (without specifying another commit), it is created at the current commit (`HEAD`) in your working directory.

You can verify that the tag has been created by listing all the tags.
To do this, use:

```{zsh filename="Code"}
git tag 
```

### Annotated Tags

Annotated tags in Git are tags that include **additional metadata** beyond a reference to a specific commit.
When you create an annotated tag, Git stores information such as the tagger's **name**, **email**, the **date** the tag was created, and a **tagging message**.
This additional information provides context and details about the tag, making annotated tags more informative compared to lightweight tags.
To create an annotated tag, you use `git tag` with the `-a` flag.
To include a tagging message, the `-m` flag is used.
If you do not use the `-m` flag, your text editor of choice will open up.
The tagging message can be a detailed description of the tag, such as release notes or significant changes.
For example:

```{zsh filename="Code"}
git tag -a v1.0 -m "Release version 1.0"
```

Annotated tags are larger in size compared to lightweight tags due to the additional metadata.

::: {.callout-tip title="Common `git tag` flags" collapse="true"}
`-a` or `--annotate`: Creates an annotated tag, which includes additional metadata like tagger information and a tagging message.

`-m` or `--message`: Specifies the tagging message directly in the command.
Useful when creating an annotated tag without opening an editor.

`-l` or `--list`: Lists existing tags.

`-d` or `--delete`: Deletes a tag.

`-f` or `--force`: Replaces the pre-existing tag.
:::

### Tags workflow

Once you created a lightweight or annotated tag, it will show up if you use `git tag` or `git tag -l`.
To switch to a tag, you can use `git checkout` followed by the name of the tag:

```{zsh filename="Code"}
git checkout v1.0
```

Now you are "on the tag" and your working directory reflects the state of the code of the commit the tag is pointing to.
This can be useful to get your project back into the state the tag is pointing to.

In general, it's not advisable to make changes directly after switching to a tag.
When you switch to a tag in Git, you enter a "detached `HEAD`" state, meaning that you're not on any branch.
In this state, any new commits you make won't belong to any branch, and you might lose those changes if you switch away from the tag.
If you need to make changes based on a specific tag, it's often better to create a new branch from the tag and then make your changes on that branch.

A recommended practice is to treat **annotated tags as suitable for public releases** and **lightweight tags as more appropriate for private use**. 
Annotated tags include additional metadata such as the tagger's name, email, and date, making them valuable for public releases where comprehensive information is beneficial.
In contrast, lightweight tags act as simple "bookmarks" to a commit, serving as efficient pointers without the extra metadata. 
They are particularly useful for creating quick links to relevant commits in a more private or internal context.

### Pushing and pulling tags

Pushing and pulling tags in Git involves syncing tags between your local repository and a remote repository, such as GitHub, as discussed in the [chapter about remote repositories](remotes-intro.qmd).
To push a specific tag to the remote repository, use:

```{zsh filename="Code"}
git push origin <tag-name> # <1>
```
1. Replace `<tag-name>` with the name of the tag you want to push.

To push all available tags to the remote repository, use the following command:

```{zsh filename="Code"}
git push origin --tags
```

To fetch all tags from the remote repository (without merging), use:

```{zsh filename="Code"}
git fetch --tags
```

Alternatively, you can combine fetching and merging using:

```{zsh filename="Code"}
git pull --tags
```

When you pull or fetch tags, Git fetches tag references, but it does not automatically switch to the state of a specific tag.
If you want to work on a specific tag after pulling, use `git checkout` to switch to that tag.

### Tagging a previous commit

Sometimes, you may want to create a tag for a commit that is not the most recent one, such as tagging a significant point in your project's history that was missed earlier.
You can easily do this in Git by specifying the commit hash when creating the tag.

Here's how you can tag a specific (previous) commit:

**1. Find the commit hash:**
First, you need to identify the commit you want to tag
^[:bulb: Tip: Use `git log --oneline` to receive a list of previous commits along with their short hashes. Find the commit you want to tag and copy its hash (details [here](git-essentials.qmd#logging-commits).)].

**2. Create the tag:**
Once you have the commit hash, you can create a tag for it.
You can create either a lightweight or an annotated tag as discussed earlier.
See the following code examples for a lightweight and annotated tag:

```{zsh filename="Code (Lightweight Tag)"}
git tag v1.0 <commit-hash> # <1>
```
1. Replace `<commit-hash>`with the actual hash of the commit you want to tag.

```{zsh filename="Code (Annotated Tag)"}
git tag -a v1.0 -m "Tagging version 1.0 for the old commit" <commit-hash> # <1>
```
1. Replace `<commit-hash>`with the actual hash of the commit you want to tag.

By following these steps, you can tag any commit in your repository, even if it's an older one. 

## GitHub Releases

Releases represent specific versions of your repository, that you can package and share with a broader audience for download and usage.
These releases are tied to specific Git tags, which act as markers for specific points in your repository's history.

Here's a step-by-step guide:

1. Go to the **main page** of your GitHub **repository**.

2. Click on "**Create a new release**" under "**Releases**" tab located on the right side of your repository page.
Now, you should see a page, similar to @fig-gh_releases.

3.  Choose an **existing Git tag** or **create a new one**.
If you have created and pushed a tag, it should show up here.
Enter the **tag version** in the "Choose a tag" field.
Enter a **meaningful title** for your release.
In the "**Describe this release**" field, provide **release notes**.
This can include details about new features, bug fixes, and any other relevant information.
If you have binary files, installers, or other assets related to the release, you can attach them by clicking on "Attach binaries by dropping them here or selecting them".

4. If you're creating a draft release, you can save it as a draft by clicking on the "Save draft" button.
Draft releases are not visible to the public.
If you're ready to make the release public, click on the "**Publish release**" button.
    
![Screenshot of GitHub when creating a new release](../static/github-releases.png){#fig-gh_releases}

That's it!
You've successfully created a GitHub release for your project! :rocket:

After publishing the release, you and others can view it on the **Releases page** of your GitHub repository.
It will include the release notes, associated Git tag, and any attached assets.

## Using others' work

Research projects often require the input of contributors apart from a paper's authors.
This can be newly developed software or data that has been collected.
Citing research outputs and work beyond paper's helps highlight the significance of other contributions and increases transparency by attributing work more accurately.
This is important as in academia citations are often used as the main measure of people's output. 
In turn, this acknowledgment can be an incentive to make research output more openly accessible.

### Citation File

A citation file is a file in your repository that tells others how they should cite your work.
This decreases the risk of false citations and simplifies the process for everyone.
Your file should be named `CITATION.cff` and once you add it to your default branch, GitHub will automatically create a `Cite this repository` button, which creates an APA style or BibTex citation.
This is possible because the file contains machine- and human-readable information.
Whilst GitLab does not automatically create this neat citation button, you can still include a similar citation file to ensure your work is cited correctly.
To create a citation file on GitHub, you can make use of their template.
Simply go to add a file on your project's main branch.
Name the file `CITATION.cff` and an `Insert example` button will pop up.
Click it and GitHub will insert the template, to which you which you  edit the information in the and then commit it.  
Alternatively, you can make use of the free website [cffinit](https://citation-file-format.github.io/cff-initializer-javascript/#/).
It will ask you to provide them with the needed information to create a citation and will return the finished citation file to you.
Add this to the root of your repository and you just made referencing your work a lot easier.

### Licenses

Licenses are telling people exactly what they can and can't use your work for.
By default, your public repositories fall under copyright, which means others are not allowed to copy, modify or distribute it.
Thus, if you want to make your work accessible or open source, you'll **have to** explicitly state what others are allowed to do with it.
You might not want your project used for commercial purposes but are happy to see it in non-commercial ones.  
For this it is helpful to refer to different types of licences.
Whilst you could theoretically come up with your own license, it is highly advisable that you refer to a commonly used one, which not only prevents you from getting lost in the world of licences but also makes it easy for others to understand.  
One major differentiation to consider is whether you want a `copyleft` or `permissive` license.
`Copyleft` generally means that derivatives of your work will have to be made accessible under similar licenses.
The derivatives are also made available and can in turn be built upon by others.
`Permissive` licenses allow for flexible licensing of derivatives.
They also allow for derivatives from open source work to be used under other licenses, which might make access more restricted.  
Another differentiation is `attribution`, which defines whether derivatives have to include a reference  to your original work.  
Whilst there are many licenses out there, Creative Commons or CC licenses are widely used across fields, from photography to code, and are easily understood.
Use this [CC license chooser](https://chooser-beta.creativecommons.org/) to guide you to a CC license that suits you.
[Choosealicense.com/](https://choosealicense.com/) from GitHub focuses on other widely used licenses and can be helpful in deciding on one.  
Now that you've chosen a license, it is good practice to put it into the root of your repository under the file name `LICENSE.txt` so people can easily find it.
Simply create the `LICENSE.txt` file and copy your chosen license's text into it.
Also refer to it in your repository's `README.md`, so it really can't be missed.
GitHub will automatically pick this up and display it on the right side in your repository's `About` section.
If you want to know more about licensing, [The Turing Way](https://book.the-turing-way.org/reproducible-research/licensing) dives deeper into license discourse like the 'Ethical Source' movement and into pitfalls such as license compatibility.

:::{.callout-tip collapse="true" title="Which license should I use?"}
Whilst ultimately you have to decide how your work can to be used, the following licenses are commonly used for the respective outputs.  
For code, the [MIT License](https://mit-license.org/) is often used and is a permissive license which does not call for attribution.
For text, common licenses are [CC-BY](https://creativecommons.org/licenses/by/4.0/) and [CC-BY-SA](https://creativecommons.org/licenses/by-sa/4.0/) which both require attribution, but differ in how derivatives have to be licensed.
:::

:::{.callout-tip collapse="true" title="Can I have files under different licenses in the same repository?"}
If you want to make parts of your work accessible under different conditions, you can use different licenses in the same repository.
In this case, really make sure to clearly declare this, mentioning it in each files header, as to not create too much confusion.
:::

:::{.callout-tip collapse="true" title="GitHub: Forking allowed!"}
If you're using GitHub, you've already agreed to viewing and forking of your public repositories when you created your account and agreed to the "Terms of Service".
However, this simply means people can look at and create a copy of your work, a fork, but that doesn't actually allow for them to use of modify it.
This is where licences come in again and you can define how people can proceed with using your work.
:::

## Zenodo

[Zenodo](https://zenodo.org) is an open-access digital repository platform designed to **preserve and share research outputs**.
It is operated by CERN (European Organization for Nuclear Research) and supported by the European Commission.
Zenodo provides a platform for researchers across various disciplines to deposit, share, and archive their scholarly works, datasets, code, and other research outputs.

Zenodo can be integrated with version control systems like Git and platforms like GitHub.
This integration allows for **automated archiving of specific releases or tags** from Git repositories.
Zenodo assigns a **Digital Object Identifier (DOI)** to each record, including those linked to GitHub repositories, providing a permanent link for citation.

By linking your GitHub repository, you also ensure that your work is archived and accessible beyond the lifespan of GitHub.
When you publish a research paper, journals increasingly require or encourage the deposition of associated data in a public repository. 
Uploading the contents of your GitHub repository to Zenodo ensures that your work is openly accessible and can be cited.

::: {.callout-tip title="What is a Digital Object Identifier (DOI)?" collapse="true"}

A Digital Object Identifier (DOI) is a unique alphanumeric string assigned to a digital document or resource to provide a permanent and stable link to it.
DOIs are commonly used to identify and provide a persistent link to scholarly articles, research papers, books, datasets, and other types of digital content.
The purpose of a DOI is to ensure that the content can be reliably located and accessed over time, even if the web address (URL) of the resource changes.

Key features of DOIs include:

1. **Uniqueness:** Each DOI is unique to a particular resource, ensuring that no two resources have the same identifier.

2. **Persistence:** DOIs are designed to remain unchanged, providing a persistent link to the resource even if it is moved or the URL changes.

3. **Interoperability:** DOIs are widely used in scholarly publishing and other sectors, making them interoperable across different systems and platforms.

4. **Accessibility:** DOIs are often associated with metadata that provides information about the resource, such as author, title, publisher, publication date, and more.

5. **Citations:** DOIs are commonly used in academic and scientific citations to provide a standardized and reliable reference to a specific resource.

DOIs are typically assigned and managed by registration agencies, such as CrossRef for scholarly content or DataCite for research data. Organizations and publishers assign DOIs to their digital content to enhance discoverability, citation tracking, and long-term accessibility.

:::

### Creating a Zenodo account

::: {.callout-important appearance="simple"}
Just experimenting?
Use the [Zenodo Sandbox](https://sandbox.zenodo.org) rather than the "real" [Zenodo](https://zenodo.org)!
:::

To upload a Git repository to Zenodo, you first need to create a Zenodo account.
On the Zenodo [start page](https://zenodo.org), you can click on "**Sign Up**" in the top right corner.
Here you either can directly use your **GitHub account** to sign up, or sign up using **your email** (or other accounts) and link your GitHub account later on.
To **link your GitHub account**, you can click on the arrow, next to your email, on the start page and select "GitHub".

### Uploading a Git repository

If you are just trying out how to upload a Git repository, we recommend to use the [Zenodo Sandbox](https://sandbox.zenodo.org), to not create an unnecessary real DOI which is hard to delete.
If you created an account on the [regular Zenodo site](https://zenodo.org) before, you will have to **create a new account to use the** Zenodo Sandbox, since the accounts do not synchronize.

::: {.callout-important appearance="simple"}
**Note that you have to link your Zenodo account to GitHub and sync your repository *before* you create a new release on GitHub!**

Again: **First, link GitHub to Zenodo** and sync your repository! *Then* create the release on GitHub.
:::

To upload an older release, you have to download your repository as a `.zip` file from GitHub and uploading it manually at [https://sandbox.zenodo.org/uploads/new](https://sandbox.zenodo.org/uploads/new)

To upload a new release, visit the [Zenodo GitHub settings](https://sandbox.zenodo.org/account/settings/github/).
Here you should see all your uploaded repositories, with the option to sync them by selecting the "on" button.
If you now create a release, as discussed earlier, it will show up and be associated with a DOI.
Please note that if you have created a release *before* syncing your repository, the release will not show up.
You can delete the GitHub release without deleting your tag and create a new release, which is then going to appear on Zenodo. 

For a pictured guide on how to upload a GitHub repository to Zenodo, you check out [this guide](https://coderefinery.github.io/github-without-command-line/doi/) from the [Code Refinery](https://coderefinery.org).

#### Markdown DOI badge

After you have created a release in your synced repo, a DOI badge should show up in your [Zenodo GitHub settings](https://sandbox.zenodo.org/account/settings/github/) next to the repository name.
When you click on it there should be a section called **Markdown** with Markdown syntax below, for example:

```
[![DOI](https://sandbox.zenodo.org/badge/731953735.svg)](https://sandbox.zenodo.org/doi/10.5072/zenodo.71301)
```

You can copy and paste this syntax into your `README.md` file on GitHub to create a clickable DOI badge.
This badge will then show up in your `README.md` file on GitHub as shown below.
Now visitors of your GitHub repository only need to click on the badge to get to the release on Zenodo!

[![](https://sandbox.zenodo.org/badge/731953735.svg)](https://sandbox.zenodo.org/doi/10.5072/zenodo.71301)

## Acknowledgements and further reading

We would like to express our gratitude to the following resources, which have been essential in shaping this chapter.
We recommend these references for further reading:

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#| output: asis
bibtexkeys = c("chacon2014", "coderefinery2023")
knitr::kable(ref_table(bibtexkeys), format = "markdown")
```

## Cheatsheet

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
knitr::kable(table_cheatsheet(name = "Tags and Releases"), format = "markdown", row.names = FALSE)
```

