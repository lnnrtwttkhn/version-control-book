---
title: "Collaboration"
engine: knitr
execute:
  eval: false
title-block-style: none
author: ""
---

In the first chapters, we have discussed how to use version control when your only collaborator is your future or past self.

If you want to learn more about different Git flows, read the flows chapter


## GitHub Flow

1. Create a branch in your repository
2. Make, commit, and push changes to your branch until you are ready to ask for feedback
3. Create a pull request
4. Address review comments
5. Merge your pull request
6. Delete your branch

## Pull requests

Create a pull request to ask collaborators for feedback on your changes. Pull request review is so valuable that some repositories require an approving review before pull requests can be merged. If you want early feedback or advice before you complete your changes, you can mark your pull request as a draft. For more information, see “Creating a pull request.”

When you create a pull request, include a summary of the changes and what problem they solve. You can include images, links, and tables to help convey this information. If your pull request addresses an issue, link the issue so that issue stakeholders are aware of the pull request and vice versa. If you link with a keyword, the issue will close automatically when the pull request merges. For more information, see “Basic writing and formatting syntax” and “Linking a pull request to an issue.”

In addition to filling out the body of the pull request, you can add comments to specific lines of the pull request to explicitly point something out to the reviewers.

Your repository may be configured to automatically request a review from specific teams or users when a pull request is created. You can also manually @mention or request a review from specific people or teams.

If your repository has checks configured to run on pull requests, you will see any checks that failed on your pull request. This helps you catch errors before merging your branch. For more information, see “About status checks.”

Address review comments

Reviewers should leave questions, comments, and suggestions. Reviewers can comment on the whole pull request or add comments to specific lines or files. You and reviewers can insert images or code suggestions to clarify comments. For more information, see “Reviewing changes in pull requests.”

You can continue to commit and push changes in response to the reviews. Your pull request will update automatically.

Merge your pull request

Once your pull request is approved, merge your pull request. This will automatically merge your branch so that your changes appear on the default branch. GitHub retains the history of comments and commits in the pull request to help future contributors understand your changes. For more information, see “Merging a pull request.”

GitHub will tell you if your pull request has conflicts that must be resolved before merging. For more information, see “Addressing merge conflicts.”

Branch protection settings may block merging if your pull request does not meet certain requirements. For example, you need a certain number of approving reviews or an approving review from a specific team. For more information, see “About protected branches.”

Delete your branch

After you merge your pull request, delete your branch. This indicates that the work on the branch is complete and prevents you or others from accidentally using old branches. For more information, see “Deleting and restoring branches in a pull request.”

Don’t worry about losing information. Your pull request and commit history will not be deleted. You can always restore your deleted branch or revert your pull request if needed.