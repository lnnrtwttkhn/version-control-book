To learn Git effectively, it makes sense to practice version control by implementing it on your own small project.
For the purpose of this guide, we will start off with a small project that only involves plain-text files.
You don't need to know any programming language like R or Python.
So while reading this chapter and using the commands along, **your task** is to:

:memo: **Setup:** Create a recipes folder and turn it into a Git repository. <br>
:memo: **Create File:** Inside recipes, make a recipes.txt file. <br>
:memo: **Add Content:** Write down a recipe—any favorite or an intriguing AI-generated one—in `recipes.txt` or `recipes.qmd`. <br>
:memo: **Save Changes:**  Stage and commit your recipe to the repository. <br>

Please **keep this project directory**!
This guide will continue to use your recipe project as an example in following chapters.

There are several terms in these instructions that might be unfamiliar to you, for example "repository", "stage" or "commit".
Don't worry, you will learn about what these terms mean in this chapter.
Let's *git* started!

**Bonus exercises**

Besides generally playing around with staging, committing, `git log` and `git diff`, you can also do these tasks:

:memo: Add a recipe to your project using the repeated `--amend` workflow.<br>
:memo: Initialize a new Git repository and create a `.docx` file in it. 
Check out the results of `git diff` after writing in the file.<br>
:memo: Use `ls -a` to see the temporary files.
:memo: Create a `.gitignore` file, where you put all temporary files Word creates.